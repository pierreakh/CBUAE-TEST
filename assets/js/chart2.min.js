"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubTitle = exports.ScatterController = exports.Scale = exports.RadialLinearScale = exports.RadarController = exports.PolarAreaController = exports.PointElement = exports.PieController = exports.LogarithmicScale = exports.LinearScale = exports.LineElement = exports.LineController = exports.Legend = exports.Interaction = exports.Filler = exports.Element = exports.DoughnutController = exports.DomPlatform = exports.Decimation = exports.DatasetController = exports.Colors = exports.Chart = exports.CategoryScale = exports.BubbleController = exports.BasicPlatform = exports.BasePlatform = exports.BarElement = exports.BarController = exports.ArcElement = exports.Animations = exports.Animation = void 0;
Object.defineProperty(exports, "Ticks", {
  enumerable: true,
  get: function get() {
    return _helpersSegment.aL;
  }
});
exports._adapters = exports.Tooltip = exports.Title = exports.TimeSeriesScale = exports.TimeScale = void 0;
exports._detectPlatform = _detectPlatform;
exports.controllers = exports.animator = void 0;
Object.defineProperty(exports, "defaults", {
  enumerable: true,
  get: function get() {
    return _helpersSegment.d;
  }
});
exports.scales = exports.registry = exports.registerables = exports.plugins = exports.layouts = exports.elements = void 0;

var _helpersSegment = require("./chunks/helpers.segment.js");

require("@kurkle/color");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e27) { throw _e27; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e28) { didErr = true; err = _e28; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Animator = /*#__PURE__*/function () {
  function Animator() {
    _classCallCheck(this, Animator);

    this._request = null, this._charts = new Map(), this._running = !1, this._lastDate = void 0;
  }

  _createClass(Animator, [{
    key: "_notify",
    value: function _notify(e, i, a, t) {
      var s = i.listeners[t],
          n = i.duration;
      s.forEach(function (t) {
        return t({
          chart: e,
          initial: i.initial,
          numSteps: n,
          currentStep: Math.min(a - i.start, n)
        });
      });
    }
  }, {
    key: "_refresh",
    value: function _refresh() {
      var _this = this;

      this._request || (this._running = !0, this._request = _helpersSegment.r.call(window, function () {
        _this._update(), _this._request = null, _this._running && _this._refresh();
      }));
    }
  }, {
    key: "_update",
    value: function _update() {
      var _this2 = this;

      var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();
      var o = 0;
      this._charts.forEach(function (a, s) {
        if (a.running && a.items.length) {
          var n = a.items;
          var t = n.length - 1,
              e = !1,
              i;

          for (; 0 <= t; --t) {
            (i = n[t])._active ? (i._total > a.duration && (a.duration = i._total), i.tick(r), e = !0) : (n[t] = n[n.length - 1], n.pop());
          }

          e && (s.draw(), _this2._notify(s, a, r, "progress")), n.length || (a.running = !1, _this2._notify(s, a, r, "complete"), a.initial = !1), o += n.length;
        }
      }), this._lastDate = r, 0 === o && (this._running = !1);
    }
  }, {
    key: "_getAnims",
    value: function _getAnims(t) {
      var e = this._charts;
      var i = e.get(t);
      return i || (i = {
        running: !1,
        initial: !0,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      }, e.set(t, i)), i;
    }
  }, {
    key: "listen",
    value: function listen(t, e, i) {
      this._getAnims(t).listeners[e].push(i);
    }
  }, {
    key: "add",
    value: function add(t, e) {
      var _this$_getAnims$items;

      e && e.length && (_this$_getAnims$items = this._getAnims(t).items).push.apply(_this$_getAnims$items, _toConsumableArray(e));
    }
  }, {
    key: "has",
    value: function has(t) {
      return 0 < this._getAnims(t).items.length;
    }
  }, {
    key: "start",
    value: function start(t) {
      var e = this._charts.get(t);

      e && (e.running = !0, e.start = Date.now(), e.duration = e.items.reduce(function (t, e) {
        return Math.max(t, e._duration);
      }, 0), this._refresh());
    }
  }, {
    key: "running",
    value: function running(t) {
      if (!this._running) return !1;
      t = this._charts.get(t);
      return !!(t && t.running && t.items.length);
    }
  }, {
    key: "stop",
    value: function stop(e) {
      var i = this._charts.get(e);

      if (i && i.items.length) {
        var a = i.items;
        var t = a.length - 1;

        for (; 0 <= t; --t) {
          a[t].cancel();
        }

        i.items = [], this._notify(e, i, Date.now(), "complete");
      }
    }
  }, {
    key: "remove",
    value: function remove(t) {
      return this._charts["delete"](t);
    }
  }]);

  return Animator;
}();

var animator = new Animator();
exports.animator = animator;
var transparent = "transparent",
    interpolators = {
  "boolean": function boolean(t, e, i) {
    return .5 < i ? e : t;
  },
  color: function color(t, e, i) {
    t = (0, _helpersSegment.c)(t || transparent);
    var a = t.valid && (0, _helpersSegment.c)(e || transparent);
    return a && a.valid ? a.mix(t, i).hexString() : e;
  },
  number: function number(t, e, i) {
    return t + (e - t) * i;
  }
};

var Animation = /*#__PURE__*/function () {
  function Animation(t, e, i, a) {
    _classCallCheck(this, Animation);

    var s = e[i],
        s = (a = (0, _helpersSegment.a)([t.to, a, s, t.from]), (0, _helpersSegment.a)([t.from, s, a]));
    this._active = !0, this._fn = t.fn || interpolators[t.type || _typeof(s)], this._easing = _helpersSegment.e[t.easing] || _helpersSegment.e.linear, this._start = Math.floor(Date.now() + (t.delay || 0)), this._duration = this._total = Math.floor(t.duration), this._loop = !!t.loop, this._target = e, this._prop = i, this._from = s, this._to = a, this._promises = void 0;
  }

  _createClass(Animation, [{
    key: "active",
    value: function active() {
      return this._active;
    }
  }, {
    key: "update",
    value: function update(t, e, i) {
      var a, s, n;
      this._active && (this._notify(!1), a = this._target[this._prop], s = i - this._start, n = this._duration - s, this._start = i, this._duration = Math.floor(Math.max(n, t.duration)), this._total += s, this._loop = !!t.loop, this._to = (0, _helpersSegment.a)([t.to, e, a, t.from]), this._from = (0, _helpersSegment.a)([t.from, a, e]));
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this._active && (this.tick(Date.now()), this._active = !1, this._notify(!1));
    }
  }, {
    key: "tick",
    value: function tick(t) {
      var t = t - this._start,
          e = this._duration,
          i = this._prop,
          a = this._from,
          s = this._loop,
          n = this._to;
      var r;
      if (this._active = a !== n && (s || t < e), !this._active) return this._target[i] = n, void this._notify(!0);
      t < 0 ? this._target[i] = a : (r = t / e % 2, r = s && 1 < r ? 2 - r : r, r = this._easing(Math.min(1, Math.max(0, r))), this._target[i] = this._fn(a, n, r));
    }
  }, {
    key: "wait",
    value: function wait() {
      var i = this._promises || (this._promises = []);
      return new Promise(function (t, e) {
        i.push({
          res: t,
          rej: e
        });
      });
    }
  }, {
    key: "_notify",
    value: function _notify(t) {
      var e = t ? "res" : "rej";
      var i = this._promises || [];

      for (var _t = 0; _t < i.length; _t++) {
        i[_t][e]();
      }
    }
  }]);

  return Animation;
}();

exports.Animation = Animation;

var Animations = /*#__PURE__*/function () {
  function Animations(t, e) {
    _classCallCheck(this, Animations);

    this._chart = t, this._properties = new Map(), this.configure(e);
  }

  _createClass(Animations, [{
    key: "configure",
    value: function configure(s) {
      if ((0, _helpersSegment.i)(s)) {
        var n = Object.keys(_helpersSegment.d.animation),
            r = this._properties;
        Object.getOwnPropertyNames(s).forEach(function (e) {
          var t = s[e];

          if ((0, _helpersSegment.i)(t)) {
            var i = {};

            var _iterator = _createForOfIteratorHelper(n),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var a = _step.value;
                i[a] = t[a];
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            ((0, _helpersSegment.b)(t.properties) && t.properties || [e]).forEach(function (t) {
              t !== e && r.has(t) || r.set(t, i);
            });
          }
        });
      }
    }
  }, {
    key: "_animateOptions",
    value: function _animateOptions(t, e) {
      var i = e.options;
      e = resolveTargetOptions(t, i);
      if (!e) return [];
      e = this._createAnimations(e, i);
      return i.$shared && awaitAll(t.options.$animations, i).then(function () {
        t.options = i;
      }, function () {}), e;
    }
  }, {
    key: "_createAnimations",
    value: function _createAnimations(e, i) {
      var a = this._properties,
          s = [],
          n = e.$animations || (e.$animations = {});
      var t = Object.keys(i),
          r = Date.now();
      var o;

      for (o = t.length - 1; 0 <= o; --o) {
        var d = t[o];
        if ("$" !== d.charAt(0)) if ("options" === d) s.push.apply(s, _toConsumableArray(this._animateOptions(e, i)));else {
          var l = i[d];
          var _t2 = n[d];
          var h = a.get(d);

          if (_t2) {
            if (h && _t2.active()) {
              _t2.update(h, l, r);

              continue;
            }

            _t2.cancel();
          }

          h && h.duration ? (n[d] = _t2 = new Animation(h, e, d, l), s.push(_t2)) : e[d] = l;
        }
      }

      return s;
    }
  }, {
    key: "update",
    value: function update(t, e) {
      {
        if (0 !== this._properties.size) return (t = this._createAnimations(t, e)).length ? (animator.add(this._chart, t), !0) : void 0;
        Object.assign(t, e);
      }
    }
  }]);

  return Animations;
}();

exports.Animations = Animations;

function awaitAll(e, t) {
  var i = [];
  var a = Object.keys(t);

  for (var _t3 = 0; _t3 < a.length; _t3++) {
    var s = e[a[_t3]];
    s && s.active() && i.push(s.wait());
  }

  return Promise.all(i);
}

function resolveTargetOptions(e, i) {
  if (i) {
    var t = e.options;
    if (t) return t.$shared && (e.options = t = Object.assign({}, t, {
      $shared: !1,
      $animations: {}
    })), t;
    e.options = i;
  }
}

function scaleClip(t, e) {
  var t = t && t.options || {},
      i = t.reverse,
      a = void 0 === t.min ? e : 0,
      t = void 0 === t.max ? e : 0;
  return {
    start: i ? t : a,
    end: i ? a : t
  };
}

function defaultClip(t, e, i) {
  if (!1 === i) return !1;
  t = scaleClip(t, i), e = scaleClip(e, i);
  return {
    top: e.end,
    right: t.end,
    bottom: e.start,
    left: t.start
  };
}

function toClip(t) {
  var e, i, a, s;
  return (0, _helpersSegment.i)(t) ? (e = t.top, i = t.right, a = t.bottom, s = t.left) : e = i = a = s = t, {
    top: e,
    right: i,
    bottom: a,
    left: s,
    disabled: !1 === t
  };
}

function getSortedDatasetIndices(t, e) {
  var i = [];

  var a = t._getSortedDatasetMetas(e);

  var s, n;

  for (s = 0, n = a.length; s < n; ++s) {
    i.push(a[s].index);
  }

  return i;
}

function _applyStack(t, e, i) {
  var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var s = t.keys,
      n = "single" === a.mode;
  var r, o, l, h;

  if (null !== e) {
    for (r = 0, o = s.length; r < o; ++r) {
      if ((l = +s[r]) === i) {
        if (a.all) continue;
        break;
      }

      h = t.values[l], (0, _helpersSegment.g)(h) && (n || 0 === e || (0, _helpersSegment.s)(e) === (0, _helpersSegment.s)(h)) && (e += h);
    }

    return e;
  }
}

function convertObjectDataToArray(t) {
  var e = Object.keys(t);
  var i = new Array(e.length);
  var a, s, n;

  for (a = 0, s = e.length; a < s; ++a) {
    n = e[a], i[a] = {
      x: n,
      y: t[n]
    };
  }

  return i;
}

function isStacked(t, e) {
  t = t && t.options.stacked;
  return t || void 0 === t && void 0 !== e.stack;
}

function getStackKey(t, e, i) {
  return "".concat(t.id, ".").concat(e.id, ".") + (i.stack || i.type);
}

function getUserBounds(t) {
  var _t$getUserBounds = t.getUserBounds(),
      t = _t$getUserBounds.min,
      e = _t$getUserBounds.max,
      i = _t$getUserBounds.minDefined,
      a = _t$getUserBounds.maxDefined;

  return {
    min: i ? t : Number.NEGATIVE_INFINITY,
    max: a ? e : Number.POSITIVE_INFINITY
  };
}

function getOrCreateStack(t, e, i) {
  var a = t[e] || (t[e] = {});
  return a[i] || (a[i] = {});
}

function getLastIndexInStack(t, e, i, a) {
  var _iterator2 = _createForOfIteratorHelper(e.getMatchingVisibleMetas(a).reverse()),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var n = _step2.value;
      var s = t[n.index];
      if (i && 0 < s || !i && s < 0) return n.index;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return null;
}

function updateStacks(t, e) {
  var _t4 = t,
      i = _t4.chart,
      a = _t4._cachedMeta;
  var s = i._stacks || (i._stacks = {}),
      t = a.iScale,
      n = a.vScale,
      r = a.index,
      o = t.axis,
      l = n.axis,
      h = getStackKey(t, n, a),
      d = e.length;
  var c;

  for (var _t5 = 0; _t5 < d; ++_t5) {
    var p = e[_t5];
    var u = p[o],
        g = p[l];
    var f = p._stacks || (p._stacks = {}),
        m = ((c = f[l] = getOrCreateStack(s, h, u))[r] = g, c._top = getLastIndexInStack(c, n, !0, a.type), c._bottom = getLastIndexInStack(c, n, !1, a.type), c._visualValues || (c._visualValues = {}));
    m[r] = g;
  }
}

function getFirstScaleId(t, e) {
  var i = t.scales;
  return Object.keys(i).filter(function (t) {
    return i[t].axis === e;
  }).shift();
}

function createDatasetContext(t, e) {
  return (0, _helpersSegment.j)(t, {
    active: !1,
    dataset: void 0,
    datasetIndex: e,
    index: e,
    mode: "default",
    type: "dataset"
  });
}

function createDataContext(t, e, i) {
  return (0, _helpersSegment.j)(t, {
    active: !1,
    dataIndex: e,
    parsed: void 0,
    raw: void 0,
    element: i,
    index: e,
    mode: "default",
    type: "data"
  });
}

function clearStacks(t, e) {
  var i = t.controller.index,
      a = t.vScale && t.vScale.axis;

  if (a) {
    var _iterator3 = _createForOfIteratorHelper(e = e || t._parsed),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var s = _step3.value;
        var n = s._stacks;
        if (!n || void 0 === n[a] || void 0 === n[a][i]) return;
        delete n[a][i], void 0 !== n[a]._visualValues && void 0 !== n[a]._visualValues[i] && delete n[a]._visualValues[i];
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
}

var isDirectUpdateMode = function isDirectUpdateMode(t) {
  return "reset" === t || "none" === t;
},
    cloneIfNotShared = function cloneIfNotShared(t, e) {
  return e ? t : Object.assign({}, t);
},
    createStack = function createStack(t, e, i) {
  return t && !e.hidden && e._stacked && {
    keys: getSortedDatasetIndices(i, !0),
    values: null
  };
};

var DatasetController = /*#__PURE__*/function () {
  function DatasetController(t, e) {
    _classCallCheck(this, DatasetController);

    this.chart = t, this._ctx = t.ctx, this.index = e, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = void 0, this._parsing = !1, this._data = void 0, this._objectData = void 0, this._sharedOptions = void 0, this._drawStart = void 0, this._drawCount = void 0, this.enableOptionSharing = !1, this.supportsDecimation = !1, this.$context = void 0, this._syncList = [], this.datasetElementType = (this instanceof DatasetController ? this.constructor : void 0).datasetElementType, this.dataElementType = (this instanceof DatasetController ? this.constructor : void 0).dataElementType, this.initialize();
  }

  _createClass(DatasetController, [{
    key: "initialize",
    value: function initialize() {
      var t = this._cachedMeta;
      this.configure(), this.linkScales(), t._stacked = isStacked(t.vScale, t), this.addElements(), this.options.fill && !this.chart.isPluginEnabled("filler") && console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
  }, {
    key: "updateIndex",
    value: function updateIndex(t) {
      this.index !== t && clearStacks(this._cachedMeta), this.index = t;
    }
  }, {
    key: "linkScales",
    value: function linkScales() {
      var t = this.chart;
      var e = this._cachedMeta;

      var i = this.getDataset(),
          a = function a(t, e, i, _a) {
        return "x" === t ? e : "r" === t ? _a : i;
      },
          s = e.xAxisID = (0, _helpersSegment.v)(i.xAxisID, getFirstScaleId(t, "x")),
          n = e.yAxisID = (0, _helpersSegment.v)(i.yAxisID, getFirstScaleId(t, "y")),
          i = e.rAxisID = (0, _helpersSegment.v)(i.rAxisID, getFirstScaleId(t, "r")),
          t = e.indexAxis,
          r = e.iAxisID = a(t, s, n, i),
          a = e.vAxisID = a(t, n, s, i);

      e.xScale = this.getScaleForId(s), e.yScale = this.getScaleForId(n), e.rScale = this.getScaleForId(i), e.iScale = this.getScaleForId(r), e.vScale = this.getScaleForId(a);
    }
  }, {
    key: "getDataset",
    value: function getDataset() {
      return this.chart.data.datasets[this.index];
    }
  }, {
    key: "getMeta",
    value: function getMeta() {
      return this.chart.getDatasetMeta(this.index);
    }
  }, {
    key: "getScaleForId",
    value: function getScaleForId(t) {
      return this.chart.scales[t];
    }
  }, {
    key: "_getOtherScale",
    value: function _getOtherScale(t) {
      var e = this._cachedMeta;
      return t === e.iScale ? e.vScale : e.iScale;
    }
  }, {
    key: "reset",
    value: function reset() {
      this._update("reset");
    }
  }, {
    key: "_destroy",
    value: function _destroy() {
      var t = this._cachedMeta;
      this._data && (0, _helpersSegment.u)(this._data, this), t._stacked && clearStacks(t);
    }
  }, {
    key: "_dataCheck",
    value: function _dataCheck() {
      var t = this.getDataset();
      var e = t.data || (t.data = []),
          i = this._data;
      if ((0, _helpersSegment.i)(e)) this._data = convertObjectDataToArray(e);else if (i !== e) {
        if (i) {
          (0, _helpersSegment.u)(i, this);
          var a = this._cachedMeta;
          clearStacks(a), a._parsed = [];
        }

        e && Object.isExtensible(e) && (0, _helpersSegment.l)(e, this), this._syncList = [], this._data = e;
      }
    }
  }, {
    key: "addElements",
    value: function addElements() {
      var t = this._cachedMeta;
      this._dataCheck(), this.datasetElementType && (t.dataset = new this.datasetElementType());
    }
  }, {
    key: "buildOrUpdateElements",
    value: function buildOrUpdateElements(t) {
      var e = this._cachedMeta;
      var i = this.getDataset();
      var a = !1;

      this._dataCheck();

      var s = e._stacked;
      e._stacked = isStacked(e.vScale, e), e.stack !== i.stack && (a = !0, clearStacks(e), e.stack = i.stack), this._resyncElements(t), !a && s === e._stacked || updateStacks(this, e._parsed);
    }
  }, {
    key: "configure",
    value: function configure() {
      var t = this.chart.config;
      var e = t.datasetScopeKeys(this._type),
          e = t.getOptionScopes(this.getDataset(), e, !0);
      this.options = t.createResolver(e, this.getContext()), this._parsing = this.options.parsing, this._cachedDataOpts = {};
    }
  }, {
    key: "parse",
    value: function parse(t, e) {
      var i = this._cachedMeta,
          a = this._data;
      var s = i.iScale,
          n = i._stacked;
      var r = s.axis;
      var o = 0 === t && e === a.length || i._sorted,
          l = 0 < t && i._parsed[t - 1],
          h,
          d,
          c;
      if (!1 === this._parsing) i._parsed = a, i._sorted = !0, c = a;else {
        c = (0, _helpersSegment.b)(a[t]) ? this.parseArrayData(i, a, t, e) : (0, _helpersSegment.i)(a[t]) ? this.parseObjectData(i, a, t, e) : this.parsePrimitiveData(i, a, t, e);

        for (h = 0; h < e; ++h) {
          i._parsed[h + t] = d = c[h], o && ((null === d[r] || l && d[r] < l[r]) && (o = !1), l = d);
        }

        i._sorted = o;
      }
      n && updateStacks(this, c);
    }
  }, {
    key: "parsePrimitiveData",
    value: function parsePrimitiveData(t, e, i, a) {
      var s = t.iScale,
          n = t.vScale;
      var r = s.axis,
          o = n.axis,
          l = s.getLabels(),
          h = s === n;
      var d = new Array(a);
      var c, u, g;

      for (c = 0, u = a; c < u; ++c) {
        var _d$c;

        g = c + i, d[c] = (_d$c = {}, _defineProperty(_d$c, r, h || s.parse(l[g], g)), _defineProperty(_d$c, o, n.parse(e[g], g)), _d$c);
      }

      return d;
    }
  }, {
    key: "parseArrayData",
    value: function parseArrayData(t, e, i, a) {
      var s = t.xScale,
          n = t.yScale,
          r = new Array(a);
      var o, l, h, d;

      for (o = 0, l = a; o < l; ++o) {
        d = e[h = o + i], r[o] = {
          x: s.parse(d[0], h),
          y: n.parse(d[1], h)
        };
      }

      return r;
    }
  }, {
    key: "parseObjectData",
    value: function parseObjectData(t, e, i, a) {
      var s = t.xScale,
          n = t.yScale;
      var _this$_parsing = this._parsing,
          _this$_parsing$xAxisK = _this$_parsing.xAxisKey,
          r = _this$_parsing$xAxisK === void 0 ? "x" : _this$_parsing$xAxisK,
          _this$_parsing$yAxisK = _this$_parsing.yAxisKey,
          o = _this$_parsing$yAxisK === void 0 ? "y" : _this$_parsing$yAxisK;
      var l = new Array(a);
      var h, d, c, u;

      for (h = 0, d = a; h < d; ++h) {
        u = e[c = h + i], l[h] = {
          x: s.parse((0, _helpersSegment.f)(u, r), c),
          y: n.parse((0, _helpersSegment.f)(u, o), c)
        };
      }

      return l;
    }
  }, {
    key: "getParsed",
    value: function getParsed(t) {
      return this._cachedMeta._parsed[t];
    }
  }, {
    key: "getDataElement",
    value: function getDataElement(t) {
      return this._cachedMeta.data[t];
    }
  }, {
    key: "applyStack",
    value: function applyStack(t, e, i) {
      var a = this.chart,
          s = this._cachedMeta,
          n = e[t.axis];
      return _applyStack({
        keys: getSortedDatasetIndices(a, !0),
        values: e._stacks[t.axis]._visualValues
      }, n, s.index, {
        mode: i
      });
    }
  }, {
    key: "updateRangeFromParsed",
    value: function updateRangeFromParsed(t, e, i, a) {
      var s = i[e.axis];
      var n = null === s ? NaN : s;
      i = a && i._stacks[e.axis];
      a && i && (a.values = i, n = _applyStack(a, s, this._cachedMeta.index)), t.min = Math.min(t.min, n), t.max = Math.max(t.max, n);
    }
  }, {
    key: "getMinMax",
    value: function getMinMax(e, t) {
      var i = this._cachedMeta;
      var a = i._parsed;
      var s = i._sorted && e === i.iScale,
          n = a.length;

      var r = this._getOtherScale(e);

      var o = createStack(t, i, this.chart),
          l = {
        min: Number.POSITIVE_INFINITY,
        max: Number.NEGATIVE_INFINITY
      };

      var _getUserBounds = getUserBounds(r),
          h = _getUserBounds.min,
          d = _getUserBounds.max;

      var c, u;

      function g() {
        var t = (u = a[c])[r.axis];
        return !(0, _helpersSegment.g)(u[e.axis]) || h > t || d < t;
      }

      for (c = 0; c < n && (g() || (this.updateRangeFromParsed(l, e, u, o), !s)); ++c) {
        ;
      }

      if (s) for (c = n - 1; 0 <= c; --c) {
        if (!g()) {
          this.updateRangeFromParsed(l, e, u, o);
          break;
        }
      }
      return l;
    }
  }, {
    key: "getAllParsedValues",
    value: function getAllParsedValues(t) {
      var e = this._cachedMeta._parsed;
      var i = [];
      var a, s, n;

      for (a = 0, s = e.length; a < s; ++a) {
        n = e[a][t.axis], (0, _helpersSegment.g)(n) && i.push(n);
      }

      return i;
    }
  }, {
    key: "getMaxOverflow",
    value: function getMaxOverflow() {
      return !1;
    }
  }, {
    key: "getLabelAndValue",
    value: function getLabelAndValue(t) {
      var e = this._cachedMeta;
      var i = e.iScale,
          a = e.vScale;
      e = this.getParsed(t);
      return {
        label: i ? "" + i.getLabelForValue(e[i.axis]) : "",
        value: a ? "" + a.getLabelForValue(e[a.axis]) : ""
      };
    }
  }, {
    key: "_update",
    value: function _update(t) {
      var e = this._cachedMeta;
      this.update(t || "default"), e._clip = toClip((0, _helpersSegment.v)(this.options.clip, defaultClip(e.xScale, e.yScale, this.getMaxOverflow())));
    }
  }, {
    key: "update",
    value: function update(t) {}
  }, {
    key: "draw",
    value: function draw() {
      var t = this._ctx,
          e = this.chart;
      var i = this._cachedMeta;
      var a = i.data || [],
          s = e.chartArea;
      var n = [];
      var r = this._drawStart || 0,
          o = this._drawCount || a.length - r,
          l = this.options.drawActiveElementsOnTop;
      var h;

      for (i.dataset && i.dataset.draw(t, s, r, o), h = r; h < r + o; ++h) {
        var d = a[h];
        d.hidden || (d.active && l ? n.push(d) : d.draw(t, s));
      }

      for (h = 0; h < n.length; ++h) {
        n[h].draw(t, s);
      }
    }
  }, {
    key: "getStyle",
    value: function getStyle(t, e) {
      e = e ? "active" : "default";
      return void 0 === t && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(e) : this.resolveDataElementOptions(t || 0, e);
    }
  }, {
    key: "getContext",
    value: function getContext(t, e, i) {
      var a = this.getDataset();
      var s;

      if (0 <= t && t < this._cachedMeta.data.length) {
        var n = this._cachedMeta.data[t];
        (s = n.$context || (n.$context = createDataContext(this.getContext(), t, n))).parsed = this.getParsed(t), s.raw = a.data[t], s.index = s.dataIndex = t;
      } else (s = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index))).dataset = a, s.index = s.datasetIndex = this.index;

      return s.active = !!e, s.mode = i, s;
    }
  }, {
    key: "resolveDatasetElementOptions",
    value: function resolveDatasetElementOptions(t) {
      return this._resolveElementOptions(this.datasetElementType.id, t);
    }
  }, {
    key: "resolveDataElementOptions",
    value: function resolveDataElementOptions(t, e) {
      return this._resolveElementOptions(this.dataElementType.id, e, t);
    }
  }, {
    key: "_resolveElementOptions",
    value: function _resolveElementOptions(t) {
      var _this3 = this;

      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "default";
      var i = arguments.length > 2 ? arguments[2] : undefined;
      return function (t) {
        var a = "active" === e,
            s = _this3._cachedDataOpts;
        var n = t + "-" + e,
            r = s[n],
            o = _this3.enableOptionSharing && (0, _helpersSegment.h)(i);
        if (r) return cloneIfNotShared(r, o);
        var l = _this3.chart.config;
        var r = l.datasetElementScopeKeys(_this3._type, t),
            h = a ? [t + "Hover", "hover", t, ""] : [t, ""],
            r = l.getOptionScopes(_this3.getDataset(), r),
            t = Object.keys(_helpersSegment.d.elements[t]);
        var d = l.resolveNamedOptions(r, t, function () {
          return _this3.getContext(i, a, e);
        }, h);
        return d.$shared && (d.$shared = o, s[n] = Object.freeze(cloneIfNotShared(d, o))), d;
      }(t);
    }
  }, {
    key: "_resolveAnimations",
    value: function _resolveAnimations(t, e, i) {
      var a = this.chart;
      var s = this._cachedDataOpts;
      var n = "animation-" + e,
          r = s[n];
      if (r) return r;
      var o;

      if (!1 !== a.options.animation) {
        var l = this.chart.config;
        r = l.datasetAnimationScopeKeys(this._type, e), r = l.getOptionScopes(this.getDataset(), r);
        o = l.createResolver(r, this.getContext(t, i, e));
      }

      r = new Animations(a, o && o.animations);
      return o && o._cacheable && (s[n] = Object.freeze(r)), r;
    }
  }, {
    key: "getSharedOptions",
    value: function getSharedOptions(t) {
      if (t.$shared) return this._sharedOptions || (this._sharedOptions = Object.assign({}, t));
    }
  }, {
    key: "includeOptions",
    value: function includeOptions(t, e) {
      return !e || isDirectUpdateMode(t) || this.chart._animationsDisabled;
    }
  }, {
    key: "_getSharedOptions",
    value: function _getSharedOptions(t, e) {
      var t = this.resolveDataElementOptions(t, e),
          i = this._sharedOptions,
          a = this.getSharedOptions(t),
          i = this.includeOptions(e, a) || a !== i;
      return this.updateSharedOptions(a, e, t), {
        sharedOptions: a,
        includeOptions: i
      };
    }
  }, {
    key: "updateElement",
    value: function updateElement(t, e, i, a) {
      isDirectUpdateMode(a) ? Object.assign(t, i) : this._resolveAnimations(e, a).update(t, i);
    }
  }, {
    key: "updateSharedOptions",
    value: function updateSharedOptions(t, e, i) {
      t && !isDirectUpdateMode(e) && this._resolveAnimations(void 0, e).update(t, i);
    }
  }, {
    key: "_setStyle",
    value: function _setStyle(t, e, i, a) {
      t.active = a;
      var s = this.getStyle(e, a);

      this._resolveAnimations(e, i, a).update(t, {
        options: !a && this.getSharedOptions(s) || s
      });
    }
  }, {
    key: "removeHoverStyle",
    value: function removeHoverStyle(t, e, i) {
      this._setStyle(t, i, "active", !1);
    }
  }, {
    key: "setHoverStyle",
    value: function setHoverStyle(t, e, i) {
      this._setStyle(t, i, "active", !0);
    }
  }, {
    key: "_removeDatasetHoverStyle",
    value: function _removeDatasetHoverStyle() {
      var t = this._cachedMeta.dataset;
      t && this._setStyle(t, void 0, "active", !1);
    }
  }, {
    key: "_setDatasetHoverStyle",
    value: function _setDatasetHoverStyle() {
      var t = this._cachedMeta.dataset;
      t && this._setStyle(t, void 0, "active", !0);
    }
  }, {
    key: "_resyncElements",
    value: function _resyncElements(t) {
      var e,
          i,
          a,
          s = this._data,
          n = this._cachedMeta.data;

      var _iterator4 = _createForOfIteratorHelper(this._syncList),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _step4$value = _slicedToArray(_step4.value, 3);

          e = _step4$value[0];
          i = _step4$value[1];
          a = _step4$value[2];
          this[e](i, a);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      this._syncList = [];
      var n = n.length,
          s = s.length,
          r = Math.min(s, n);
      r && this.parse(0, r), n < s ? this._insertElements(n, s - n, t) : s < n && this._removeElements(s, n - s);
    }
  }, {
    key: "_insertElements",
    value: function _insertElements(t, e) {
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;
      var a = this._cachedMeta;
      var s = a.data,
          n = t + e;
      var r;

      var o = function o(t) {
        for (t.length += e, r = t.length - 1; r >= n; r--) {
          t[r] = t[r - e];
        }
      };

      for (o(s), r = t; r < n; ++r) {
        s[r] = new this.dataElementType();
      }

      this._parsing && o(a._parsed), this.parse(t, e), i && this.updateElements(s, t, e, "reset");
    }
  }, {
    key: "updateElements",
    value: function updateElements(t, e, i, a) {}
  }, {
    key: "_removeElements",
    value: function _removeElements(t, e) {
      var i = this._cachedMeta;
      var a;
      this._parsing && (a = i._parsed.splice(t, e), i._stacked && clearStacks(i, a)), i.data.splice(t, e);
    }
  }, {
    key: "_sync",
    value: function _sync(t) {
      var _t6, _t7;

      var e, i, a;
      this._parsing ? this._syncList.push(t) : ((_t6 = t, _t7 = _slicedToArray(_t6, 3), e = _t7[0], i = _t7[1], a = _t7[2], _t6), this[e](i, a)), this.chart._dataChanges.push([this.index].concat(_toConsumableArray(t)));
    }
  }, {
    key: "_onDataPush",
    value: function _onDataPush() {
      var t = arguments.length;

      this._sync(["_insertElements", this.getDataset().data.length - t, t]);
    }
  }, {
    key: "_onDataPop",
    value: function _onDataPop() {
      this._sync(["_removeElements", this._cachedMeta.data.length - 1, 1]);
    }
  }, {
    key: "_onDataShift",
    value: function _onDataShift() {
      this._sync(["_removeElements", 0, 1]);
    }
  }, {
    key: "_onDataSplice",
    value: function _onDataSplice(t, e) {
      e && this._sync(["_removeElements", t, e]);
      var i = arguments.length - 2;
      i && this._sync(["_insertElements", t, i]);
    }
  }, {
    key: "_onDataUnshift",
    value: function _onDataUnshift() {
      this._sync(["_insertElements", 0, arguments.length]);
    }
  }]);

  return DatasetController;
}();

exports.DatasetController = DatasetController;

_defineProperty(DatasetController, "defaults", {});

_defineProperty(DatasetController, "datasetElementType", null);

_defineProperty(DatasetController, "dataElementType", null);

function getAllScaleValues(a, t) {
  if (!a._cache.$bar) {
    var s = a.getMatchingVisibleMetas(t);
    var i = [];

    for (var _t8 = 0, e = s.length; _t8 < e; _t8++) {
      i = i.concat(s[_t8].controller.getAllParsedValues(a));
    }

    a._cache.$bar = (0, _helpersSegment._)(i.sort(function (t, e) {
      return t - e;
    }));
  }

  return a._cache.$bar;
}

function computeMinSampleSize(t) {
  var e = t.iScale;
  var i = getAllScaleValues(e, t.type);
  var a = e._length,
      s,
      n,
      r,
      o;

  var l = function l() {
    32767 !== r && -32768 !== r && ((0, _helpersSegment.h)(o) && (a = Math.min(a, Math.abs(r - o) || a)), o = r);
  };

  for (s = 0, n = i.length; s < n; ++s) {
    r = e.getPixelForValue(i[s]), l();
  }

  for (o = void 0, s = 0, n = e.ticks.length; s < n; ++s) {
    r = e.getPixelForTick(s), l();
  }

  return a;
}

function computeFitCategoryTraits(t, e, i, a) {
  var s = i.barThickness;
  var n, r;
  return r = (0, _helpersSegment.k)(s) ? (n = e.min * i.categoryPercentage, i.barPercentage) : (n = s * a, 1), {
    chunk: n / a,
    ratio: r,
    start: e.pixels[t] - n / 2
  };
}

function computeFlexCategoryTraits(t, e, i, a) {
  var s = e.pixels,
      n = s[t];
  var r = 0 < t ? s[t - 1] : null,
      o = t < s.length - 1 ? s[t + 1] : null;
  s = i.categoryPercentage, null === r && (r = n - (null === o ? e.end - e.start : o - n)), null === o && (o = n + n - r), t = n - (n - Math.min(r, o)) / 2 * s;
  return {
    chunk: Math.abs(o - r) / 2 * s / a,
    ratio: i.barPercentage,
    start: t
  };
}

function parseFloatBar(t, e, i, a) {
  var s = i.parse(t[0], a),
      t = i.parse(t[1], a),
      a = Math.min(s, t),
      n = Math.max(s, t);
  var r = a,
      o = n;
  Math.abs(a) > Math.abs(n) && (r = n, o = a), e[i.axis] = o, e._custom = {
    barStart: r,
    barEnd: o,
    start: s,
    end: t,
    min: a,
    max: n
  };
}

function parseValue(t, e, i, a) {
  return (0, _helpersSegment.b)(t) ? parseFloatBar(t, e, i, a) : e[i.axis] = i.parse(t, a), e;
}

function parseArrayOrPrimitive(t, e, i, a) {
  var s = t.iScale;
  var n = t.vScale,
      r = s.getLabels(),
      o = s === n;
  var l = [];
  var h, d, c, u;

  for (d = (h = i) + a; h < d; ++h) {
    u = e[h], (c = {})[s.axis] = o || s.parse(r[h], h), l.push(parseValue(u, c, n, h));
  }

  return l;
}

function isFloatBar(t) {
  return t && void 0 !== t.barStart && void 0 !== t.barEnd;
}

function barSign(t, e, i) {
  return 0 !== t ? (0, _helpersSegment.s)(t) : (e.isHorizontal() ? 1 : -1) * (e.min >= i ? 1 : -1);
}

function borderProps(t) {
  var e, i, a, s, n;
  return a = t.horizontal ? (e = t.base > t.x, i = "left", "right") : (e = t.base < t.y, i = "bottom", "top"), n = e ? (s = "end", "start") : (s = "start", "end"), {
    start: i,
    end: a,
    reverse: e,
    top: s,
    bottom: n
  };
}

function setBorderSkipped(t, e, i, a) {
  var _borderProps;

  var s = e.borderSkipped;
  var n = {};
  var r, o, l, h;
  s ? !0 === s ? t.borderSkipped = {
    top: !0,
    right: !0,
    bottom: !0,
    left: !0
  } : ((_borderProps = borderProps(t), e = _borderProps.start, r = _borderProps.end, o = _borderProps.reverse, l = _borderProps.top, h = _borderProps.bottom, _borderProps), "middle" === s && i && (t.enableBorderRadius = !0, s = (i._top || 0) === a ? l : (i._bottom || 0) === a ? h : (n[parseEdge(h, e, r, o)] = !0, l)), n[parseEdge(s, e, r, o)] = !0, t.borderSkipped = n) : t.borderSkipped = n;
}

function parseEdge(t, e, i, a) {
  return t = a ? startEnd(t = swap(t, e, i), i, e) : startEnd(t, e, i);
}

function swap(t, e, i) {
  return t === e ? i : t === i ? e : t;
}

function startEnd(t, e, i) {
  return "start" === t ? e : "end" === t ? i : t;
}

function setInflateAmount(t, _ref, i) {
  var e = _ref.inflateAmount;
  t.inflateAmount = "auto" === e ? 1 === i ? .33 : 0 : e;
}

var BarController = /*#__PURE__*/function (_DatasetController) {
  _inherits(BarController, _DatasetController);

  var _super = _createSuper(BarController);

  function BarController() {
    _classCallCheck(this, BarController);

    return _super.apply(this, arguments);
  }

  _createClass(BarController, [{
    key: "parsePrimitiveData",
    value: function parsePrimitiveData(t, e, i, a) {
      return parseArrayOrPrimitive(t, e, i, a);
    }
  }, {
    key: "parseArrayData",
    value: function parseArrayData(t, e, i, a) {
      return parseArrayOrPrimitive(t, e, i, a);
    }
  }, {
    key: "parseObjectData",
    value: function parseObjectData(t, e, i, a) {
      var _t9 = t,
          s = _t9.iScale,
          n = _t9.vScale;
      var _this$_parsing2 = this._parsing,
          _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,
          t = _this$_parsing2$xAxis === void 0 ? "x" : _this$_parsing2$xAxis,
          _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,
          r = _this$_parsing2$yAxis === void 0 ? "y" : _this$_parsing2$yAxis,
          o = "x" === s.axis ? t : r,
          l = "x" === n.axis ? t : r;
      var h = [];
      var d, c, u, g;

      for (c = (d = i) + a; d < c; ++d) {
        g = e[d], (u = {})[s.axis] = s.parse((0, _helpersSegment.f)(g, o), d), h.push(parseValue((0, _helpersSegment.f)(g, l), u, n, d));
      }

      return h;
    }
  }, {
    key: "updateRangeFromParsed",
    value: function updateRangeFromParsed(t, e, i, a) {
      _get(_getPrototypeOf(BarController.prototype), "updateRangeFromParsed", this).call(this, t, e, i, a);

      a = i._custom;
      a && e === this._cachedMeta.vScale && (t.min = Math.min(t.min, a.min), t.max = Math.max(t.max, a.max));
    }
  }, {
    key: "getMaxOverflow",
    value: function getMaxOverflow() {
      return 0;
    }
  }, {
    key: "getLabelAndValue",
    value: function getLabelAndValue(t) {
      var _this$_cachedMeta = this._cachedMeta,
          e = _this$_cachedMeta.iScale,
          i = _this$_cachedMeta.vScale;
      var t = this.getParsed(t),
          a = t._custom,
          a = isFloatBar(a) ? "[" + a.start + ", " + a.end + "]" : "" + i.getLabelForValue(t[i.axis]);
      return {
        label: "" + e.getLabelForValue(t[e.axis]),
        value: a
      };
    }
  }, {
    key: "initialize",
    value: function initialize() {
      this.enableOptionSharing = !0, _get(_getPrototypeOf(BarController.prototype), "initialize", this).call(this);
      var t = this._cachedMeta;
      t.stack = this.getDataset().stack;
    }
  }, {
    key: "update",
    value: function update(t) {
      var e = this._cachedMeta;
      this.updateElements(e.data, 0, e.data.length, t);
    }
  }, {
    key: "updateElements",
    value: function updateElements(e, i, a, s) {
      var n = "reset" === s;
      var r = this.index,
          o = this._cachedMeta.vScale;

      var l = o.getBasePixel(),
          h = o.isHorizontal(),
          d = this._getRuler(),
          _this$_getSharedOptio = this._getSharedOptions(i, s),
          c = _this$_getSharedOptio.sharedOptions,
          u = _this$_getSharedOptio.includeOptions;

      for (var t = i; t < i + a; t++) {
        var g = this.getParsed(t),
            p = n || (0, _helpersSegment.k)(g[o.axis]) ? {
          base: l,
          head: l
        } : this._calculateBarValuePixels(t),
            f = this._calculateBarIndexPixels(t, d),
            m = (g._stacks || {})[o.axis];

        var v = {
          horizontal: h,
          base: p.base,
          enableBorderRadius: !m || isFloatBar(g._custom) || r === m._top || r === m._bottom,
          x: h ? p.head : f.center,
          y: h ? f.center : p.head,
          height: h ? f.size : Math.abs(p.size),
          width: h ? Math.abs(p.size) : f.size
        };
        u && (v.options = c || this.resolveDataElementOptions(t, e[t].active ? "active" : s));
        g = v.options || e[t].options;
        setBorderSkipped(v, g, m, r), setInflateAmount(v, g, d.ratio), this.updateElement(e[t], t, v, s);
      }
    }
  }, {
    key: "_getStacks",
    value: function _getStacks(t, i) {
      var e = this._cachedMeta["iScale"];
      var a = e.getMatchingVisibleMetas(this._type).filter(function (t) {
        return t.controller.options.grouped;
      }),
          s = e.options.stacked;
      var n = [];

      var _iterator5 = _createForOfIteratorHelper(a),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var r = _step5.value;
          if ((void 0 === i || !function (t) {
            var e = t.controller.getParsed(i),
                e = e && e[t.vScale.axis];
            if ((0, _helpersSegment.k)(e) || isNaN(e)) return !0;
          }(r)) && ((!1 === s || -1 === n.indexOf(r.stack) || void 0 === s && void 0 === r.stack) && n.push(r.stack), r.index === t)) break;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return n.length || n.push(void 0), n;
    }
  }, {
    key: "_getStackCount",
    value: function _getStackCount(t) {
      return this._getStacks(void 0, t).length;
    }
  }, {
    key: "_getStackIndex",
    value: function _getStackIndex(t, e, i) {
      var a = this._getStacks(t, i);

      t = void 0 !== e ? a.indexOf(e) : -1;
      return -1 === t ? a.length - 1 : t;
    }
  }, {
    key: "_getRuler",
    value: function _getRuler() {
      var t = this.options,
          e = this._cachedMeta;
      var i = e.iScale,
          a = [];
      var s, n;

      for (s = 0, n = e.data.length; s < n; ++s) {
        a.push(i.getPixelForValue(this.getParsed(s)[i.axis], s));
      }

      var r = t.barThickness;
      return {
        min: r || computeMinSampleSize(e),
        pixels: a,
        start: i._startPixel,
        end: i._endPixel,
        stackCount: this._getStackCount(),
        scale: i,
        grouped: t.grouped,
        ratio: r ? 1 : t.categoryPercentage * t.barPercentage
      };
    }
  }, {
    key: "_calculateBarValuePixels",
    value: function _calculateBarValuePixels(t) {
      var _this$_cachedMeta2 = this._cachedMeta,
          e = _this$_cachedMeta2.vScale,
          i = _this$_cachedMeta2._stacked,
          a = _this$_cachedMeta2.index,
          _this$options = this.options,
          s = _this$options.base,
          n = _this$options.minBarLength;
      var r = s || 0;
      var o = this.getParsed(t);
      var l = o._custom,
          h = isFloatBar(l);
      var d = o[e.axis],
          c = 0,
          u = i ? this.applyStack(e, o, i) : d,
          g,
          p;
      u !== d && (c = u - d, u = d), h && (d = l.barStart, u = l.barEnd - l.barStart, 0 !== d && (0, _helpersSegment.s)(d) !== (0, _helpersSegment.s)(l.barEnd) && (c = 0), c += d);
      var f,
          l = (0, _helpersSegment.k)(s) || h ? c : s;
      var m = e.getPixelForValue(l);
      return g = this.chart.getDataVisibility(t) ? e.getPixelForValue(c + u) : m, p = g - m, Math.abs(p) < n && (p = barSign(p, e, r) * n, d === r && (m -= p / 2), l = e.getPixelForDecimal(0), t = e.getPixelForDecimal(1), f = Math.min(l, t), l = Math.max(l, t), m = Math.max(Math.min(m, l), f), g = m + p, i && !h && (o._stacks[e.axis]._visualValues[a] = e.getValueForPixel(g) - e.getValueForPixel(m))), m === e.getPixelForValue(r) && (t = (0, _helpersSegment.s)(p) * e.getLineWidthForValue(r) / 2, m += t, p -= t), {
        size: p,
        base: m,
        head: g,
        center: g + p / 2
      };
    }
  }, {
    key: "_calculateBarIndexPixels",
    value: function _calculateBarIndexPixels(t, e) {
      var i = e.scale;
      var a,
          s = this.options,
          n = s.skipNull,
          r = (0, _helpersSegment.v)(s.maxBarThickness, 1 / 0);
      var o, l;
      return l = e.grouped ? (a = n ? this._getStackCount(t) : e.stackCount, s = ("flex" === s.barThickness ? computeFlexCategoryTraits : computeFitCategoryTraits)(t, e, s, a), a = this._getStackIndex(this.index, this._cachedMeta.stack, n ? t : void 0), o = s.start + s.chunk * a + s.chunk / 2, Math.min(r, s.chunk * s.ratio)) : (o = i.getPixelForValue(this.getParsed(t)[i.axis], t), Math.min(r, e.min * e.ratio)), {
        base: o - l / 2,
        head: o + l / 2,
        center: o,
        size: l
      };
    }
  }, {
    key: "draw",
    value: function draw() {
      var t = this._cachedMeta,
          e = t.vScale;
      var i = t.data;
      var a = i.length;
      var s = 0;

      for (; s < a; ++s) {
        null !== this.getParsed(s)[e.axis] && i[s].draw(this._ctx);
      }
    }
  }]);

  return BarController;
}(DatasetController);

exports.BarController = BarController;

_defineProperty(BarController, "id", "bar");

_defineProperty(BarController, "defaults", {
  datasetElementType: !1,
  dataElementType: "bar",
  categoryPercentage: .8,
  barPercentage: .9,
  grouped: !0,
  animations: {
    numbers: {
      type: "number",
      properties: ["x", "y", "base", "width", "height"]
    }
  }
});

_defineProperty(BarController, "overrides", {
  scales: {
    _index_: {
      type: "category",
      offset: !0,
      grid: {
        offset: !0
      }
    },
    _value_: {
      type: "linear",
      beginAtZero: !0
    }
  }
});

var BubbleController = /*#__PURE__*/function (_DatasetController2) {
  _inherits(BubbleController, _DatasetController2);

  var _super2 = _createSuper(BubbleController);

  function BubbleController() {
    _classCallCheck(this, BubbleController);

    return _super2.apply(this, arguments);
  }

  _createClass(BubbleController, [{
    key: "initialize",
    value: function initialize() {
      this.enableOptionSharing = !0, _get(_getPrototypeOf(BubbleController.prototype), "initialize", this).call(this);
    }
  }, {
    key: "parsePrimitiveData",
    value: function parsePrimitiveData(t, e, i, a) {
      var s = _get(_getPrototypeOf(BubbleController.prototype), "parsePrimitiveData", this).call(this, t, e, i, a);

      for (var _t10 = 0; _t10 < s.length; _t10++) {
        s[_t10]._custom = this.resolveDataElementOptions(_t10 + i).radius;
      }

      return s;
    }
  }, {
    key: "parseArrayData",
    value: function parseArrayData(t, e, i, a) {
      var s = _get(_getPrototypeOf(BubbleController.prototype), "parseArrayData", this).call(this, t, e, i, a);

      for (var _t11 = 0; _t11 < s.length; _t11++) {
        var n = e[i + _t11];
        s[_t11]._custom = (0, _helpersSegment.v)(n[2], this.resolveDataElementOptions(_t11 + i).radius);
      }

      return s;
    }
  }, {
    key: "parseObjectData",
    value: function parseObjectData(t, e, i, a) {
      var s = _get(_getPrototypeOf(BubbleController.prototype), "parseObjectData", this).call(this, t, e, i, a);

      for (var _t12 = 0; _t12 < s.length; _t12++) {
        var n = e[i + _t12];
        s[_t12]._custom = (0, _helpersSegment.v)(n && n.r && +n.r, this.resolveDataElementOptions(_t12 + i).radius);
      }

      return s;
    }
  }, {
    key: "getMaxOverflow",
    value: function getMaxOverflow() {
      var e = this._cachedMeta.data;
      var i = 0;

      for (var t = e.length - 1; 0 <= t; --t) {
        i = Math.max(i, e[t].size(this.resolveDataElementOptions(t)) / 2);
      }

      return 0 < i && i;
    }
  }, {
    key: "getLabelAndValue",
    value: function getLabelAndValue(t) {
      var e = this._cachedMeta,
          i = this.chart.data.labels || [];
      var _e2 = e,
          a = _e2.xScale,
          s = _e2.yScale;
      var e = this.getParsed(t),
          n = a.getLabelForValue(e.x),
          r = s.getLabelForValue(e.y),
          e = e._custom;
      return {
        label: i[t] || "",
        value: "(" + n + ", " + r + (e ? ", " + e : "") + ")"
      };
    }
  }, {
    key: "update",
    value: function update(t) {
      var e = this._cachedMeta.data;
      this.updateElements(e, 0, e.length, t);
    }
  }, {
    key: "updateElements",
    value: function updateElements(e, i, a, s) {
      var n = "reset" === s;
      var _this$_cachedMeta3 = this._cachedMeta,
          r = _this$_cachedMeta3.iScale,
          o = _this$_cachedMeta3.vScale;

      var _this$_getSharedOptio2 = this._getSharedOptions(i, s),
          l = _this$_getSharedOptio2.sharedOptions,
          h = _this$_getSharedOptio2.includeOptions,
          d = r.axis,
          c = o.axis;

      for (var t = i; t < i + a; t++) {
        var u = e[t],
            g = !n && this.getParsed(t);
        var f = {};
        var p = f[d] = n ? r.getPixelForDecimal(.5) : r.getPixelForValue(g[d]),
            g = f[c] = n ? o.getBasePixel() : o.getPixelForValue(g[c]);
        f.skip = isNaN(p) || isNaN(g), h && (f.options = l || this.resolveDataElementOptions(t, u.active ? "active" : s), n && (f.options.radius = 0)), this.updateElement(u, t, f, s);
      }
    }
  }, {
    key: "resolveDataElementOptions",
    value: function resolveDataElementOptions(t, e) {
      var i = this.getParsed(t);

      var a = _get(_getPrototypeOf(BubbleController.prototype), "resolveDataElementOptions", this).call(this, t, e);

      t = (a = a.$shared ? Object.assign({}, a, {
        $shared: !1
      }) : a).radius;
      return "active" !== e && (a.radius = 0), a.radius += (0, _helpersSegment.v)(i && i._custom, t), a;
    }
  }]);

  return BubbleController;
}(DatasetController);

exports.BubbleController = BubbleController;

_defineProperty(BubbleController, "id", "bubble");

_defineProperty(BubbleController, "defaults", {
  datasetElementType: !1,
  dataElementType: "point",
  animations: {
    numbers: {
      type: "number",
      properties: ["x", "y", "borderWidth", "radius"]
    }
  }
});

_defineProperty(BubbleController, "overrides", {
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});

function getRatioAndOffset(t, e, a) {
  var i = 1,
      s = 1,
      n = 0,
      r = 0;

  if (e < _helpersSegment.T) {
    var u = t,
        g = u + e;

    var t = Math.cos(u),
        e = Math.sin(u),
        o = Math.cos(g),
        l = Math.sin(g),
        h = function h(t, e, i) {
      return (0, _helpersSegment.p)(t, u, g, !0) ? 1 : Math.max(e, e * a, i, i * a);
    },
        d = function d(t, e, i) {
      return (0, _helpersSegment.p)(t, u, g, !0) ? -1 : Math.min(e, e * a, i, i * a);
    },
        c = h(0, t, o),
        h = h(_helpersSegment.H, e, l),
        t = d(_helpersSegment.P, t, o),
        o = d(_helpersSegment.P + _helpersSegment.H, e, l);

    i = (c - t) / 2, s = (h - o) / 2, n = -(c + t) / 2, r = -(h + o) / 2;
  }

  return {
    ratioX: i,
    ratioY: s,
    offsetX: n,
    offsetY: r
  };
}

var DoughnutController = /*#__PURE__*/function (_DatasetController3) {
  _inherits(DoughnutController, _DatasetController3);

  var _super3 = _createSuper(DoughnutController);

  function DoughnutController(t, e) {
    var _this4;

    _classCallCheck(this, DoughnutController);

    _this4 = _super3.call(this, t, e), _this4.enableOptionSharing = !0, _this4.innerRadius = void 0, _this4.outerRadius = void 0, _this4.offsetX = void 0, _this4.offsetY = void 0;
    return _this4;
  }

  _createClass(DoughnutController, [{
    key: "linkScales",
    value: function linkScales() {}
  }, {
    key: "parse",
    value: function parse(a, s) {
      var n = this.getDataset().data,
          r = this._cachedMeta;
      if (!1 === this._parsing) r._parsed = n;else {
        var t = function t(_t13) {
          return +n[_t13];
        };

        if ((0, _helpersSegment.i)(n[a])) {
          var _this$_parsing$key = this._parsing.key,
              o = _this$_parsing$key === void 0 ? "value" : _this$_parsing$key;

          t = function t(_t14) {
            return +(0, _helpersSegment.f)(n[_t14], o);
          };
        }

        var e, i;

        for (i = (e = a) + s; e < i; ++e) {
          r._parsed[e] = t(e);
        }
      }
    }
  }, {
    key: "_getRotation",
    value: function _getRotation() {
      return (0, _helpersSegment.t)(this.options.rotation - 90);
    }
  }, {
    key: "_getCircumference",
    value: function _getCircumference() {
      return (0, _helpersSegment.t)(this.options.circumference);
    }
  }, {
    key: "_getRotationExtents",
    value: function _getRotationExtents() {
      var e = _helpersSegment.T,
          i = -_helpersSegment.T;

      for (var t = 0; t < this.chart.data.datasets.length; ++t) {
        if (this.chart.isDatasetVisible(t) && this.chart.getDatasetMeta(t).type === this._type) {
          var n = this.chart.getDatasetMeta(t).controller;

          var a = n._getRotation(),
              s = n._getCircumference();

          e = Math.min(e, a), i = Math.max(i, a + s);
        }
      }

      return {
        rotation: e,
        circumference: i - e
      };
    }
  }, {
    key: "update",
    value: function update(t) {
      var e = this.chart["chartArea"];
      var i = this._cachedMeta;

      var a = i.data,
          s = this.getMaxBorderWidth() + this.getMaxOffset(a) + this.options.spacing,
          n = Math.max((Math.min(e.width, e.height) - s) / 2, 0),
          n = Math.min((0, _helpersSegment.m)(this.options.cutout, n), 1),
          r = this._getRingWeight(this.index),
          _this$_getRotationExt = this._getRotationExtents(),
          o = _this$_getRotationExt.circumference,
          l = _this$_getRotationExt.rotation,
          _getRatioAndOffset = getRatioAndOffset(l, o, n),
          l = _getRatioAndOffset.ratioX,
          o = _getRatioAndOffset.ratioY,
          h = _getRatioAndOffset.offsetX,
          d = _getRatioAndOffset.offsetY,
          l = (e.width - s) / l,
          e = (e.height - s) / o,
          s = Math.max(Math.min(l, e) / 2, 0),
          o = (0, _helpersSegment.n)(this.options.radius, s),
          l = (o - Math.max(o * n, 0)) / this._getVisibleDatasetWeightTotal();

      this.offsetX = h * o, this.offsetY = d * o, i.total = this.calculateTotal(), this.outerRadius = o - l * this._getRingWeightOffset(this.index), this.innerRadius = Math.max(this.outerRadius - l * r, 0), this.updateElements(a, 0, a.length, t);
    }
  }, {
    key: "_circumference",
    value: function _circumference(t, e) {
      var i = this.options,
          a = this._cachedMeta,
          s = this._getCircumference();

      return e && i.animation.animateRotate || !this.chart.getDataVisibility(t) || null === a._parsed[t] || a.data[t].hidden ? 0 : this.calculateCircumference(a._parsed[t] * s / _helpersSegment.T);
    }
  }, {
    key: "updateElements",
    value: function updateElements(t, e, i, a) {
      var s = "reset" === a,
          n = this.chart,
          r = n.chartArea,
          n = n.options.animation,
          o = (r.left + r.right) / 2,
          l = (r.top + r.bottom) / 2,
          r = s && n.animateScale,
          h = r ? 0 : this.innerRadius,
          d = r ? 0 : this.outerRadius,
          _this$_getSharedOptio3 = this._getSharedOptions(e, a),
          c = _this$_getSharedOptio3.sharedOptions,
          u = _this$_getSharedOptio3.includeOptions;

      var g = this._getRotation(),
          p;

      for (p = 0; p < e; ++p) {
        g += this._circumference(p, s);
      }

      for (p = e; p < e + i; ++p) {
        var f = this._circumference(p, s),
            m = t[p];

        var v = {
          x: o + this.offsetX,
          y: l + this.offsetY,
          startAngle: g,
          endAngle: g + f,
          circumference: f,
          outerRadius: d,
          innerRadius: h
        };
        u && (v.options = c || this.resolveDataElementOptions(p, m.active ? "active" : a)), g += f, this.updateElement(m, p, v, a);
      }
    }
  }, {
    key: "calculateTotal",
    value: function calculateTotal() {
      var t = this._cachedMeta,
          e = t.data;
      var i = 0,
          a;

      for (a = 0; a < e.length; a++) {
        var s = t._parsed[a];
        null === s || isNaN(s) || !this.chart.getDataVisibility(a) || e[a].hidden || (i += Math.abs(s));
      }

      return i;
    }
  }, {
    key: "calculateCircumference",
    value: function calculateCircumference(t) {
      var e = this._cachedMeta.total;
      return 0 < e && !isNaN(t) ? _helpersSegment.T * (Math.abs(t) / e) : 0;
    }
  }, {
    key: "getLabelAndValue",
    value: function getLabelAndValue(t) {
      var e = this._cachedMeta,
          i = this.chart,
          a = i.data.labels || [],
          e = (0, _helpersSegment.o)(e._parsed[t], i.options.locale);
      return {
        label: a[t] || "",
        value: e
      };
    }
  }, {
    key: "getMaxBorderWidth",
    value: function getMaxBorderWidth(t) {
      var e = 0;
      var i = this.chart;
      var a, s, n, r, o;
      if (!t) for (a = 0, s = i.data.datasets.length; a < s; ++a) {
        if (i.isDatasetVisible(a)) {
          t = (n = i.getDatasetMeta(a)).data, r = n.controller;
          break;
        }
      }
      if (!t) return 0;

      for (a = 0, s = t.length; a < s; ++a) {
        "inner" !== (o = r.resolveDataElementOptions(a)).borderAlign && (e = Math.max(e, o.borderWidth || 0, o.hoverBorderWidth || 0));
      }

      return e;
    }
  }, {
    key: "getMaxOffset",
    value: function getMaxOffset(i) {
      var a = 0;

      for (var t = 0, e = i.length; t < e; ++t) {
        var s = this.resolveDataElementOptions(t);
        a = Math.max(a, s.offset || 0, s.hoverOffset || 0);
      }

      return a;
    }
  }, {
    key: "_getRingWeightOffset",
    value: function _getRingWeightOffset(e) {
      var i = 0;

      for (var t = 0; t < e; ++t) {
        this.chart.isDatasetVisible(t) && (i += this._getRingWeight(t));
      }

      return i;
    }
  }, {
    key: "_getRingWeight",
    value: function _getRingWeight(t) {
      return Math.max((0, _helpersSegment.v)(this.chart.data.datasets[t].weight, 1), 0);
    }
  }, {
    key: "_getVisibleDatasetWeightTotal",
    value: function _getVisibleDatasetWeightTotal() {
      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
  }]);

  return DoughnutController;
}(DatasetController);

exports.DoughnutController = DoughnutController;

_defineProperty(DoughnutController, "id", "doughnut");

_defineProperty(DoughnutController, "defaults", {
  datasetElementType: !1,
  dataElementType: "arc",
  animation: {
    animateRotate: !0,
    animateScale: !1
  },
  animations: {
    numbers: {
      type: "number",
      properties: ["circumference", "endAngle", "innerRadius", "outerRadius", "startAngle", "x", "y", "offset", "borderWidth", "spacing"]
    }
  },
  cutout: "50%",
  rotation: 0,
  circumference: 360,
  radius: "100%",
  spacing: 0,
  indexAxis: "r"
});

_defineProperty(DoughnutController, "descriptors", {
  _scriptable: function _scriptable(t) {
    return "spacing" !== t;
  },
  _indexable: function _indexable(t) {
    return "spacing" !== t && !t.startsWith("borderDash") && !t.startsWith("hoverBorderDash");
  }
});

_defineProperty(DoughnutController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels: function generateLabels(s) {
          var t = s.data;

          if (t.labels.length && t.datasets.length) {
            var _s$legend$options$lab = s.legend.options["labels"],
                n = _s$legend$options$lab.pointStyle,
                r = _s$legend$options$lab.color;
            return t.labels.map(function (t, e) {
              var i = s.getDatasetMeta(0);
              var a = i.controller.getStyle(e);
              return {
                text: t,
                fillStyle: a.backgroundColor,
                strokeStyle: a.borderColor,
                fontColor: r,
                lineWidth: a.borderWidth,
                pointStyle: n,
                hidden: !s.getDataVisibility(e),
                index: e
              };
            });
          }

          return [];
        }
      },
      onClick: function onClick(t, e, i) {
        i.chart.toggleDataVisibility(e.index), i.chart.update();
      }
    }
  }
});

var LineController = /*#__PURE__*/function (_DatasetController4) {
  _inherits(LineController, _DatasetController4);

  var _super4 = _createSuper(LineController);

  function LineController() {
    _classCallCheck(this, LineController);

    return _super4.apply(this, arguments);
  }

  _createClass(LineController, [{
    key: "initialize",
    value: function initialize() {
      this.enableOptionSharing = !0, this.supportsDecimation = !0, _get(_getPrototypeOf(LineController.prototype), "initialize", this).call(this);
    }
  }, {
    key: "update",
    value: function update(t) {
      var e = this._cachedMeta;
      var i = e.dataset,
          _e$data = e.data,
          a = _e$data === void 0 ? [] : _e$data,
          s = e._dataset;
      var n = this.chart._animationsDisabled;

      var _getStartAndCountOfVi = (0, _helpersSegment.q)(e, a, n),
          r = _getStartAndCountOfVi.start,
          o = _getStartAndCountOfVi.count;

      this._drawStart = r, this._drawCount = o, (0, _helpersSegment.w)(e) && (r = 0, o = a.length), i._chart = this.chart, i._datasetIndex = this.index, i._decimated = !!s._decimated, i.points = a;
      var l = this.resolveDatasetElementOptions(t);
      this.options.showLine || (l.borderWidth = 0), l.segment = this.options.segment, this.updateElement(i, void 0, {
        animated: !n,
        options: l
      }, t), this.updateElements(a, r, o, t);
    }
  }, {
    key: "updateElements",
    value: function updateElements(e, i, t, a) {
      var s = "reset" === a;
      var _this$_cachedMeta4 = this._cachedMeta,
          n = _this$_cachedMeta4.iScale,
          r = _this$_cachedMeta4.vScale,
          o = _this$_cachedMeta4._stacked,
          l = _this$_cachedMeta4._dataset;

      var _this$_getSharedOptio4 = this._getSharedOptions(i, a),
          h = _this$_getSharedOptio4.sharedOptions,
          d = _this$_getSharedOptio4.includeOptions,
          c = n.axis,
          u = r.axis,
          _this$options2 = this.options,
          g = _this$options2.spanGaps,
          p = _this$options2.segment,
          f = (0, _helpersSegment.x)(g) ? g : Number.POSITIVE_INFINITY,
          m = this.chart._animationsDisabled || s || "none" === a,
          v = i + t,
          x = e.length;

      var b = 0 < i && this.getParsed(i - 1);

      for (var _t15 = 0; _t15 < x; ++_t15) {
        var _,
            y,
            k,
            S,
            D = e[_t15];

        var M = m ? D : {};
        _t15 < i || _t15 >= v ? M.skip = !0 : (_ = this.getParsed(_t15), y = (0, _helpersSegment.k)(_[u]), k = M[c] = n.getPixelForValue(_[c], _t15), S = M[u] = s || y ? r.getBasePixel() : r.getPixelForValue(o ? this.applyStack(r, _, o) : _[u], _t15), M.skip = isNaN(k) || isNaN(S) || y, M.stop = 0 < _t15 && Math.abs(_[c] - b[c]) > f, p && (M.parsed = _, M.raw = l.data[_t15]), d && (M.options = h || this.resolveDataElementOptions(_t15, D.active ? "active" : a)), m || this.updateElement(D, _t15, M, a), b = _);
      }
    }
  }, {
    key: "getMaxOverflow",
    value: function getMaxOverflow() {
      var t = this._cachedMeta,
          e = t.dataset,
          e = e.options && e.options.borderWidth || 0;
      var i = t.data || [];
      if (!i.length) return e;
      var t = i[0].size(this.resolveDataElementOptions(0)),
          a = i[i.length - 1].size(this.resolveDataElementOptions(i.length - 1));
      return Math.max(e, t, a) / 2;
    }
  }, {
    key: "draw",
    value: function draw() {
      var t = this._cachedMeta;
      t.dataset.updateControlPoints(this.chart.chartArea, t.iScale.axis), _get(_getPrototypeOf(LineController.prototype), "draw", this).call(this);
    }
  }]);

  return LineController;
}(DatasetController);

exports.LineController = LineController;

_defineProperty(LineController, "id", "line");

_defineProperty(LineController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  showLine: !0,
  spanGaps: !1
});

_defineProperty(LineController, "overrides", {
  scales: {
    _index_: {
      type: "category"
    },
    _value_: {
      type: "linear"
    }
  }
});

var PolarAreaController = /*#__PURE__*/function (_DatasetController5) {
  _inherits(PolarAreaController, _DatasetController5);

  var _super5 = _createSuper(PolarAreaController);

  function PolarAreaController(t, e) {
    var _this5;

    _classCallCheck(this, PolarAreaController);

    _this5 = _super5.call(this, t, e), _this5.innerRadius = void 0, _this5.outerRadius = void 0;
    return _this5;
  }

  _createClass(PolarAreaController, [{
    key: "getLabelAndValue",
    value: function getLabelAndValue(t) {
      var e = this._cachedMeta,
          i = this.chart,
          a = i.data.labels || [],
          e = (0, _helpersSegment.o)(e._parsed[t].r, i.options.locale);
      return {
        label: a[t] || "",
        value: e
      };
    }
  }, {
    key: "parseObjectData",
    value: function parseObjectData(t, e, i, a) {
      return _helpersSegment.y.bind(this)(t, e, i, a);
    }
  }, {
    key: "update",
    value: function update(t) {
      var e = this._cachedMeta.data;
      this._updateRadius(), this.updateElements(e, 0, e.length, t);
    }
  }, {
    key: "getMinMax",
    value: function getMinMax() {
      var _this6 = this;

      var t = this._cachedMeta,
          a = {
        min: Number.POSITIVE_INFINITY,
        max: Number.NEGATIVE_INFINITY
      };
      return t.data.forEach(function (t, e) {
        var i = _this6.getParsed(e).r;

        !isNaN(i) && _this6.chart.getDataVisibility(e) && (i < a.min && (a.min = i), i > a.max && (a.max = i));
      }), a;
    }
  }, {
    key: "_updateRadius",
    value: function _updateRadius() {
      var t = this.chart;
      var e = t.chartArea,
          i = t.options,
          e = Math.min(e.right - e.left, e.bottom - e.top),
          e = Math.max(e / 2, 0),
          i = (e - Math.max(i.cutoutPercentage ? e / 100 * i.cutoutPercentage : 1, 0)) / t.getVisibleDatasetCount();
      this.outerRadius = e - i * this.index, this.innerRadius = this.outerRadius - i;
    }
  }, {
    key: "updateElements",
    value: function updateElements(a, t, e, s) {
      var n = "reset" === s;
      var r = this.chart;
      var o = r.options.animation;
      var l = this._cachedMeta.rScale;

      var h = l.xCenter,
          d = l.yCenter,
          c = l.getIndexAngle(0) - .5 * _helpersSegment.P;

      var u = c,
          g;
      var p = 360 / this.countVisibleElements();

      for (g = 0; g < t; ++g) {
        u += this._computeAngle(g, s, p);
      }

      for (g = t; g < t + e; g++) {
        var f = a[g];

        var _t16 = u,
            _e3 = u + this._computeAngle(g, s, p),
            i = r.getDataVisibility(g) ? l.getDistanceFromCenterForValue(this.getParsed(g).r) : 0;

        u = _e3, n && (o.animateScale && (i = 0), o.animateRotate && (_t16 = _e3 = c));
        var m = {
          x: h,
          y: d,
          innerRadius: 0,
          outerRadius: i,
          startAngle: _t16,
          endAngle: _e3,
          options: this.resolveDataElementOptions(g, f.active ? "active" : s)
        };
        this.updateElement(f, g, m, s);
      }
    }
  }, {
    key: "countVisibleElements",
    value: function countVisibleElements() {
      var _this7 = this;

      var t = this._cachedMeta;
      var i = 0;
      return t.data.forEach(function (t, e) {
        !isNaN(_this7.getParsed(e).r) && _this7.chart.getDataVisibility(e) && i++;
      }), i;
    }
  }, {
    key: "_computeAngle",
    value: function _computeAngle(t, e, i) {
      return this.chart.getDataVisibility(t) ? (0, _helpersSegment.t)(this.resolveDataElementOptions(t, e).angle || i) : 0;
    }
  }]);

  return PolarAreaController;
}(DatasetController);

exports.PolarAreaController = PolarAreaController;

_defineProperty(PolarAreaController, "id", "polarArea");

_defineProperty(PolarAreaController, "defaults", {
  dataElementType: "arc",
  animation: {
    animateRotate: !0,
    animateScale: !0
  },
  animations: {
    numbers: {
      type: "number",
      properties: ["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius"]
    }
  },
  indexAxis: "r",
  startAngle: 0
});

_defineProperty(PolarAreaController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels: function generateLabels(s) {
          var t = s.data;

          if (t.labels.length && t.datasets.length) {
            var _s$legend$options$lab2 = s.legend.options["labels"],
                n = _s$legend$options$lab2.pointStyle,
                r = _s$legend$options$lab2.color;
            return t.labels.map(function (t, e) {
              var i = s.getDatasetMeta(0);
              var a = i.controller.getStyle(e);
              return {
                text: t,
                fillStyle: a.backgroundColor,
                strokeStyle: a.borderColor,
                fontColor: r,
                lineWidth: a.borderWidth,
                pointStyle: n,
                hidden: !s.getDataVisibility(e),
                index: e
              };
            });
          }

          return [];
        }
      },
      onClick: function onClick(t, e, i) {
        i.chart.toggleDataVisibility(e.index), i.chart.update();
      }
    }
  },
  scales: {
    r: {
      type: "radialLinear",
      angleLines: {
        display: !1
      },
      beginAtZero: !0,
      grid: {
        circular: !0
      },
      pointLabels: {
        display: !1
      },
      startAngle: 0
    }
  }
});

var PieController = /*#__PURE__*/function (_DoughnutController) {
  _inherits(PieController, _DoughnutController);

  var _super6 = _createSuper(PieController);

  function PieController() {
    _classCallCheck(this, PieController);

    return _super6.apply(this, arguments);
  }

  return _createClass(PieController);
}(DoughnutController);

exports.PieController = PieController;

_defineProperty(PieController, "id", "pie");

_defineProperty(PieController, "defaults", {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: "100%"
});

var RadarController = /*#__PURE__*/function (_DatasetController6) {
  _inherits(RadarController, _DatasetController6);

  var _super7 = _createSuper(RadarController);

  function RadarController() {
    _classCallCheck(this, RadarController);

    return _super7.apply(this, arguments);
  }

  _createClass(RadarController, [{
    key: "getLabelAndValue",
    value: function getLabelAndValue(t) {
      var e = this._cachedMeta.vScale;
      var i = this.getParsed(t);
      return {
        label: e.getLabels()[t],
        value: "" + e.getLabelForValue(i[e.axis])
      };
    }
  }, {
    key: "parseObjectData",
    value: function parseObjectData(t, e, i, a) {
      return _helpersSegment.y.bind(this)(t, e, i, a);
    }
  }, {
    key: "update",
    value: function update(t) {
      var e = this._cachedMeta,
          i = e.dataset;
      var a = e.data || [],
          s = e.iScale.getLabels();

      if (i.points = a, "resize" !== t) {
        var n = this.resolveDatasetElementOptions(t);
        this.options.showLine || (n.borderWidth = 0);
        s = {
          _loop: !0,
          _fullLoop: s.length === a.length,
          options: n
        };
        this.updateElement(i, void 0, s, t);
      }

      this.updateElements(a, 0, a.length, t);
    }
  }, {
    key: "updateElements",
    value: function updateElements(e, i, a, s) {
      var n = this._cachedMeta.rScale;
      var r = "reset" === s;

      for (var t = i; t < i + a; t++) {
        var o = e[t],
            l = this.resolveDataElementOptions(t, o.active ? "active" : s),
            h = n.getPointPositionForValue(t, this.getParsed(t).r),
            d = r ? n.xCenter : h.x,
            c = r ? n.yCenter : h.y,
            h = {
          x: d,
          y: c,
          angle: h.angle,
          skip: isNaN(d) || isNaN(c),
          options: l
        };
        this.updateElement(o, t, h, s);
      }
    }
  }]);

  return RadarController;
}(DatasetController);

exports.RadarController = RadarController;

_defineProperty(RadarController, "id", "radar");

_defineProperty(RadarController, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  indexAxis: "r",
  showLine: !0,
  elements: {
    line: {
      fill: "start"
    }
  }
});

_defineProperty(RadarController, "overrides", {
  aspectRatio: 1,
  scales: {
    r: {
      type: "radialLinear"
    }
  }
});

var ScatterController = /*#__PURE__*/function (_DatasetController7) {
  _inherits(ScatterController, _DatasetController7);

  var _super8 = _createSuper(ScatterController);

  function ScatterController() {
    _classCallCheck(this, ScatterController);

    return _super8.apply(this, arguments);
  }

  _createClass(ScatterController, [{
    key: "getLabelAndValue",
    value: function getLabelAndValue(t) {
      var e = this._cachedMeta,
          i = this.chart.data.labels || [];
      var _e4 = e,
          a = _e4.xScale,
          s = _e4.yScale;
      var e = this.getParsed(t),
          n = a.getLabelForValue(e.x),
          e = s.getLabelForValue(e.y);
      return {
        label: i[t] || "",
        value: "(" + n + ", " + e + ")"
      };
    }
  }, {
    key: "update",
    value: function update(t) {
      var e = this._cachedMeta;
      var _e$data2 = e.data,
          i = _e$data2 === void 0 ? [] : _e$data2,
          a = this.chart._animationsDisabled;

      var _getStartAndCountOfVi2 = (0, _helpersSegment.q)(e, i, a),
          s = _getStartAndCountOfVi2.start,
          n = _getStartAndCountOfVi2.count;

      if (this._drawStart = s, this._drawCount = n, (0, _helpersSegment.w)(e) && (s = 0, n = i.length), this.options.showLine) {
        this.datasetElementType || this.addElements();
        var r = e.dataset,
            o = e._dataset,
            l = (r._chart = this.chart, r._datasetIndex = this.index, r._decimated = !!o._decimated, r.points = i, this.resolveDatasetElementOptions(t));
        l.segment = this.options.segment, this.updateElement(r, void 0, {
          animated: !a,
          options: l
        }, t);
      } else this.datasetElementType && (delete e.dataset, this.datasetElementType = !1);

      this.updateElements(i, s, n, t);
    }
  }, {
    key: "addElements",
    value: function addElements() {
      var t = this.options["showLine"];
      !this.datasetElementType && t && (this.datasetElementType = this.chart.registry.getElement("line")), _get(_getPrototypeOf(ScatterController.prototype), "addElements", this).call(this);
    }
  }, {
    key: "updateElements",
    value: function updateElements(e, i, a, s) {
      var n = "reset" === s;
      var _this$_cachedMeta5 = this._cachedMeta,
          r = _this$_cachedMeta5.iScale,
          o = _this$_cachedMeta5.vScale,
          l = _this$_cachedMeta5._stacked,
          h = _this$_cachedMeta5._dataset;
      var t = this.resolveDataElementOptions(i, s),
          d = this.getSharedOptions(t),
          c = this.includeOptions(s, d),
          u = r.axis,
          g = o.axis,
          _this$options3 = this.options,
          p = _this$options3.spanGaps,
          f = _this$options3.segment,
          m = (0, _helpersSegment.x)(p) ? p : Number.POSITIVE_INFINITY,
          v = this.chart._animationsDisabled || n || "none" === s;
      var x = 0 < i && this.getParsed(i - 1);

      for (var _t17 = i; _t17 < i + a; ++_t17) {
        var b = e[_t17],
            _ = this.getParsed(_t17);

        var D = v ? b : {};
        var y = (0, _helpersSegment.k)(_[g]),
            k = D[u] = r.getPixelForValue(_[u], _t17),
            S = D[g] = n || y ? o.getBasePixel() : o.getPixelForValue(l ? this.applyStack(o, _, l) : _[g], _t17);
        D.skip = isNaN(k) || isNaN(S) || y, D.stop = 0 < _t17 && Math.abs(_[u] - x[u]) > m, f && (D.parsed = _, D.raw = h.data[_t17]), c && (D.options = d || this.resolveDataElementOptions(_t17, b.active ? "active" : s)), v || this.updateElement(b, _t17, D, s), x = _;
      }

      this.updateSharedOptions(d, s, t);
    }
  }, {
    key: "getMaxOverflow",
    value: function getMaxOverflow() {
      var t = this._cachedMeta;
      var i = t.data || [];

      if (!this.options.showLine) {
        var _e5 = 0;

        for (var _t18 = i.length - 1; 0 <= _t18; --_t18) {
          _e5 = Math.max(_e5, i[_t18].size(this.resolveDataElementOptions(_t18)) / 2);
        }

        return 0 < _e5 && _e5;
      }

      t = t.dataset, t = t.options && t.options.borderWidth || 0;
      if (!i.length) return t;
      var e = i[0].size(this.resolveDataElementOptions(0)),
          a = i[i.length - 1].size(this.resolveDataElementOptions(i.length - 1));
      return Math.max(t, e, a) / 2;
    }
  }]);

  return ScatterController;
}(DatasetController);

exports.ScatterController = ScatterController;

_defineProperty(ScatterController, "id", "scatter");

_defineProperty(ScatterController, "defaults", {
  datasetElementType: !1,
  dataElementType: "point",
  showLine: !1,
  fill: !1
});

_defineProperty(ScatterController, "overrides", {
  interaction: {
    mode: "point"
  },
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});

var controllers = Object.freeze({
  __proto__: null,
  BarController: BarController,
  BubbleController: BubbleController,
  DoughnutController: DoughnutController,
  LineController: LineController,
  PieController: PieController,
  PolarAreaController: PolarAreaController,
  RadarController: RadarController,
  ScatterController: ScatterController
});
exports.controllers = controllers;

function _abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}

var DateAdapterBase = /*#__PURE__*/function () {
  function DateAdapterBase(t) {
    _classCallCheck(this, DateAdapterBase);

    _defineProperty(this, "options", void 0);

    this.options = t || {};
  }

  _createClass(DateAdapterBase, [{
    key: "init",
    value: function init() {}
  }, {
    key: "formats",
    value: function formats() {
      return _abstract();
    }
  }, {
    key: "parse",
    value: function parse() {
      return _abstract();
    }
  }, {
    key: "format",
    value: function format() {
      return _abstract();
    }
  }, {
    key: "add",
    value: function add() {
      return _abstract();
    }
  }, {
    key: "diff",
    value: function diff() {
      return _abstract();
    }
  }, {
    key: "startOf",
    value: function startOf() {
      return _abstract();
    }
  }, {
    key: "endOf",
    value: function endOf() {
      return _abstract();
    }
  }], [{
    key: "override",
    value: function override(t) {
      Object.assign(DateAdapterBase.prototype, t);
    }
  }]);

  return DateAdapterBase;
}();

var adapters = {
  _date: DateAdapterBase
};
exports._adapters = adapters;

function binarySearch(t, e, i, a) {
  var _t19 = t,
      t = _t19.controller,
      s = _t19.data,
      n = _t19._sorted,
      r = t._cachedMeta.iScale;

  if (r && e === r.axis && "r" !== e && n && s.length) {
    var o = r._reversePixels ? _helpersSegment.A : _helpersSegment.B;
    if (!a) return o(s, e, i);

    if (t._sharedOptions) {
      var l = s[0];
      n = "function" == typeof l.getRange && l.getRange(e);
      if (n) return r = o(s, e, i - n), a = o(s, e, i + n), {
        lo: r.lo,
        hi: a.hi
      };
    }
  }

  return {
    lo: 0,
    hi: s.length - 1
  };
}

function evaluateInteractionItems(t, i, e, a, s) {
  var n = t.getSortedVisibleDatasetMetas(),
      r = e[i];

  for (var _t20 = 0, _e6 = n.length; _t20 < _e6; ++_t20) {
    var _n$_t = n[_t20],
        o = _n$_t.index,
        l = _n$_t.data,
        _binarySearch = binarySearch(n[_t20], i, r, s),
        h = _binarySearch.lo,
        d = _binarySearch.hi;

    for (var _t21 = h; _t21 <= d; ++_t21) {
      var c = l[_t21];
      c.skip || a(c, o, _t21);
    }
  }
}

function getDistanceMetricForAxis(t) {
  var a = -1 !== t.indexOf("x"),
      s = -1 !== t.indexOf("y");
  return function (t, e) {
    var i = a ? Math.abs(t.x - e.x) : 0,
        t = s ? Math.abs(t.y - e.y) : 0;
    return Math.sqrt(Math.pow(i, 2) + Math.pow(t, 2));
  };
}

function getIntersectItems(a, s, t, n, r) {
  var o = [];
  if (!r && !a.isPointInArea(s)) return o;
  return evaluateInteractionItems(a, t, s, function (t, e, i) {
    (r || (0, _helpersSegment.C)(t, a.chartArea, 0)) && t.inRange(s.x, s.y, n) && o.push({
      element: t,
      datasetIndex: e,
      index: i
    });
  }, !0), o;
}

function getNearestRadialItems(t, r, e, o) {
  var l = [];
  return evaluateInteractionItems(t, e, r, function (t, e, i) {
    var _t$getProps = t.getProps(["startAngle", "endAngle"], o),
        a = _t$getProps.startAngle,
        s = _t$getProps.endAngle,
        n = (0, _helpersSegment.D)(t, {
      x: r.x,
      y: r.y
    })["angle"];

    (0, _helpersSegment.p)(n, a, s) && l.push({
      element: t,
      datasetIndex: e,
      index: i
    });
  }), l;
}

function getNearestCartesianItems(n, r, t, o, l, h) {
  var d = [];
  var c = getDistanceMetricForAxis(t);
  var u = Number.POSITIVE_INFINITY;
  return evaluateInteractionItems(n, t, r, function (t, e, i) {
    var a,
        s = t.inRange(r.x, r.y, l);
    o && !s || (a = t.getCenterPoint(l), (h || n.isPointInArea(a) || s) && ((s = c(r, a)) < u ? (d = [{
      element: t,
      datasetIndex: e,
      index: i
    }], u = s) : s === u && d.push({
      element: t,
      datasetIndex: e,
      index: i
    })));
  }), d;
}

function getNearestItems(t, e, i, a, s, n) {
  return n || t.isPointInArea(e) ? "r" !== i || a ? getNearestCartesianItems(t, e, i, a, s, n) : getNearestRadialItems(t, e, i, s) : [];
}

function getAxisItems(t, a, s, e, n) {
  var r = [],
      o = "x" === s ? "inXRange" : "inYRange";
  var l = !1;
  return evaluateInteractionItems(t, s, a, function (t, e, i) {
    t[o](a[s], n) && (r.push({
      element: t,
      datasetIndex: e,
      index: i
    }), l = l || t.inRange(a.x, a.y, n));
  }), e && !l ? [] : r;
}

var Interaction = {
  evaluateInteractionItems: evaluateInteractionItems,
  modes: {
    index: function index(t, e, i, a) {
      var e = (0, _helpersSegment.z)(e, t),
          s = i.axis || "x",
          n = i.includeInvisible || !1;
      var r = i.intersect ? getIntersectItems(t, e, s, a, n) : getNearestItems(t, e, s, !1, a, n),
          o = [];
      return r.length ? (t.getSortedVisibleDatasetMetas().forEach(function (t) {
        var e = r[0].index,
            i = t.data[e];
        i && !i.skip && o.push({
          element: i,
          datasetIndex: t.index,
          index: e
        });
      }), o) : [];
    },
    dataset: function dataset(t, e, i, a) {
      var e = (0, _helpersSegment.z)(e, t),
          s = i.axis || "xy",
          n = i.includeInvisible || !1;
      var r = i.intersect ? getIntersectItems(t, e, s, a, n) : getNearestItems(t, e, s, !1, a, n);

      if (0 < r.length) {
        var o = r[0].datasetIndex,
            l = t.getDatasetMeta(o).data;
        r = [];

        for (var _t22 = 0; _t22 < l.length; ++_t22) {
          r.push({
            element: l[_t22],
            datasetIndex: o,
            index: _t22
          });
        }
      }

      return r;
    },
    point: function point(t, e, i, a) {
      return getIntersectItems(t, (0, _helpersSegment.z)(e, t), i.axis || "xy", a, i.includeInvisible || !1);
    },
    nearest: function nearest(t, e, i, a) {
      var e = (0, _helpersSegment.z)(e, t),
          s = i.axis || "xy",
          n = i.includeInvisible || !1;
      return getNearestItems(t, e, s, i.intersect, a, n);
    },
    x: function x(t, e, i, a) {
      return getAxisItems(t, (0, _helpersSegment.z)(e, t), "x", i.intersect, a);
    },
    y: function y(t, e, i, a) {
      return getAxisItems(t, (0, _helpersSegment.z)(e, t), "y", i.intersect, a);
    }
  }
};
exports.Interaction = Interaction;
var STATIC_POSITIONS = ["left", "top", "right", "bottom"];

function filterByPosition(t, e) {
  return t.filter(function (t) {
    return t.pos === e;
  });
}

function filterDynamicPositionByAxis(t, e) {
  return t.filter(function (t) {
    return -1 === STATIC_POSITIONS.indexOf(t.pos) && t.box.axis === e;
  });
}

function sortByWeight(t, a) {
  return t.sort(function (t, e) {
    var i = a ? e : t,
        t = a ? t : e;
    return i.weight === t.weight ? i.index - t.index : i.weight - t.weight;
  });
}

function wrapBoxes(t) {
  var e = [];
  var i, a, s, n, r, o;

  for (i = 0, a = (t || []).length; i < a; ++i) {
    var _s2, _s2$options, _s2$options$stackWeig;

    (_s2 = s = t[i], n = _s2.position, _s2$options = _s2.options, r = _s2$options.stack, _s2$options$stackWeig = _s2$options.stackWeight, o = _s2$options$stackWeig === void 0 ? 1 : _s2$options$stackWeig, _s2), e.push({
      index: i,
      box: s,
      pos: n,
      horizontal: s.isHorizontal(),
      weight: s.weight,
      stack: r && n + r,
      stackWeight: o
    });
  }

  return e;
}

function buildStacks(t) {
  var e = {};

  var _iterator6 = _createForOfIteratorHelper(t),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var n = _step6.value;
      var i = n.stack,
          a = n.pos,
          s = n.stackWeight;

      if (i && STATIC_POSITIONS.includes(a)) {
        var r = e[i] || (e[i] = {
          count: 0,
          placed: 0,
          weight: 0,
          size: 0
        });
        r.count++, r.weight += s;
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return e;
}

function setLayoutDims(t, e) {
  var i = buildStacks(t),
      a = e.vBoxMaxWidth,
      s = e.hBoxMaxHeight;
  var n, r, o;

  for (n = 0, r = t.length; n < r; ++n) {
    var l = (o = t[n]).box["fullSize"],
        h = i[o.stack],
        h = h && o.stackWeight / h.weight;
    o.horizontal ? (o.width = h ? h * a : l && e.availableWidth, o.height = s) : (o.width = a, o.height = h ? h * s : l && e.availableHeight);
  }

  return i;
}

function buildLayoutBoxes(t) {
  var e = wrapBoxes(t);
  t = sortByWeight(e.filter(function (t) {
    return t.box.fullSize;
  }), !0);
  var i = sortByWeight(filterByPosition(e, "left"), !0),
      a = sortByWeight(filterByPosition(e, "right")),
      s = sortByWeight(filterByPosition(e, "top"), !0);
  var n = sortByWeight(filterByPosition(e, "bottom")),
      r = filterDynamicPositionByAxis(e, "x"),
      o = filterDynamicPositionByAxis(e, "y");
  return {
    fullSize: t,
    leftAndTop: i.concat(s),
    rightAndBottom: a.concat(o).concat(n).concat(r),
    chartArea: filterByPosition(e, "chartArea"),
    vertical: i.concat(a).concat(o),
    horizontal: s.concat(n).concat(r)
  };
}

function getCombinedMax(t, e, i, a) {
  return Math.max(t[i], e[i]) + Math.max(t[a], e[a]);
}

function updateMaxPadding(t, e) {
  t.top = Math.max(t.top, e.top), t.left = Math.max(t.left, e.left), t.bottom = Math.max(t.bottom, e.bottom), t.right = Math.max(t.right, e.right);
}

function updateDims(t, e, i, a) {
  var s = i.pos,
      n = i.box;
  var r = t.maxPadding;

  if (!(0, _helpersSegment.i)(s)) {
    i.size && (t[s] -= i.size);
    var l = a[i.stack] || {
      size: 0,
      count: 1
    };
    l.size = Math.max(l.size, i.horizontal ? n.height : n.width), i.size = l.size / l.count, t[s] += i.size;
  }

  n.getPadding && updateMaxPadding(r, n.getPadding());
  var a = Math.max(0, e.outerWidth - getCombinedMax(r, t, "left", "right")),
      e = Math.max(0, e.outerHeight - getCombinedMax(r, t, "top", "bottom")),
      r = a !== t.w,
      o = e !== t.h;
  return t.w = a, t.h = e, i.horizontal ? {
    same: r,
    other: o
  } : {
    same: o,
    other: r
  };
}

function handleMaxPadding(i) {
  var a = i.maxPadding;

  function t(t) {
    var e = Math.max(a[t] - i[t], 0);
    return i[t] += e, e;
  }

  i.y += t("top"), i.x += t("left"), t("right"), t("bottom");
}

function getMargins(t, i) {
  var a = i.maxPadding;

  function e(t) {
    var e = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    return t.forEach(function (t) {
      e[t] = Math.max(i[t], a[t]);
    }), e;
  }

  return e(t ? ["left", "right"] : ["top", "bottom"]);
}

function fitBoxes(t, e, i, a) {
  var s = [];
  var n, r, o, l, h, d;

  for (n = 0, r = t.length, h = 0; n < r; ++n) {
    o = t[n], (l = o.box).update(o.width || e.w, o.height || e.h, getMargins(o.horizontal, e));

    var _updateDims = updateDims(e, i, o, a),
        c = _updateDims.same,
        u = _updateDims.other;

    h |= c && s.length, d = d || u, l.fullSize || s.push(o);
  }

  return h && fitBoxes(s, e, i, a) || d;
}

function setBoxDims(t, e, i, a, s) {
  t.top = i, t.left = e, t.right = e + a, t.bottom = i + s, t.width = a, t.height = s;
}

function placeBoxes(t, e, i, a) {
  var s = i.padding;
  var n = e.x,
      r = e.y;

  var _iterator7 = _createForOfIteratorHelper(t),
      _step7;

  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var c = _step7.value;
      var o = c.box;
      var u = a[c.stack] || {
        count: 1,
        placed: 0,
        weight: 1
      };
      var l,
          h,
          d = c.stackWeight / u.weight || 1;
      c.horizontal ? (h = e.w * d, l = u.size || o.height, (0, _helpersSegment.h)(u.start) && (r = u.start), o.fullSize ? setBoxDims(o, s.left, r, i.outerWidth - s.right - s.left, l) : setBoxDims(o, e.left + u.placed, r, h, l), u.start = r, u.placed += h, r = o.bottom) : (l = e.h * d, h = u.size || o.width, (0, _helpersSegment.h)(u.start) && (n = u.start), o.fullSize ? setBoxDims(o, n, s.top, h, i.outerHeight - s.bottom - s.top) : setBoxDims(o, n, e.top + u.placed, h, l), u.start = n, u.placed += l, n = o.right);
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  e.x = n, e.y = r;
}

var layouts = {
  addBox: function addBox(t, e) {
    t.boxes || (t.boxes = []), e.fullSize = e.fullSize || !1, e.position = e.position || "top", e.weight = e.weight || 0, e._layers = e._layers || function () {
      return [{
        z: 0,
        draw: function draw(t) {
          e.draw(t);
        }
      }];
    }, t.boxes.push(e);
  },
  removeBox: function removeBox(t, e) {
    e = t.boxes ? t.boxes.indexOf(e) : -1;
    -1 !== e && t.boxes.splice(e, 1);
  },
  configure: function configure(t, e, i) {
    e.fullSize = i.fullSize, e.position = i.position, e.weight = i.weight;
  },
  update: function update(i, t, e, a) {
    if (i) {
      var s = (0, _helpersSegment.E)(i.options.layout.padding),
          n = Math.max(t - s.width, 0),
          r = Math.max(e - s.height, 0),
          o = buildLayoutBoxes(i.boxes);
      var d = o.vertical;
      var l = o.horizontal,
          h = ((0, _helpersSegment.F)(i.boxes, function (t) {
        "function" == typeof t.beforeLayout && t.beforeLayout();
      }), d.reduce(function (t, e) {
        return e.box.options && !1 === e.box.options.display ? t : t + 1;
      }, 0) || 1),
          t = Object.freeze({
        outerWidth: t,
        outerHeight: e,
        padding: s,
        availableWidth: n,
        availableHeight: r,
        vBoxMaxWidth: n / 2 / h,
        hBoxMaxHeight: r / 2
      }),
          e = Object.assign({}, s);
      updateMaxPadding(e, (0, _helpersSegment.E)(a));
      var c = Object.assign({
        maxPadding: e,
        w: n,
        h: r,
        x: s.left,
        y: s.top
      }, s);
      h = setLayoutDims(d.concat(l), t);
      fitBoxes(o.fullSize, c, t, h), fitBoxes(d, c, t, h), fitBoxes(l, c, t, h) && fitBoxes(d, c, t, h), handleMaxPadding(c), placeBoxes(o.leftAndTop, c, t, h), c.x += c.w, c.y += c.h, placeBoxes(o.rightAndBottom, c, t, h), i.chartArea = {
        left: c.left,
        top: c.top,
        right: c.left + c.w,
        bottom: c.top + c.h,
        height: c.h,
        width: c.w
      }, (0, _helpersSegment.F)(o.chartArea, function (t) {
        var e = t.box;
        Object.assign(e, i.chartArea), e.update(c.w, c.h, {
          left: 0,
          top: 0,
          right: 0,
          bottom: 0
        });
      });
    }
  }
};
exports.layouts = layouts;

var BasePlatform = /*#__PURE__*/function () {
  function BasePlatform() {
    _classCallCheck(this, BasePlatform);
  }

  _createClass(BasePlatform, [{
    key: "acquireContext",
    value: function acquireContext(t, e) {}
  }, {
    key: "releaseContext",
    value: function releaseContext(t) {
      return !1;
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(t, e, i) {}
  }, {
    key: "removeEventListener",
    value: function removeEventListener(t, e, i) {}
  }, {
    key: "getDevicePixelRatio",
    value: function getDevicePixelRatio() {
      return 1;
    }
  }, {
    key: "getMaximumSize",
    value: function getMaximumSize(t, e, i, a) {
      return e = Math.max(0, e || t.width), i = i || t.height, {
        width: e,
        height: Math.max(0, a ? Math.floor(e / a) : i)
      };
    }
  }, {
    key: "isAttached",
    value: function isAttached(t) {
      return !0;
    }
  }, {
    key: "updateConfig",
    value: function updateConfig(t) {}
  }]);

  return BasePlatform;
}();

exports.BasePlatform = BasePlatform;

var BasicPlatform = /*#__PURE__*/function (_BasePlatform) {
  _inherits(BasicPlatform, _BasePlatform);

  var _super9 = _createSuper(BasicPlatform);

  function BasicPlatform() {
    _classCallCheck(this, BasicPlatform);

    return _super9.apply(this, arguments);
  }

  _createClass(BasicPlatform, [{
    key: "acquireContext",
    value: function acquireContext(t) {
      return t && t.getContext && t.getContext("2d") || null;
    }
  }, {
    key: "updateConfig",
    value: function updateConfig(t) {
      t.options.animation = !1;
    }
  }]);

  return BasicPlatform;
}(BasePlatform);

exports.BasicPlatform = BasicPlatform;

var EXPANDO_KEY = "$chartjs",
    EVENT_TYPES = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
},
    isNullOrEmpty = function isNullOrEmpty(t) {
  return null === t || "" === t;
};

function initCanvas(t, e) {
  var i = t.style;
  var a = t.getAttribute("height"),
      s = t.getAttribute("width");
  return t[EXPANDO_KEY] = {
    initial: {
      height: a,
      width: s,
      style: {
        display: i.display,
        height: i.height,
        width: i.width
      }
    }
  }, i.display = i.display || "block", i.boxSizing = i.boxSizing || "border-box", isNullOrEmpty(s) && void 0 !== (s = (0, _helpersSegment.J)(t, "width")) && (t.width = s), isNullOrEmpty(a) && ("" === t.style.height ? t.height = t.width / (e || 2) : void 0 !== (s = (0, _helpersSegment.J)(t, "height")) && (t.height = s)), t;
}

var eventListenerOptions = !!_helpersSegment.K && {
  passive: !0
};

function addListener(t, e, i) {
  t.addEventListener(e, i, eventListenerOptions);
}

function removeListener(t, e, i) {
  t.canvas.removeEventListener(e, i, eventListenerOptions);
}

function fromNativeEvent(t, e) {
  var i = EVENT_TYPES[t.type] || t.type,
      _getRelativePosition = (0, _helpersSegment.z)(t, e),
      a = _getRelativePosition.x,
      s = _getRelativePosition.y;

  return {
    type: i,
    chart: e,
    "native": t,
    x: void 0 !== a ? a : null,
    y: void 0 !== s ? s : null
  };
}

function nodeListContains(t, e) {
  var _iterator8 = _createForOfIteratorHelper(t),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var i = _step8.value;
      if (i === e || i.contains(e)) return !0;
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
}

function createAttachObserver(t, e, a) {
  var s = t.canvas,
      i = new MutationObserver(function (t) {
    var e = !1;

    var _iterator9 = _createForOfIteratorHelper(t),
        _step9;

    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var _i2 = _step9.value;
        e = (e = e || nodeListContains(_i2.addedNodes, s)) && !nodeListContains(_i2.removedNodes, s);
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }

    e && a();
  });
  return i.observe(document, {
    childList: !0,
    subtree: !0
  }), i;
}

function createDetachObserver(t, e, a) {
  var s = t.canvas,
      i = new MutationObserver(function (t) {
    var e = !1;

    var _iterator10 = _createForOfIteratorHelper(t),
        _step10;

    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var _i3 = _step10.value;
        e = (e = e || nodeListContains(_i3.removedNodes, s)) && !nodeListContains(_i3.addedNodes, s);
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }

    e && a();
  });
  return i.observe(document, {
    childList: !0,
    subtree: !0
  }), i;
}

var drpListeningCharts = new Map();
var oldDevicePixelRatio = 0;

function onWindowResize() {
  var i = window.devicePixelRatio;
  i !== oldDevicePixelRatio && (oldDevicePixelRatio = i, drpListeningCharts.forEach(function (t, e) {
    e.currentDevicePixelRatio !== i && t();
  }));
}

function listenDevicePixelRatioChanges(t, e) {
  drpListeningCharts.size || window.addEventListener("resize", onWindowResize), drpListeningCharts.set(t, e);
}

function unlistenDevicePixelRatioChanges(t) {
  drpListeningCharts["delete"](t), drpListeningCharts.size || window.removeEventListener("resize", onWindowResize);
}

function createResizeObserver(t, e, a) {
  var i = t.canvas;
  var s = i && (0, _helpersSegment.I)(i);

  if (s) {
    var n = (0, _helpersSegment.L)(function (t, e) {
      var i = s.clientWidth;
      a(t, e), i < s.clientWidth && a();
    }, window),
        r = new ResizeObserver(function (t) {
      var t = t[0],
          e = t.contentRect.width,
          t = t.contentRect.height;
      0 === e && 0 === t || n(e, t);
    });
    return r.observe(s), listenDevicePixelRatioChanges(t, n), r;
  }
}

function releaseObserver(t, e, i) {
  i && i.disconnect(), "resize" === e && unlistenDevicePixelRatioChanges(t);
}

function createProxyAndListen(e, t, i) {
  var a = e.canvas,
      s = (0, _helpersSegment.L)(function (t) {
    null !== e.ctx && i(fromNativeEvent(t, e));
  }, e);
  return addListener(a, t, s), s;
}

var DomPlatform = /*#__PURE__*/function (_BasePlatform2) {
  _inherits(DomPlatform, _BasePlatform2);

  var _super10 = _createSuper(DomPlatform);

  function DomPlatform() {
    _classCallCheck(this, DomPlatform);

    return _super10.apply(this, arguments);
  }

  _createClass(DomPlatform, [{
    key: "acquireContext",
    value: function acquireContext(t, e) {
      var i = t && t.getContext && t.getContext("2d");
      return i && i.canvas === t ? (initCanvas(t, e), i) : null;
    }
  }, {
    key: "releaseContext",
    value: function releaseContext(t) {
      var i = t.canvas;
      if (!i[EXPANDO_KEY]) return !1;
      var a = i[EXPANDO_KEY].initial,
          e = (["height", "width"].forEach(function (t) {
        var e = a[t];
        (0, _helpersSegment.k)(e) ? i.removeAttribute(t) : i.setAttribute(t, e);
      }), a.style || {});
      return Object.keys(e).forEach(function (t) {
        i.style[t] = e[t];
      }), i.width = i.width, delete i[EXPANDO_KEY], !0;
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(t, e, i) {
      this.removeEventListener(t, e);
      var a = t.$proxies || (t.$proxies = {});
      var s = {
        attach: createAttachObserver,
        detach: createDetachObserver,
        resize: createResizeObserver
      }[e] || createProxyAndListen;
      a[e] = s(t, e, i);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(t, e) {
      var i = t.$proxies || (t.$proxies = {});
      var a = i[e];

      if (a) {
        var s = {
          attach: releaseObserver,
          detach: releaseObserver,
          resize: releaseObserver
        }[e] || removeListener;
        s(t, e, a), i[e] = void 0;
      }
    }
  }, {
    key: "getDevicePixelRatio",
    value: function getDevicePixelRatio() {
      return window.devicePixelRatio;
    }
  }, {
    key: "getMaximumSize",
    value: function getMaximumSize(t, e, i, a) {
      return (0, _helpersSegment.G)(t, e, i, a);
    }
  }, {
    key: "isAttached",
    value: function isAttached(t) {
      t = (0, _helpersSegment.I)(t);
      return !(!t || !t.isConnected);
    }
  }]);

  return DomPlatform;
}(BasePlatform);

exports.DomPlatform = DomPlatform;

function _detectPlatform(t) {
  return !(0, _helpersSegment.M)() || "undefined" != typeof OffscreenCanvas && t instanceof OffscreenCanvas ? BasicPlatform : DomPlatform;
}

var Element = /*#__PURE__*/function () {
  function Element() {
    _classCallCheck(this, Element);

    _defineProperty(this, "x", void 0);

    _defineProperty(this, "y", void 0);

    _defineProperty(this, "active", !1);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "$animations", void 0);
  }

  _createClass(Element, [{
    key: "tooltipPosition",
    value: function tooltipPosition(t) {
      var _this$getProps = this.getProps(["x", "y"], t),
          t = _this$getProps.x,
          e = _this$getProps.y;

      return {
        x: t,
        y: e
      };
    }
  }, {
    key: "hasValue",
    value: function hasValue() {
      return (0, _helpersSegment.x)(this.x) && (0, _helpersSegment.x)(this.y);
    }
  }, {
    key: "getProps",
    value: function getProps(t, e) {
      var _this8 = this;

      var i = this.$animations;
      if (!e || !i) return this;
      var a = {};
      return t.forEach(function (t) {
        a[t] = i[t] && i[t].active() ? i[t]._to : _this8[t];
      }), a;
    }
  }]);

  return Element;
}();

exports.Element = Element;

_defineProperty(Element, "defaults", {});

_defineProperty(Element, "defaultRoutes", void 0);

function autoSkip(i, a) {
  var s = i.options.ticks,
      i = determineMaxTicks(i),
      i = Math.min(s.maxTicksLimit || i, i),
      n = s.major.enabled ? getMajorIndices(a) : [],
      s = n.length,
      r = n[0],
      o = n[s - 1],
      l = [];
  if (i < s) return skipMajors(a, l, n, s / i), l;
  var h = calculateSpacing(n, a, i);

  if (0 < s) {
    var t, e;
    i = 1 < s ? Math.round((o - r) / (s - 1)) : null;

    for (skip(a, l, h, (0, _helpersSegment.k)(i) ? 0 : r - i, r), t = 0, e = s - 1; t < e; t++) {
      skip(a, l, h, n[t], n[t + 1]);
    }

    return skip(a, l, h, o, (0, _helpersSegment.k)(i) ? a.length : o + i), l;
  }

  return skip(a, l, h), l;
}

function determineMaxTicks(t) {
  var e = t.options.offset,
      i = t._tickSize(),
      e = t._length / i + (e ? 0 : 1),
      t = t._maxLength / i;

  return Math.floor(Math.min(e, t));
}

function calculateSpacing(t, e, i) {
  var t = getEvenSpacing(t),
      a = e.length / i;
  if (!t) return Math.max(a, 1);
  var s = (0, _helpersSegment.N)(t);

  for (var _t23 = 0, _e7 = s.length - 1; _t23 < _e7; _t23++) {
    var n = s[_t23];
    if (a < n) return n;
  }

  return Math.max(a, 1);
}

function getMajorIndices(t) {
  var e = [];
  var i, a;

  for (i = 0, a = t.length; i < a; i++) {
    t[i].major && e.push(i);
  }

  return e;
}

function skipMajors(t, e, i, a) {
  var s = 0,
      n = i[0],
      r;

  for (a = Math.ceil(a), r = 0; r < t.length; r++) {
    r === n && (e.push(t[r]), s++, n = i[s * a]);
  }
}

function skip(t, e, i, a, s) {
  var n = (0, _helpersSegment.v)(a, 0),
      r = Math.min((0, _helpersSegment.v)(s, t.length), t.length);
  var o = 0,
      l,
      h,
      d;

  for (i = Math.ceil(i), s && (i = (l = s - a) / Math.floor(l / i)), d = n; d < 0;) {
    o++, d = Math.round(n + o * i);
  }

  for (h = Math.max(n, 0); h < r; h++) {
    h === d && (e.push(t[h]), o++, d = Math.round(n + o * i));
  }
}

function getEvenSpacing(t) {
  var e = t.length;
  var i, a;
  if (e < 2) return !1;

  for (a = t[0], i = 1; i < e; ++i) {
    if (t[i] - t[i - 1] !== a) return !1;
  }

  return a;
}

var reverseAlign = function reverseAlign(t) {
  return "left" === t ? "right" : "right" === t ? "left" : t;
},
    offsetFromEdge = function offsetFromEdge(t, e, i) {
  return "top" === e || "left" === e ? t[e] + i : t[e] - i;
},
    getTicksLimit = function getTicksLimit(t, e) {
  return Math.min(e || t, t);
};

function sample(t, e) {
  var i = [];
  var a = t.length / e,
      s = t.length;
  var n = 0;

  for (; n < s; n += a) {
    i.push(t[Math.floor(n)]);
  }

  return i;
}

function getPixelForGridLine(t, e, i) {
  var a = t.ticks.length,
      s = Math.min(e, a - 1),
      n = t._startPixel,
      r = t._endPixel;
  var o = t.getPixelForTick(s),
      l;
  if (!(i && (l = 1 === a ? Math.max(o - n, r - o) : 0 === e ? (t.getPixelForTick(1) - o) / 2 : (o - t.getPixelForTick(s - 1)) / 2, (o += s < e ? l : -l) < n - 1e-6 || o > r + 1e-6))) return o;
}

function garbageCollect(t, s) {
  (0, _helpersSegment.F)(t, function (t) {
    var e = t.gc;
    var i = e.length / 2;
    var a;

    if (s < i) {
      for (a = 0; a < i; ++a) {
        delete t.data[e[a]];
      }

      e.splice(0, i);
    }
  });
}

function getTickMarkLength(t) {
  return t.drawTicks ? t.tickLength : 0;
}

function getTitleHeight(t, e) {
  if (!t.display) return 0;
  var e = (0, _helpersSegment.a0)(t.font, e),
      i = (0, _helpersSegment.E)(t.padding);
  return ((0, _helpersSegment.b)(t.text) ? t.text.length : 1) * e.lineHeight + i.height;
}

function createScaleContext(t, e) {
  return (0, _helpersSegment.j)(t, {
    scale: e,
    type: "scale"
  });
}

function createTickContext(t, e, i) {
  return (0, _helpersSegment.j)(t, {
    tick: i,
    index: e,
    type: "tick"
  });
}

function titleAlign(t, e, i) {
  var a = (0, _helpersSegment.a1)(t);
  return a = i && "right" !== e || !i && "right" === e ? reverseAlign(a) : a;
}

function titleArgs(t, e, i, a) {
  var s = t.top,
      n = t.left,
      r = t.bottom,
      o = t.right,
      l = t.chart;
  var _l = l,
      h = _l.chartArea,
      d = _l.scales;
  var c = 0,
      u,
      g,
      p;
  var f,
      m,
      l = r - s,
      v = o - n;
  return t.isHorizontal() ? (g = (0, _helpersSegment.a2)(a, n, o), p = (0, _helpersSegment.i)(i) ? (m = i[f = Object.keys(i)[0]], d[f].getPixelForValue(m) + l - e) : "center" === i ? (h.bottom + h.top) / 2 + l - e : offsetFromEdge(t, i, e), u = o - n) : (g = (0, _helpersSegment.i)(i) ? (m = i[f = Object.keys(i)[0]], d[f].getPixelForValue(m) - v + e) : "center" === i ? (h.left + h.right) / 2 - v + e : offsetFromEdge(t, i, e), p = (0, _helpersSegment.a2)(a, r, s), c = "left" === i ? -_helpersSegment.H : _helpersSegment.H), {
    titleX: g,
    titleY: p,
    maxWidth: u,
    rotation: c
  };
}

var Scale = /*#__PURE__*/function (_Element) {
  _inherits(Scale, _Element);

  var _super11 = _createSuper(Scale);

  function Scale(t) {
    var _this9;

    _classCallCheck(this, Scale);

    _this9 = _super11.call(this), _this9.id = t.id, _this9.type = t.type, _this9.options = void 0, _this9.ctx = t.ctx, _this9.chart = t.chart, _this9.top = void 0, _this9.bottom = void 0, _this9.left = void 0, _this9.right = void 0, _this9.width = void 0, _this9.height = void 0, _this9._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, _this9.maxWidth = void 0, _this9.maxHeight = void 0, _this9.paddingTop = void 0, _this9.paddingBottom = void 0, _this9.paddingLeft = void 0, _this9.paddingRight = void 0, _this9.axis = void 0, _this9.labelRotation = void 0, _this9.min = void 0, _this9.max = void 0, _this9._range = void 0, _this9.ticks = [], _this9._gridLineItems = null, _this9._labelItems = null, _this9._labelSizes = null, _this9._length = 0, _this9._maxLength = 0, _this9._longestTextCache = {}, _this9._startPixel = void 0, _this9._endPixel = void 0, _this9._reversePixels = !1, _this9._userMax = void 0, _this9._userMin = void 0, _this9._suggestedMax = void 0, _this9._suggestedMin = void 0, _this9._ticksLength = 0, _this9._borderValue = 0, _this9._cache = {}, _this9._dataLimitsCached = !1, _this9.$context = void 0;
    return _this9;
  }

  _createClass(Scale, [{
    key: "init",
    value: function init(t) {
      this.options = t.setContext(this.getContext()), this.axis = t.axis, this._userMin = this.parse(t.min), this._userMax = this.parse(t.max), this._suggestedMin = this.parse(t.suggestedMin), this._suggestedMax = this.parse(t.suggestedMax);
    }
  }, {
    key: "parse",
    value: function parse(t, e) {
      return t;
    }
  }, {
    key: "getUserBounds",
    value: function getUserBounds() {
      var t = this._userMin,
          e = this._userMax,
          i = this._suggestedMin,
          a = this._suggestedMax,
          t = (0, _helpersSegment.O)(t, Number.POSITIVE_INFINITY),
          e = (0, _helpersSegment.O)(e, Number.NEGATIVE_INFINITY),
          i = (0, _helpersSegment.O)(i, Number.POSITIVE_INFINITY),
          a = (0, _helpersSegment.O)(a, Number.NEGATIVE_INFINITY);
      return {
        min: (0, _helpersSegment.O)(t, i),
        max: (0, _helpersSegment.O)(e, a),
        minDefined: (0, _helpersSegment.g)(t),
        maxDefined: (0, _helpersSegment.g)(e)
      };
    }
  }, {
    key: "getMinMax",
    value: function getMinMax(i) {
      var _this$getUserBounds = this.getUserBounds(),
          a = _this$getUserBounds.min,
          s = _this$getUserBounds.max,
          n = _this$getUserBounds.minDefined,
          r = _this$getUserBounds.maxDefined;

      var o;
      if (n && r) return {
        min: a,
        max: s
      };
      var l = this.getMatchingVisibleMetas();

      for (var t = 0, e = l.length; t < e; ++t) {
        o = l[t].controller.getMinMax(this, i), n || (a = Math.min(a, o.min)), r || (s = Math.max(s, o.max));
      }

      return a = r && a > s ? s : a, s = n && a > s ? a : s, {
        min: (0, _helpersSegment.O)(a, (0, _helpersSegment.O)(s, a)),
        max: (0, _helpersSegment.O)(s, (0, _helpersSegment.O)(a, s))
      };
    }
  }, {
    key: "getPadding",
    value: function getPadding() {
      return {
        left: this.paddingLeft || 0,
        top: this.paddingTop || 0,
        right: this.paddingRight || 0,
        bottom: this.paddingBottom || 0
      };
    }
  }, {
    key: "getTicks",
    value: function getTicks() {
      return this.ticks;
    }
  }, {
    key: "getLabels",
    value: function getLabels() {
      var t = this.chart.data;
      return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [];
    }
  }, {
    key: "getLabelItems",
    value: function getLabelItems() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;
      return this._labelItems || (this._labelItems = this._computeLabelItems(t));
    }
  }, {
    key: "beforeLayout",
    value: function beforeLayout() {
      this._cache = {}, this._dataLimitsCached = !1;
    }
  }, {
    key: "beforeUpdate",
    value: function beforeUpdate() {
      (0, _helpersSegment.Q)(this.options.beforeUpdate, [this]);
    }
  }, {
    key: "update",
    value: function update(t, e, i) {
      var _this$options4 = this.options,
          a = _this$options4.beginAtZero,
          s = _this$options4.grace,
          n = _this$options4.ticks,
          r = n.sampleSize,
          t = (this.beforeUpdate(), this.maxWidth = t, this.maxHeight = e, this._margins = i = Object.assign({
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, i), this.ticks = null, this._labelSizes = null, this._gridLineItems = null, this._labelItems = null, this.beforeSetDimensions(), this.setDimensions(), this.afterSetDimensions(), this._maxLength = this.isHorizontal() ? this.width + i.left + i.right : this.height + i.top + i.bottom, this._dataLimitsCached || (this.beforeDataLimits(), this.determineDataLimits(), this.afterDataLimits(), this._range = (0, _helpersSegment.R)(this, s, a), this._dataLimitsCached = !0), this.beforeBuildTicks(), this.ticks = this.buildTicks() || [], this.afterBuildTicks(), r < this.ticks.length);
      this._convertTicksToLabels(t ? sample(this.ticks, r) : this.ticks), this.configure(), this.beforeCalculateLabelRotation(), this.calculateLabelRotation(), this.afterCalculateLabelRotation(), n.display && (n.autoSkip || "auto" === n.source) && (this.ticks = autoSkip(this, this.ticks), this._labelSizes = null, this.afterAutoSkip()), t && this._convertTicksToLabels(this.ticks), this.beforeFit(), this.fit(), this.afterFit(), this.afterUpdate();
    }
  }, {
    key: "configure",
    value: function configure() {
      var t = this.options.reverse,
          e,
          i;
      this.isHorizontal() ? (e = this.left, i = this.right) : (e = this.top, i = this.bottom, t = !t), this._startPixel = e, this._endPixel = i, this._reversePixels = t, this._length = i - e, this._alignToPixels = this.options.alignToPixels;
    }
  }, {
    key: "afterUpdate",
    value: function afterUpdate() {
      (0, _helpersSegment.Q)(this.options.afterUpdate, [this]);
    }
  }, {
    key: "beforeSetDimensions",
    value: function beforeSetDimensions() {
      (0, _helpersSegment.Q)(this.options.beforeSetDimensions, [this]);
    }
  }, {
    key: "setDimensions",
    value: function setDimensions() {
      this.isHorizontal() ? (this.width = this.maxWidth, this.left = 0, this.right = this.width) : (this.height = this.maxHeight, this.top = 0, this.bottom = this.height), this.paddingLeft = 0, this.paddingTop = 0, this.paddingRight = 0, this.paddingBottom = 0;
    }
  }, {
    key: "afterSetDimensions",
    value: function afterSetDimensions() {
      (0, _helpersSegment.Q)(this.options.afterSetDimensions, [this]);
    }
  }, {
    key: "_callHooks",
    value: function _callHooks(t) {
      this.chart.notifyPlugins(t, this.getContext()), (0, _helpersSegment.Q)(this.options[t], [this]);
    }
  }, {
    key: "beforeDataLimits",
    value: function beforeDataLimits() {
      this._callHooks("beforeDataLimits");
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {}
  }, {
    key: "afterDataLimits",
    value: function afterDataLimits() {
      this._callHooks("afterDataLimits");
    }
  }, {
    key: "beforeBuildTicks",
    value: function beforeBuildTicks() {
      this._callHooks("beforeBuildTicks");
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      return [];
    }
  }, {
    key: "afterBuildTicks",
    value: function afterBuildTicks() {
      this._callHooks("afterBuildTicks");
    }
  }, {
    key: "beforeTickToLabelConversion",
    value: function beforeTickToLabelConversion() {
      (0, _helpersSegment.Q)(this.options.beforeTickToLabelConversion, [this]);
    }
  }, {
    key: "generateTickLabels",
    value: function generateTickLabels(t) {
      var e = this.options.ticks;
      var i, a, s;

      for (i = 0, a = t.length; i < a; i++) {
        (s = t[i]).label = (0, _helpersSegment.Q)(e.callback, [s.value, i, t], this);
      }
    }
  }, {
    key: "afterTickToLabelConversion",
    value: function afterTickToLabelConversion() {
      (0, _helpersSegment.Q)(this.options.afterTickToLabelConversion, [this]);
    }
  }, {
    key: "beforeCalculateLabelRotation",
    value: function beforeCalculateLabelRotation() {
      (0, _helpersSegment.Q)(this.options.beforeCalculateLabelRotation, [this]);
    }
  }, {
    key: "calculateLabelRotation",
    value: function calculateLabelRotation() {
      var t,
          e,
          i,
          a,
          s = this.options,
          n = s.ticks,
          r = getTicksLimit(this.ticks.length, s.ticks.maxTicksLimit),
          o = n.minRotation || 0,
          l = n.maxRotation;
      var h = o;
      !this._isVisible() || !n.display || l <= o || r <= 1 || !this.isHorizontal() ? this.labelRotation = o : (e = (t = this._getLabelSizes()).widest.width, i = t.highest.height, a = (0, _helpersSegment.S)(this.chart.width - e, 0, this.maxWidth), (s.offset ? this.maxWidth / r : a / (r - 1)) < e + 6 && (a = a / (r - (s.offset ? .5 : 1)), r = this.maxHeight - getTickMarkLength(s.grid) - n.padding - getTitleHeight(s.title, this.chart.options.font), n = Math.sqrt(e * e + i * i), h = (0, _helpersSegment.U)(Math.min(Math.asin((0, _helpersSegment.S)((t.highest.height + 6) / a, -1, 1)), Math.asin((0, _helpersSegment.S)(r / n, -1, 1)) - Math.asin((0, _helpersSegment.S)(i / n, -1, 1)))), h = Math.max(o, Math.min(l, h))), this.labelRotation = h);
    }
  }, {
    key: "afterCalculateLabelRotation",
    value: function afterCalculateLabelRotation() {
      (0, _helpersSegment.Q)(this.options.afterCalculateLabelRotation, [this]);
    }
  }, {
    key: "afterAutoSkip",
    value: function afterAutoSkip() {}
  }, {
    key: "beforeFit",
    value: function beforeFit() {
      (0, _helpersSegment.Q)(this.options.beforeFit, [this]);
    }
  }, {
    key: "fit",
    value: function fit() {
      var _this$_getLabelSizes;

      var t = {
        width: 0,
        height: 0
      };

      var e,
          i,
          a,
          s,
          n,
          r = this.chart,
          _this$options5 = this.options,
          o = _this$options5.ticks,
          l = _this$options5.title,
          h = _this$options5.grid,
          d = this._isVisible(),
          c = this.isHorizontal();

      d && (d = getTitleHeight(l, r.options.font), c ? (t.width = this.maxWidth, t.height = getTickMarkLength(h) + d) : (t.height = this.maxHeight, t.width = getTickMarkLength(h) + d), o.display && this.ticks.length && ((_this$_getLabelSizes = this._getLabelSizes(), l = _this$_getLabelSizes.first, h = _this$_getLabelSizes.last, d = _this$_getLabelSizes.widest, e = _this$_getLabelSizes.highest, _this$_getLabelSizes), i = 2 * o.padding, s = (0, _helpersSegment.t)(this.labelRotation), a = Math.cos(s), s = Math.sin(s), c ? (n = o.mirror ? 0 : s * d.width + a * e.height, t.height = Math.min(this.maxHeight, t.height + n + i)) : (n = o.mirror ? 0 : a * d.width + s * e.height, t.width = Math.min(this.maxWidth, t.width + n + i)), this._calculatePadding(l, h, s, a))), this._handleMargins(), c ? (this.width = this._length = r.width - this._margins.left - this._margins.right, this.height = t.height) : (this.width = t.width, this.height = this._length = r.height - this._margins.top - this._margins.bottom);
    }
  }, {
    key: "_calculatePadding",
    value: function _calculatePadding(i, a, s, n) {
      var _this$options6 = this.options,
          _this$options6$ticks = _this$options6.ticks,
          r = _this$options6$ticks.align,
          o = _this$options6$ticks.padding,
          l = _this$options6.position,
          h = 0 !== this.labelRotation,
          l = "top" !== l && "x" === this.axis;

      if (this.isHorizontal()) {
        var d = this.getPixelForTick(0) - this.left,
            c = this.right - this.getPixelForTick(this.ticks.length - 1);
        var t = 0,
            e = 0;
        h ? e = l ? (t = n * i.width, s * a.height) : (t = s * i.height, n * a.width) : "start" === r ? e = a.width : "end" === r ? t = i.width : "inner" !== r && (t = i.width / 2, e = a.width / 2), this.paddingLeft = Math.max((t - d + o) * this.width / (this.width - d), 0), this.paddingRight = Math.max((e - c + o) * this.width / (this.width - c), 0);
      } else {
        var _t24 = a.height / 2,
            _e8 = i.height / 2;

        "start" === r ? (_t24 = 0, _e8 = i.height) : "end" === r && (_t24 = a.height, _e8 = 0), this.paddingTop = _t24 + o, this.paddingBottom = _e8 + o;
      }
    }
  }, {
    key: "_handleMargins",
    value: function _handleMargins() {
      this._margins && (this._margins.left = Math.max(this.paddingLeft, this._margins.left), this._margins.top = Math.max(this.paddingTop, this._margins.top), this._margins.right = Math.max(this.paddingRight, this._margins.right), this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom));
    }
  }, {
    key: "afterFit",
    value: function afterFit() {
      (0, _helpersSegment.Q)(this.options.afterFit, [this]);
    }
  }, {
    key: "isHorizontal",
    value: function isHorizontal() {
      var _this$options7 = this.options,
          t = _this$options7.axis,
          e = _this$options7.position;
      return "top" === e || "bottom" === e || "x" === t;
    }
  }, {
    key: "isFullSize",
    value: function isFullSize() {
      return this.options.fullSize;
    }
  }, {
    key: "_convertTicksToLabels",
    value: function _convertTicksToLabels(t) {
      this.beforeTickToLabelConversion(), this.generateTickLabels(t);
      var e, i;

      for (e = 0, i = t.length; e < i; e++) {
        (0, _helpersSegment.k)(t[e].label) && (t.splice(e, 1), i--, e--);
      }

      this.afterTickToLabelConversion();
    }
  }, {
    key: "_getLabelSizes",
    value: function _getLabelSizes() {
      var e = this._labelSizes;

      if (!e) {
        var i = this.options.ticks.sampleSize;
        var t = this.ticks;
        i < t.length && (t = sample(t, i)), this._labelSizes = e = this._computeLabelSizes(t, t.length, this.options.ticks.maxTicksLimit);
      }

      return e;
    }
  }, {
    key: "_computeLabelSizes",
    value: function _computeLabelSizes(t, e, i) {
      var a = this.ctx,
          s = this._longestTextCache,
          n = [],
          r = [];
      var o = Math.floor(e / getTicksLimit(e, i));

      var l = 0,
          h = 0,
          d,
          c,
          u,
          g,
          p,
          f,
          m,
          v,
          x,
          b,
          _;

      for (d = 0; d < e; d += o) {
        if (g = t[d].label, p = this._resolveTickFontOptions(d), a.font = f = p.string, m = s[f] = s[f] || {
          data: {},
          gc: []
        }, v = p.lineHeight, x = b = 0, (0, _helpersSegment.k)(g) || (0, _helpersSegment.b)(g)) {
          if ((0, _helpersSegment.b)(g)) for (c = 0, u = g.length; c < u; ++c) {
            _ = g[c], (0, _helpersSegment.k)(_) || (0, _helpersSegment.b)(_) || (x = (0, _helpersSegment.V)(a, m.data, m.gc, x, _), b += v);
          }
        } else x = (0, _helpersSegment.V)(a, m.data, m.gc, x, g), b = v;

        n.push(x), r.push(b), l = Math.max(x, l), h = Math.max(b, h);
      }

      garbageCollect(s, e);

      var i = n.indexOf(l),
          y = r.indexOf(h),
          k = function k(t) {
        return {
          width: n[t] || 0,
          height: r[t] || 0
        };
      };

      return {
        first: k(0),
        last: k(e - 1),
        widest: k(i),
        highest: k(y),
        widths: n,
        heights: r
      };
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(t) {
      return t;
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(t, e) {
      return NaN;
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(t) {}
  }, {
    key: "getPixelForTick",
    value: function getPixelForTick(t) {
      var e = this.ticks;
      return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);
    }
  }, {
    key: "getPixelForDecimal",
    value: function getPixelForDecimal(t) {
      this._reversePixels && (t = 1 - t);
      t = this._startPixel + t * this._length;
      return (0, _helpersSegment.W)(this._alignToPixels ? (0, _helpersSegment.X)(this.chart, t, 0) : t);
    }
  }, {
    key: "getDecimalForPixel",
    value: function getDecimalForPixel(t) {
      t = (t - this._startPixel) / this._length;
      return this._reversePixels ? 1 - t : t;
    }
  }, {
    key: "getBasePixel",
    value: function getBasePixel() {
      return this.getPixelForValue(this.getBaseValue());
    }
  }, {
    key: "getBaseValue",
    value: function getBaseValue() {
      var t = this.min,
          e = this.max;
      return t < 0 && e < 0 ? e : 0 < t && 0 < e ? t : 0;
    }
  }, {
    key: "getContext",
    value: function getContext(t) {
      var e = this.ticks || [];

      if (0 <= t && t < e.length) {
        var i = e[t];
        return i.$context || (i.$context = createTickContext(this.getContext(), t, i));
      }

      return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
    }
  }, {
    key: "_tickSize",
    value: function _tickSize() {
      var t = this.options.ticks,
          e = (0, _helpersSegment.t)(this.labelRotation),
          i = Math.abs(Math.cos(e)),
          e = Math.abs(Math.sin(e)),
          a = this._getLabelSizes(),
          t = t.autoSkipPadding || 0,
          s = a ? a.widest.width + t : 0,
          a = a ? a.highest.height + t : 0;

      return this.isHorizontal() ? s * e < a * i ? s / i : a / e : a * e < s * i ? a / i : s / e;
    }
  }, {
    key: "_isVisible",
    value: function _isVisible() {
      var t = this.options.display;
      return "auto" !== t ? !!t : 0 < this.getMatchingVisibleMetas().length;
    }
  }, {
    key: "_computeGridLineItems",
    value: function _computeGridLineItems(t) {
      var e = this.axis;
      var i = this.chart;
      var a = this.options;
      var s = a.grid,
          n = a.position,
          r = a.border;
      var o = s.offset,
          l = this.isHorizontal(),
          h = this.ticks.length + (o ? 1 : 0),
          d = getTickMarkLength(s);
      var c = [];
      var u = r.setContext(this.getContext());
      var g = u.display ? u.width : 0;

      function p(t) {
        return (0, _helpersSegment.X)(i, t, g);
      }

      var f,
          m,
          u = g / 2;

      var v, x, b, _, y, k, S, D, M, P, A, w;

      "top" === n ? (v = p(this.bottom), k = this.bottom - d, D = v - u, P = p(t.top) + u, w = t.bottom) : "bottom" === n ? (v = p(this.top), P = t.top, w = p(t.bottom) - u, k = v + u, D = this.top + d) : "left" === n ? (v = p(this.right), y = this.right - d, S = v - u, M = p(t.left) + u, A = t.right) : "right" === n ? (v = p(this.left), M = t.left, A = p(t.right) - u, y = v + u, S = this.left + d) : "x" === e ? ("center" === n ? v = p((t.top + t.bottom) / 2 + .5) : (0, _helpersSegment.i)(n) && (m = n[f = Object.keys(n)[0]], v = p(this.chart.scales[f].getPixelForValue(m))), P = t.top, w = t.bottom, k = v + u, D = k + d) : "y" === e && ("center" === n ? v = p((t.left + t.right) / 2) : (0, _helpersSegment.i)(n) && (m = n[f = Object.keys(n)[0]], v = p(this.chart.scales[f].getPixelForValue(m))), y = v - u, S = y - d, M = t.left, A = t.right);
      var e = (0, _helpersSegment.v)(a.ticks.maxTicksLimit, h),
          C = Math.max(1, Math.ceil(h / e));

      for (x = 0; x < h; x += C) {
        var O = this.getContext(x),
            L = s.setContext(O),
            O = r.setContext(O),
            T = L.lineWidth,
            E = L.color,
            I = O.dash || [],
            O = O.dashOffset,
            R = L.tickWidth,
            F = L.tickColor,
            B = L.tickBorderDash || [],
            L = L.tickBorderDashOffset;
        void 0 !== (b = getPixelForGridLine(this, x, o)) && (_ = (0, _helpersSegment.X)(i, b, T), l ? y = S = M = A = _ : k = D = P = w = _, c.push({
          tx1: y,
          ty1: k,
          tx2: S,
          ty2: D,
          x1: M,
          y1: P,
          x2: A,
          y2: w,
          width: T,
          color: E,
          borderDash: I,
          borderDashOffset: O,
          tickWidth: R,
          tickColor: F,
          tickBorderDash: B,
          tickBorderDashOffset: L
        }));
      }

      return this._ticksLength = h, this._borderValue = v, c;
    }
  }, {
    key: "_computeLabelItems",
    value: function _computeLabelItems(t) {
      var e = this.axis,
          i = this.options;
      var _i4 = i,
          a = _i4.position,
          s = _i4.ticks;
      var n,
          r = this.isHorizontal(),
          o = this.ticks,
          l = s.align,
          h = s.crossAlign,
          d = s.padding,
          c = s.mirror,
          i = getTickMarkLength(i.grid),
          u = i + d,
          d = c ? -d : u,
          g = -(0, _helpersSegment.t)(this.labelRotation);
      var p = [];

      var f,
          m,
          v,
          x,
          b,
          _,
          y,
          k,
          S,
          D,
          M,
          P = "middle";

      "top" === a ? (b = this.bottom - d, _ = this._getXAxisLabelAlignment()) : "bottom" === a ? (b = this.top + d, _ = this._getXAxisLabelAlignment()) : "left" === a ? (d = this._getYAxisLabelAlignment(i), _ = d.textAlign, x = d.x) : "right" === a ? (d = this._getYAxisLabelAlignment(i), _ = d.textAlign, x = d.x) : "x" === e ? ("center" === a ? b = (t.top + t.bottom) / 2 + u : (0, _helpersSegment.i)(a) && (n = a[d = Object.keys(a)[0]], b = this.chart.scales[d].getPixelForValue(n) + u), _ = this._getXAxisLabelAlignment()) : "y" === e && ("center" === a ? x = (t.left + t.right) / 2 - u : (0, _helpersSegment.i)(a) && (n = a[d = Object.keys(a)[0]], x = this.chart.scales[d].getPixelForValue(n)), _ = this._getYAxisLabelAlignment(i).textAlign), "y" === e && ("start" === l ? P = "top" : "end" === l && (P = "bottom"));

      var A = this._getLabelSizes();

      for (f = 0, m = o.length; f < m; ++f) {
        v = o[f].label;
        var w = s.setContext(this.getContext(f)),
            C = (y = this.getPixelForTick(f) + s.labelOffset, S = (k = this._resolveTickFontOptions(f)).lineHeight, (D = (0, _helpersSegment.b)(v) ? v.length : 1) / 2),
            O = w.color,
            L = w.textStrokeColor,
            T = w.textStrokeWidth;
        var _t25 = _;
        r ? (x = y, "inner" === _ && (_t25 = f === m - 1 ? this.options.reverse ? "left" : "right" : 0 === f ? this.options.reverse ? "right" : "left" : "center"), M = "top" === a ? "near" === h || 0 != g ? -D * S + S / 2 : "center" === h ? -A.highest.height / 2 - C * S + S : -A.highest.height + S / 2 : "near" === h || 0 != g ? S / 2 : "center" === h ? A.highest.height / 2 - C * S : A.highest.height - D * S, c && (M *= -1), 0 == g || w.showLabelBackdrop || (x += S / 2 * Math.sin(g))) : (b = y, M = (1 - D) * S / 2);

        var _i5 = void 0;

        if (w.showLabelBackdrop) {
          var C = (0, _helpersSegment.E)(w.backdropPadding),
              E = A.heights[f],
              I = A.widths[f];

          var _t26 = M - C.top,
              _e9 = 0 - C.left;

          switch (P) {
            case "middle":
              _t26 -= E / 2;
              break;

            case "bottom":
              _t26 -= E;
          }

          switch (_) {
            case "center":
              _e9 -= I / 2;
              break;

            case "right":
              _e9 -= I;
          }

          _i5 = {
            left: _e9,
            top: _t26,
            width: I + C.width,
            height: E + C.height,
            color: w.backdropColor
          };
        }

        p.push({
          label: v,
          font: k,
          textOffset: M,
          options: {
            rotation: g,
            color: O,
            strokeColor: L,
            strokeWidth: T,
            textAlign: _t25,
            textBaseline: P,
            translation: [x, b],
            backdrop: _i5
          }
        });
      }

      return p;
    }
  }, {
    key: "_getXAxisLabelAlignment",
    value: function _getXAxisLabelAlignment() {
      var _this$options8 = this.options,
          t = _this$options8.position,
          e = _this$options8.ticks;
      if (-(0, _helpersSegment.t)(this.labelRotation)) return "top" === t ? "left" : "right";
      var i = "center";
      return "start" === e.align ? i = "left" : "end" === e.align ? i = "right" : "inner" === e.align && (i = "inner"), i;
    }
  }, {
    key: "_getYAxisLabelAlignment",
    value: function _getYAxisLabelAlignment(t) {
      var _this$options9 = this.options,
          e = _this$options9.position,
          _this$options9$ticks = _this$options9.ticks,
          i = _this$options9$ticks.crossAlign,
          a = _this$options9$ticks.mirror,
          s = _this$options9$ticks.padding,
          t = t + s,
          n = this._getLabelSizes().widest.width;

      var r, o;
      return "left" === e ? a ? (o = this.right + s, "near" === i ? r = "left" : "center" === i ? (r = "center", o += n / 2) : (r = "right", o += n)) : (o = this.right - t, "near" === i ? r = "right" : "center" === i ? (r = "center", o -= n / 2) : (r = "left", o = this.left)) : "right" === e ? a ? (o = this.left + s, "near" === i ? r = "right" : "center" === i ? (r = "center", o -= n / 2) : (r = "left", o -= n)) : (o = this.left + t, "near" === i ? r = "left" : "center" === i ? (r = "center", o += n / 2) : (r = "right", o = this.right)) : r = "right", {
        textAlign: r,
        x: o
      };
    }
  }, {
    key: "_computeLabelArea",
    value: function _computeLabelArea() {
      var t, e;
      if (!this.options.ticks.mirror) return t = this.chart, e = this.options.position, "left" === e || "right" === e ? {
        top: 0,
        left: this.left,
        bottom: t.height,
        right: this.right
      } : "top" === e || "bottom" === e ? {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: t.width
      } : void 0;
    }
  }, {
    key: "drawBackground",
    value: function drawBackground() {
      var t = this.ctx,
          e = this.options.backgroundColor,
          i = this.left,
          a = this.top,
          s = this.width,
          n = this.height;
      e && (t.save(), t.fillStyle = e, t.fillRect(i, a, s, n), t.restore());
    }
  }, {
    key: "getLineWidthForValue",
    value: function getLineWidthForValue(e) {
      var t = this.options.grid;
      if (!this._isVisible() || !t.display) return 0;
      var i = this.ticks;
      var a = i.findIndex(function (t) {
        return t.value === e;
      });
      return 0 <= a ? t.setContext(this.getContext(a)).lineWidth : 0;
    }
  }, {
    key: "drawGrid",
    value: function drawGrid(t) {
      var e = this.options.grid;
      var a = this.ctx;

      var i = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(t));

      var s, n;

      var r = function r(t, e, i) {
        i.width && i.color && (a.save(), a.lineWidth = i.width, a.strokeStyle = i.color, a.setLineDash(i.borderDash || []), a.lineDashOffset = i.borderDashOffset, a.beginPath(), a.moveTo(t.x, t.y), a.lineTo(e.x, e.y), a.stroke(), a.restore());
      };

      if (e.display) for (s = 0, n = i.length; s < n; ++s) {
        var o = i[s];
        e.drawOnChartArea && r({
          x: o.x1,
          y: o.y1
        }, {
          x: o.x2,
          y: o.y2
        }, o), e.drawTicks && r({
          x: o.tx1,
          y: o.ty1
        }, {
          x: o.tx2,
          y: o.ty2
        }, {
          color: o.tickColor,
          width: o.tickWidth,
          borderDash: o.tickBorderDash,
          borderDashOffset: o.tickBorderDashOffset
        });
      }
    }
  }, {
    key: "drawBorder",
    value: function drawBorder() {
      var s = this.chart,
          n = this.ctx,
          _this$options10 = this.options,
          t = _this$options10.border,
          r = _this$options10.grid;
      var o = t.setContext(this.getContext()),
          l = t.display ? o.width : 0;

      if (l) {
        var h = r.setContext(this.getContext(0)).lineWidth,
            d = this._borderValue;

        var _t27, e, i, a;

        this.isHorizontal() ? (_t27 = (0, _helpersSegment.X)(s, this.left, l) - l / 2, e = (0, _helpersSegment.X)(s, this.right, h) + h / 2, i = a = d) : (i = (0, _helpersSegment.X)(s, this.top, l) - l / 2, a = (0, _helpersSegment.X)(s, this.bottom, h) + h / 2, _t27 = e = d), n.save(), n.lineWidth = o.width, n.strokeStyle = o.color, n.beginPath(), n.moveTo(_t27, i), n.lineTo(e, a), n.stroke(), n.restore();
      }
    }
  }, {
    key: "drawLabels",
    value: function drawLabels(t) {
      if (this.options.ticks.display) {
        var e = this.ctx,
            i = this._computeLabelArea(),
            t = (i && (0, _helpersSegment.Y)(e, i), this.getLabelItems(t));

        var _iterator11 = _createForOfIteratorHelper(t),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var o = _step11.value;
            var a = o.options,
                s = o.font,
                n = o.label,
                r = o.textOffset;
            (0, _helpersSegment.Z)(e, n, 0, r, s, a);
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }

        i && (0, _helpersSegment.$)(e);
      }
    }
  }, {
    key: "drawTitle",
    value: function drawTitle() {
      var e = this.ctx,
          _this$options11 = this.options,
          i = _this$options11.position,
          a = _this$options11.title,
          s = _this$options11.reverse;

      if (a.display) {
        var n = (0, _helpersSegment.a0)(a.font),
            r = (0, _helpersSegment.E)(a.padding),
            o = a.align;
        var t = n.lineHeight / 2;
        "bottom" === i || "center" === i || (0, _helpersSegment.i)(i) ? (t += r.bottom, (0, _helpersSegment.b)(a.text) && (t += n.lineHeight * (a.text.length - 1))) : t += r.top;

        var _titleArgs = titleArgs(this, t, i, o),
            r = _titleArgs.titleX,
            l = _titleArgs.titleY,
            h = _titleArgs.maxWidth,
            d = _titleArgs.rotation;

        (0, _helpersSegment.Z)(e, a.text, 0, 0, n, {
          color: a.color,
          maxWidth: h,
          rotation: d,
          textAlign: titleAlign(o, i, s),
          textBaseline: "middle",
          translation: [r, l]
        });
      }
    }
  }, {
    key: "draw",
    value: function draw(t) {
      this._isVisible() && (this.drawBackground(), this.drawGrid(t), this.drawBorder(), this.drawTitle(), this.drawLabels(t));
    }
  }, {
    key: "_layers",
    value: function _layers() {
      var _this10 = this;

      var t = this.options,
          e = t.ticks && t.ticks.z || 0,
          i = (0, _helpersSegment.v)(t.grid && t.grid.z, -1),
          t = (0, _helpersSegment.v)(t.border && t.border.z, 0);
      return this._isVisible() && this.draw === Scale.prototype.draw ? [{
        z: i,
        draw: function draw(t) {
          _this10.drawBackground(), _this10.drawGrid(t), _this10.drawTitle();
        }
      }, {
        z: t,
        draw: function draw() {
          _this10.drawBorder();
        }
      }, {
        z: e,
        draw: function draw(t) {
          _this10.drawLabels(t);
        }
      }] : [{
        z: e,
        draw: function draw(t) {
          _this10.draw(t);
        }
      }];
    }
  }, {
    key: "getMatchingVisibleMetas",
    value: function getMatchingVisibleMetas(t) {
      var e = this.chart.getSortedVisibleDatasetMetas(),
          i = this.axis + "AxisID";
      var a = [];
      var s, n;

      for (s = 0, n = e.length; s < n; ++s) {
        var r = e[s];
        r[i] !== this.id || t && r.type !== t || a.push(r);
      }

      return a;
    }
  }, {
    key: "_resolveTickFontOptions",
    value: function _resolveTickFontOptions(t) {
      t = this.options.ticks.setContext(this.getContext(t));
      return (0, _helpersSegment.a0)(t.font);
    }
  }, {
    key: "_maxDigits",
    value: function _maxDigits() {
      var t = this._resolveTickFontOptions(0).lineHeight;

      return (this.isHorizontal() ? this.width : this.height) / t;
    }
  }]);

  return Scale;
}(Element);

exports.Scale = Scale;

var TypedRegistry = /*#__PURE__*/function () {
  function TypedRegistry(t, e, i) {
    _classCallCheck(this, TypedRegistry);

    this.type = t, this.scope = e, this.override = i, this.items = Object.create(null);
  }

  _createClass(TypedRegistry, [{
    key: "isForType",
    value: function isForType(t) {
      return Object.prototype.isPrototypeOf.call(this.type.prototype, t.prototype);
    }
  }, {
    key: "register",
    value: function register(t) {
      var e = Object.getPrototypeOf(t);
      var i;
      isIChartComponent(e) && (i = this.register(e));
      var a = this.items;
      var e = t.id,
          s = this.scope + "." + e;
      if (e) return e in a || (registerDefaults(a[e] = t, s, i), this.override && _helpersSegment.d.override(t.id, t.overrides)), s;
      throw new Error("class does not have id: " + t);
    }
  }, {
    key: "get",
    value: function get(t) {
      return this.items[t];
    }
  }, {
    key: "unregister",
    value: function unregister(t) {
      var e = this.items;
      var t = t.id,
          i = this.scope;
      t in e && delete e[t], i && t in _helpersSegment.d[i] && (delete _helpersSegment.d[i][t], this.override && delete _helpersSegment.a3[t]);
    }
  }]);

  return TypedRegistry;
}();

function registerDefaults(t, e, i) {
  i = (0, _helpersSegment.a4)(Object.create(null), [i ? _helpersSegment.d.get(i) : {}, _helpersSegment.d.get(e), t.defaults]);
  _helpersSegment.d.set(e, i), t.defaultRoutes && routeDefaults(e, t.defaultRoutes), t.descriptors && _helpersSegment.d.describe(e, t.descriptors);
}

function routeDefaults(r, o) {
  Object.keys(o).forEach(function (t) {
    var e = t.split(".");
    var i = e.pop(),
        a = [r].concat(e).join(".");
    var s = o[t].split(".");
    var t = s.pop(),
        n = s.join(".");

    _helpersSegment.d.route(a, i, n, t);
  });
}

function isIChartComponent(t) {
  return "id" in t && "defaults" in t;
}

var Registry = /*#__PURE__*/function () {
  function Registry() {
    _classCallCheck(this, Registry);

    this.controllers = new TypedRegistry(DatasetController, "datasets", !0), this.elements = new TypedRegistry(Element, "elements"), this.plugins = new TypedRegistry(Object, "plugins"), this.scales = new TypedRegistry(Scale, "scales"), this._typedRegistries = [this.controllers, this.scales, this.elements];
  }

  _createClass(Registry, [{
    key: "add",
    value: function add() {
      for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {
        t[_key] = arguments[_key];
      }

      this._each("register", t);
    }
  }, {
    key: "remove",
    value: function remove() {
      for (var _len2 = arguments.length, t = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        t[_key2] = arguments[_key2];
      }

      this._each("unregister", t);
    }
  }, {
    key: "addControllers",
    value: function addControllers() {
      for (var _len3 = arguments.length, t = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        t[_key3] = arguments[_key3];
      }

      this._each("register", t, this.controllers);
    }
  }, {
    key: "addElements",
    value: function addElements() {
      for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        t[_key4] = arguments[_key4];
      }

      this._each("register", t, this.elements);
    }
  }, {
    key: "addPlugins",
    value: function addPlugins() {
      for (var _len5 = arguments.length, t = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        t[_key5] = arguments[_key5];
      }

      this._each("register", t, this.plugins);
    }
  }, {
    key: "addScales",
    value: function addScales() {
      for (var _len6 = arguments.length, t = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        t[_key6] = arguments[_key6];
      }

      this._each("register", t, this.scales);
    }
  }, {
    key: "getController",
    value: function getController(t) {
      return this._get(t, this.controllers, "controller");
    }
  }, {
    key: "getElement",
    value: function getElement(t) {
      return this._get(t, this.elements, "element");
    }
  }, {
    key: "getPlugin",
    value: function getPlugin(t) {
      return this._get(t, this.plugins, "plugin");
    }
  }, {
    key: "getScale",
    value: function getScale(t) {
      return this._get(t, this.scales, "scale");
    }
  }, {
    key: "removeControllers",
    value: function removeControllers() {
      for (var _len7 = arguments.length, t = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        t[_key7] = arguments[_key7];
      }

      this._each("unregister", t, this.controllers);
    }
  }, {
    key: "removeElements",
    value: function removeElements() {
      for (var _len8 = arguments.length, t = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        t[_key8] = arguments[_key8];
      }

      this._each("unregister", t, this.elements);
    }
  }, {
    key: "removePlugins",
    value: function removePlugins() {
      for (var _len9 = arguments.length, t = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        t[_key9] = arguments[_key9];
      }

      this._each("unregister", t, this.plugins);
    }
  }, {
    key: "removeScales",
    value: function removeScales() {
      for (var _len10 = arguments.length, t = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        t[_key10] = arguments[_key10];
      }

      this._each("unregister", t, this.scales);
    }
  }, {
    key: "_each",
    value: function _each(i, t, a) {
      var _this11 = this;

      _toConsumableArray(t).forEach(function (t) {
        var e = a || _this11._getRegistryForType(t);

        a || e.isForType(t) || e === _this11.plugins && t.id ? _this11._exec(i, e, t) : (0, _helpersSegment.F)(t, function (t) {
          var e = a || _this11._getRegistryForType(t);

          _this11._exec(i, e, t);
        });
      });
    }
  }, {
    key: "_exec",
    value: function _exec(t, e, i) {
      var a = (0, _helpersSegment.a5)(t);
      (0, _helpersSegment.Q)(i["before" + a], [], i), e[t](i), (0, _helpersSegment.Q)(i["after" + a], [], i);
    }
  }, {
    key: "_getRegistryForType",
    value: function _getRegistryForType(e) {
      for (var t = 0; t < this._typedRegistries.length; t++) {
        var i = this._typedRegistries[t];
        if (i.isForType(e)) return i;
      }

      return this.plugins;
    }
  }, {
    key: "_get",
    value: function _get(t, e, i) {
      e = e.get(t);
      if (void 0 === e) throw new Error('"' + t + '" is not a registered ' + i + ".");
      return e;
    }
  }]);

  return Registry;
}();

var registry = new Registry();
exports.registry = registry;

var PluginService = /*#__PURE__*/function () {
  function PluginService() {
    _classCallCheck(this, PluginService);

    this._init = [];
  }

  _createClass(PluginService, [{
    key: "notify",
    value: function notify(t, e, i, a) {
      "beforeInit" === e && (this._init = this._createDescriptors(t, !0), this._notify(this._init, t, "install"));
      a = a ? this._descriptors(t).filter(a) : this._descriptors(t), i = this._notify(a, t, e, i);
      return "afterDestroy" === e && (this._notify(a, t, "stop"), this._notify(this._init, t, "uninstall")), i;
    }
  }, {
    key: "_notify",
    value: function _notify(t, e, i, a) {
      a = a || {};

      var _iterator12 = _createForOfIteratorHelper(t),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var o = _step12.value;
          var s = o.plugin,
              n = s[i],
              r = [e, a, o.options];
          if (!1 === (0, _helpersSegment.Q)(n, r, s) && a.cancelable) return !1;
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      return !0;
    }
  }, {
    key: "invalidate",
    value: function invalidate() {
      (0, _helpersSegment.k)(this._cache) || (this._oldCache = this._cache, this._cache = void 0);
    }
  }, {
    key: "_descriptors",
    value: function _descriptors(t) {
      if (this._cache) return this._cache;

      var e = this._cache = this._createDescriptors(t);

      return this._notifyStateChanges(t), e;
    }
  }, {
    key: "_createDescriptors",
    value: function _createDescriptors(t, e) {
      var i = t && t.config,
          a = (0, _helpersSegment.v)(i.options && i.options.plugins, {}),
          i = allPlugins(i);
      return !1 !== a || e ? createDescriptors(t, i, a, e) : [];
    }
  }, {
    key: "_notifyStateChanges",
    value: function _notifyStateChanges(t) {
      var e = this._oldCache || [],
          i = this._cache,
          a = function a(t, i) {
        return t.filter(function (e) {
          return !i.some(function (t) {
            return e.plugin.id === t.plugin.id;
          });
        });
      };

      this._notify(a(e, i), t, "stop"), this._notify(a(i, e), t, "start");
    }
  }]);

  return PluginService;
}();

function allPlugins(t) {
  var e = {},
      i = [];
  var a = Object.keys(registry.plugins.items);

  for (var _t28 = 0; _t28 < a.length; _t28++) {
    i.push(registry.getPlugin(a[_t28]));
  }

  var s = t.plugins || [];

  for (var _t29 = 0; _t29 < s.length; _t29++) {
    var n = s[_t29];
    -1 === i.indexOf(n) && (i.push(n), e[n.id] = !0);
  }

  return {
    plugins: i,
    localIds: e
  };
}

function getOpts(t, e) {
  return e || !1 !== t ? !0 === t ? {} : t : null;
}

function createDescriptors(t, _ref2, a, s) {
  var e = _ref2.plugins,
      i = _ref2.localIds;
  var n = [];
  var r = t.getContext();

  var _iterator13 = _createForOfIteratorHelper(e),
      _step13;

  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var h = _step13.value;
      var o = h.id,
          l = getOpts(a[o], s);
      null !== l && n.push({
        plugin: h,
        options: pluginOpts(t.config, {
          plugin: h,
          local: i[o]
        }, l, r)
      });
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }

  return n;
}

function pluginOpts(t, _ref3, a, s) {
  var e = _ref3.plugin,
      i = _ref3.local;
  var n = t.pluginScopeKeys(e);
  var r = t.getOptionScopes(a, n);
  return i && e.defaults && r.push(e.defaults), t.createResolver(r, s, [""], {
    scriptable: !1,
    indexable: !1,
    allKeys: !0
  });
}

function getIndexAxis(t, e) {
  var i = _helpersSegment.d.datasets[t] || {};
  return ((e.datasets || {})[t] || {}).indexAxis || e.indexAxis || i.indexAxis || "x";
}

function getAxisFromDefaultScaleID(t, e) {
  var i = t;
  return "_index_" === t ? i = e : "_value_" === t && (i = "x" === e ? "y" : "x"), i;
}

function getDefaultScaleIDFromAxis(t, e) {
  return t === e ? "_index_" : "_value_";
}

function idMatchesAxis(t) {
  if ("x" === t || "y" === t || "r" === t) return t;
}

function axisFromPosition(t) {
  return "top" === t || "bottom" === t ? "x" : "left" === t || "right" === t ? "y" : void 0;
}

function determineAxis(t) {
  if (idMatchesAxis(t)) return t;

  for (var _len11 = arguments.length, e = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
    e[_key11 - 1] = arguments[_key11];
  }

  for (var _i6 = 0, _e10 = e; _i6 < _e10.length; _i6++) {
    var a = _e10[_i6];
    var i = a.axis || axisFromPosition(a.position) || 1 < t.length && idMatchesAxis(t[0].toLowerCase());
    if (i) return i;
  }

  throw new Error("Cannot determine type of '".concat(t, "' axis. Please provide 'axis' or 'position' option."));
}

function getAxisFromDataset(t, e, i) {
  if (i[e + "AxisID"] === t) return {
    axis: e
  };
}

function retrieveAxisFromDatasets(e, t) {
  if (t.data && t.data.datasets) {
    t = t.data.datasets.filter(function (t) {
      return t.xAxisID === e || t.yAxisID === e;
    });
    if (t.length) return getAxisFromDataset(e, "x", t[0]) || getAxisFromDataset(e, "y", t[0]);
  }

  return {};
}

function mergeScaleConfig(r, e) {
  var n = _helpersSegment.a3[r.type] || {
    scales: {}
  },
      o = e.scales || {},
      l = getIndexAxis(r.type, e),
      h = Object.create(null);
  return Object.keys(o).forEach(function (t) {
    var e = o[t];
    if (!(0, _helpersSegment.i)(e)) return console.error("Invalid scale configuration for scale: " + t);
    if (e._proxy) return console.warn("Ignoring resolver passed as options for scale: " + t);
    var i = determineAxis(t, e, retrieveAxisFromDatasets(t, r), _helpersSegment.d.scales[e.type]),
        a = getDefaultScaleIDFromAxis(i, l),
        s = n.scales || {};
    h[t] = (0, _helpersSegment.ab)(Object.create(null), [{
      axis: i
    }, e, s[i], s[a]]);
  }), r.data.datasets.forEach(function (a) {
    var t = a.type || r.type;
    var s = a.indexAxis || getIndexAxis(t, e),
        n = (_helpersSegment.a3[t] || {}).scales || {};
    Object.keys(n).forEach(function (t) {
      var e = getAxisFromDefaultScaleID(t, s),
          i = a[e + "AxisID"] || e;
      h[i] = h[i] || Object.create(null), (0, _helpersSegment.ab)(h[i], [{
        axis: e
      }, o[i], n[t]]);
    });
  }), Object.keys(h).forEach(function (t) {
    t = h[t];
    (0, _helpersSegment.ab)(t, [_helpersSegment.d.scales[t.type], _helpersSegment.d.scale]);
  }), h;
}

function initOptions(t) {
  var e = t.options || (t.options = {});
  e.plugins = (0, _helpersSegment.v)(e.plugins, {}), e.scales = mergeScaleConfig(t, e);
}

function initData(t) {
  return (t = t || {}).datasets = t.datasets || [], t.labels = t.labels || [], t;
}

function initConfig(t) {
  return (t = t || {}).data = initData(t.data), initOptions(t), t;
}

var keyCache = new Map(),
    keysCached = new Set();

function cachedKeys(t, e) {
  var i = keyCache.get(t);
  return i || (i = e(), keyCache.set(t, i), keysCached.add(i)), i;
}

var addIfFound = function addIfFound(t, e, i) {
  e = (0, _helpersSegment.f)(e, i);
  void 0 !== e && t.add(e);
};

var Config = /*#__PURE__*/function () {
  function Config(t) {
    _classCallCheck(this, Config);

    this._config = initConfig(t), this._scopeCache = new Map(), this._resolverCache = new Map();
  }

  _createClass(Config, [{
    key: "platform",
    get: function get() {
      return this._config.platform;
    }
  }, {
    key: "type",
    get: function get() {
      return this._config.type;
    },
    set: function set(t) {
      this._config.type = t;
    }
  }, {
    key: "data",
    get: function get() {
      return this._config.data;
    },
    set: function set(t) {
      this._config.data = initData(t);
    }
  }, {
    key: "options",
    get: function get() {
      return this._config.options;
    },
    set: function set(t) {
      this._config.options = t;
    }
  }, {
    key: "plugins",
    get: function get() {
      return this._config.plugins;
    }
  }, {
    key: "update",
    value: function update() {
      var t = this._config;
      this.clearCache(), initOptions(t);
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      this._scopeCache.clear(), this._resolverCache.clear();
    }
  }, {
    key: "datasetScopeKeys",
    value: function datasetScopeKeys(t) {
      return cachedKeys(t, function () {
        return [["datasets." + t, ""]];
      });
    }
  }, {
    key: "datasetAnimationScopeKeys",
    value: function datasetAnimationScopeKeys(t, e) {
      return cachedKeys(t + ".transition." + e, function () {
        return [["datasets.".concat(t, ".transitions.") + e, "transitions." + e], ["datasets." + t, ""]];
      });
    }
  }, {
    key: "datasetElementScopeKeys",
    value: function datasetElementScopeKeys(t, e) {
      return cachedKeys(t + "-" + e, function () {
        return [["datasets.".concat(t, ".elements.") + e, "datasets." + t, "elements." + e, ""]];
      });
    }
  }, {
    key: "pluginScopeKeys",
    value: function pluginScopeKeys(t) {
      var e = t.id;
      return cachedKeys(this.type + "-plugin-" + e, function () {
        return [["plugins." + e].concat(_toConsumableArray(t.additionalOptionScopes || []))];
      });
    }
  }, {
    key: "_cachedScopes",
    value: function _cachedScopes(t, e) {
      var i = this._scopeCache;
      var a = i.get(t);
      return a && !e || (a = new Map(), i.set(t, a)), a;
    }
  }, {
    key: "getOptionScopes",
    value: function getOptionScopes(e, t, i) {
      var a = this.options,
          s = this.type,
          n = this._cachedScopes(e, i);

      i = n.get(t);
      if (i) return i;
      var r = new Set(),
          o = (t.forEach(function (t) {
        e && (r.add(e), t.forEach(function (t) {
          return addIfFound(r, e, t);
        })), t.forEach(function (t) {
          return addIfFound(r, a, t);
        }), t.forEach(function (t) {
          return addIfFound(r, _helpersSegment.a3[s] || {}, t);
        }), t.forEach(function (t) {
          return addIfFound(r, _helpersSegment.d, t);
        }), t.forEach(function (t) {
          return addIfFound(r, _helpersSegment.a6, t);
        });
      }), Array.from(r));
      return 0 === o.length && o.push(Object.create(null)), keysCached.has(t) && n.set(t, o), o;
    }
  }, {
    key: "chartOptionScopes",
    value: function chartOptionScopes() {
      var t = this.options,
          e = this.type;
      return [t, _helpersSegment.a3[e] || {}, _helpersSegment.d.datasets[e] || {}, {
        type: e
      }, _helpersSegment.d, _helpersSegment.a6];
    }
  }, {
    key: "resolveNamedOptions",
    value: function resolveNamedOptions(t, e, i) {
      var _this12 = this;

      var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [""];
      return function (a) {
        var s = {
          $shared: !0
        };

        var _getResolver = getResolver(_this12._resolverCache, t, a),
            a = _getResolver.resolver,
            n = _getResolver.subPrefixes;

        var r = a;
        needContext(a, e) && (s.$shared = !1, i = (0, _helpersSegment.a7)(i) ? i() : i, t = _this12.createResolver(t, i, n), r = (0, _helpersSegment.a8)(a, i, t));

        var _iterator14 = _createForOfIteratorHelper(e),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var o = _step14.value;
            s[o] = r[o];
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        return s;
      }(a);
    }
  }, {
    key: "createResolver",
    value: function createResolver(t, e) {
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [""];
      var a = arguments.length > 3 ? arguments[3] : undefined;
      t = getResolver(this._resolverCache, t, i).resolver;
      return (0, _helpersSegment.i)(e) ? (0, _helpersSegment.a8)(t, e, void 0, a) : t;
    }
  }]);

  return Config;
}();

function getResolver(t, e, i) {
  var a = t.get(e);
  a || (a = new Map(), t.set(e, a));
  t = i.join();
  var s = a.get(t);
  return s || (e = (0, _helpersSegment.a9)(e, i), s = {
    resolver: e,
    subPrefixes: i.filter(function (t) {
      return !t.toLowerCase().includes("hover");
    })
  }, a.set(t, s)), s;
}

var hasFunction = function hasFunction(i) {
  return (0, _helpersSegment.i)(i) && Object.getOwnPropertyNames(i).reduce(function (t, e) {
    return t || (0, _helpersSegment.a7)(i[e]);
  }, !1);
};

function needContext(t, e) {
  var _descriptors2 = (0, _helpersSegment.aa)(t),
      i = _descriptors2.isScriptable,
      a = _descriptors2.isIndexable;

  var _iterator15 = _createForOfIteratorHelper(e),
      _step15;

  try {
    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
      var o = _step15.value;
      var s = i(o),
          n = a(o),
          r = (n || s) && t[o];
      if (s && ((0, _helpersSegment.a7)(r) || hasFunction(r)) || n && (0, _helpersSegment.b)(r)) return !0;
    }
  } catch (err) {
    _iterator15.e(err);
  } finally {
    _iterator15.f();
  }

  return !1;
}

var version = "4.4.0";
var KNOWN_POSITIONS = ["top", "bottom", "left", "right", "chartArea"];

function positionIsHorizontal(t, e) {
  return "top" === t || "bottom" === t || -1 === KNOWN_POSITIONS.indexOf(t) && "x" === e;
}

function compare2Level(i, a) {
  return function (t, e) {
    return t[i] === e[i] ? t[a] - e[a] : t[i] - e[i];
  };
}

function onAnimationsComplete(t) {
  var e = t.chart;
  var i = e.options.animation;
  e.notifyPlugins("afterRender"), (0, _helpersSegment.Q)(i && i.onComplete, [t], e);
}

function onAnimationProgress(t) {
  var e = t.chart,
      i = e.options.animation;
  (0, _helpersSegment.Q)(i && i.onProgress, [t], e);
}

function getCanvas(t) {
  return (0, _helpersSegment.M)() && "string" == typeof t ? t = document.getElementById(t) : t && t.length && (t = t[0]), t = t && t.canvas ? t.canvas : t;
}

var instances = {},
    getChart = function getChart(t) {
  var e = getCanvas(t);
  return Object.values(instances).filter(function (t) {
    return t.canvas === e;
  }).pop();
};

function moveNumericKeys(t, e, i) {
  for (var _i7 = 0, _Object$keys = Object.keys(t); _i7 < _Object$keys.length; _i7++) {
    var n = _Object$keys[_i7];
    var a,
        s = +n;
    e <= s && (a = t[n], delete t[n], (0 < i || e < s) && (t[s + i] = a));
  }
}

function determineLastEvent(t, e, i, a) {
  return i && "mouseout" !== t.type ? a ? e : t : null;
}

function getSizeForArea(t, e, i) {
  return (t.options.clip ? t : e)[i];
}

function getDatasetArea(t, e) {
  var _t30 = t,
      t = _t30.xScale,
      i = _t30.yScale;
  return t && i ? {
    left: getSizeForArea(t, e, "left"),
    right: getSizeForArea(t, e, "right"),
    top: getSizeForArea(i, e, "top"),
    bottom: getSizeForArea(i, e, "bottom")
  } : e;
}

var Chart = /*#__PURE__*/function () {
  function Chart(t, e) {
    var _this13 = this;

    _classCallCheck(this, Chart);

    var i = this.config = new Config(e);
    e = getCanvas(t), t = getChart(e);
    if (t) throw new Error("Canvas is already in use. Chart with ID '" + t.id + "' must be destroyed before the canvas with ID '" + t.canvas.id + "' can be reused.");
    var t = i.createResolver(i.chartOptionScopes(), this.getContext()),
        e = (this.platform = new (i.platform || _detectPlatform(e))(), this.platform.updateConfig(i), this.platform.acquireContext(e, t.aspectRatio)),
        a = e && e.canvas,
        s = a && a.height,
        n = a && a.width;
    this.id = (0, _helpersSegment.ac)(), this.ctx = e, this.canvas = a, this.width = n, this.height = s, this._options = t, this._aspectRatio = this.aspectRatio, this._layers = [], this._metasets = [], this._stacks = void 0, this.boxes = [], this.currentDevicePixelRatio = void 0, this.chartArea = void 0, this._active = [], this._lastEvent = void 0, this._listeners = {}, this._responsiveListeners = void 0, this._sortedMetasets = [], this.scales = {}, this._plugins = new PluginService(), this.$proxies = {}, this._hiddenIndices = {}, this.attached = !1, this._animationsDisabled = void 0, this.$context = void 0, this._doResize = (0, _helpersSegment.ad)(function (t) {
      return _this13.update(t);
    }, t.resizeDelay || 0), this._dataChanges = [], instances[this.id] = this, e && a ? (animator.listen(this, "complete", onAnimationsComplete), animator.listen(this, "progress", onAnimationProgress), this._initialize(), this.attached && this.update()) : console.error("Failed to create chart: can't acquire context from the given item");
  }

  _createClass(Chart, [{
    key: "aspectRatio",
    get: function get() {
      var _this$options12 = this.options,
          t = _this$options12.aspectRatio,
          e = _this$options12.maintainAspectRatio,
          i = this.width,
          a = this.height,
          s = this._aspectRatio;
      return (0, _helpersSegment.k)(t) ? e && s ? s : a ? i / a : null : t;
    }
  }, {
    key: "data",
    get: function get() {
      return this.config.data;
    },
    set: function set(t) {
      this.config.data = t;
    }
  }, {
    key: "options",
    get: function get() {
      return this._options;
    },
    set: function set(t) {
      this.config.options = t;
    }
  }, {
    key: "registry",
    get: function get() {
      return registry;
    }
  }, {
    key: "_initialize",
    value: function _initialize() {
      return this.notifyPlugins("beforeInit"), this.options.responsive ? this.resize() : (0, _helpersSegment.ae)(this, this.options.devicePixelRatio), this.bindEvents(), this.notifyPlugins("afterInit"), this;
    }
  }, {
    key: "clear",
    value: function clear() {
      return (0, _helpersSegment.af)(this.canvas, this.ctx), this;
    }
  }, {
    key: "stop",
    value: function stop() {
      return animator.stop(this), this;
    }
  }, {
    key: "resize",
    value: function resize(t, e) {
      animator.running(this) ? this._resizeBeforeDraw = {
        width: t,
        height: e
      } : this._resize(t, e);
    }
  }, {
    key: "_resize",
    value: function _resize(t, e) {
      var i = this.options,
          a = this.canvas,
          s = i.maintainAspectRatio && this.aspectRatio,
          a = this.platform.getMaximumSize(a, t, e, s),
          t = i.devicePixelRatio || this.platform.getDevicePixelRatio(),
          e = this.width ? "resize" : "attach";
      this.width = a.width, this.height = a.height, this._aspectRatio = this.aspectRatio, (0, _helpersSegment.ae)(this, t, !0) && (this.notifyPlugins("resize", {
        size: a
      }), (0, _helpersSegment.Q)(i.onResize, [this, a], this), this.attached && this._doResize(e) && this.render());
    }
  }, {
    key: "ensureScalesHaveIDs",
    value: function ensureScalesHaveIDs() {
      var t = this.options.scales || {};
      (0, _helpersSegment.F)(t, function (t, e) {
        t.id = e;
      });
    }
  }, {
    key: "buildOrUpdateScales",
    value: function buildOrUpdateScales() {
      var _this14 = this;

      var o = this.options,
          a = o.scales,
          l = this.scales,
          h = Object.keys(l).reduce(function (t, e) {
        return t[e] = !1, t;
      }, {});
      var t = [];
      a && (t = t.concat(Object.keys(a).map(function (t) {
        var e = a[t],
            t = determineAxis(t, e),
            i = "r" === t,
            t = "x" === t;
        return {
          options: e,
          dposition: i ? "chartArea" : t ? "bottom" : "left",
          dtype: i ? "radialLinear" : t ? "category" : "linear"
        };
      }))), (0, _helpersSegment.F)(t, function (t) {
        var e = t.options;
        var i = e.id,
            a = determineAxis(i, e),
            s = (0, _helpersSegment.v)(e.type, t.dtype);
        void 0 !== e.position && positionIsHorizontal(e.position, a) === positionIsHorizontal(t.dposition) || (e.position = t.dposition), h[i] = !0;
        var n = null;
        if (i in l && l[i].type === s) n = l[i];else {
          var r = registry.getScale(s);
          n = new r({
            id: i,
            type: s,
            ctx: _this14.ctx,
            chart: _this14
          }), l[n.id] = n;
        }
        n.init(e, o);
      }), (0, _helpersSegment.F)(h, function (t, e) {
        t || delete l[e];
      }), (0, _helpersSegment.F)(l, function (t) {
        layouts.configure(_this14, t, t.options), layouts.addBox(_this14, t);
      });
    }
  }, {
    key: "_updateMetasets",
    value: function _updateMetasets() {
      var t = this._metasets;
      var e = this.data.datasets.length,
          i = t.length;

      if (t.sort(function (t, e) {
        return t.index - e.index;
      }), e < i) {
        for (var _t31 = e; _t31 < i; ++_t31) {
          this._destroyDatasetMeta(_t31);
        }

        t.splice(e, i - e);
      }

      this._sortedMetasets = t.slice(0).sort(compare2Level("order", "index"));
    }
  }, {
    key: "_removeUnreferencedMetasets",
    value: function _removeUnreferencedMetasets() {
      var _this15 = this;

      var t = this._metasets,
          i = this.data.datasets;
      t.length > i.length && delete this._stacks, t.forEach(function (e, t) {
        0 === i.filter(function (t) {
          return t === e._dataset;
        }).length && _this15._destroyDatasetMeta(t);
      });
    }
  }, {
    key: "buildOrUpdateControllers",
    value: function buildOrUpdateControllers() {
      var e = [];
      var i = this.data.datasets;
      var a, t;

      for (this._removeUnreferencedMetasets(), a = 0, t = i.length; a < t; a++) {
        var s = i[a];

        var _t32 = this.getDatasetMeta(a);

        var n = s.type || this.config.type;
        if (_t32.type && _t32.type !== n && (this._destroyDatasetMeta(a), _t32 = this.getDatasetMeta(a)), _t32.type = n, _t32.indexAxis = s.indexAxis || getIndexAxis(n, this.options), _t32.order = s.order || 0, _t32.index = a, _t32.label = "" + s.label, _t32.visible = this.isDatasetVisible(a), _t32.controller) _t32.controller.updateIndex(a), _t32.controller.linkScales();else {
          var r = registry.getController(n);
          var _defaults$datasets$n = _helpersSegment.d.datasets[n],
              s = _defaults$datasets$n.datasetElementType,
              n = _defaults$datasets$n.dataElementType;
          Object.assign(r, {
            dataElementType: registry.getElement(n),
            datasetElementType: s && registry.getElement(s)
          }), _t32.controller = new r(this, a), e.push(_t32.controller);
        }
      }

      return this._updateMetasets(), e;
    }
  }, {
    key: "_resetElements",
    value: function _resetElements() {
      var _this16 = this;

      (0, _helpersSegment.F)(this.data.datasets, function (t, e) {
        _this16.getDatasetMeta(e).controller.reset();
      }, this);
    }
  }, {
    key: "reset",
    value: function reset() {
      this._resetElements(), this.notifyPlugins("reset");
    }
  }, {
    key: "update",
    value: function update(t) {
      var e = this.config;
      e.update();
      var a = this._options = e.createResolver(e.chartOptionScopes(), this.getContext()),
          s = this._animationsDisabled = !a.animation;

      if (this._updateScales(), this._checkEventBindings(), this._updateHiddenIndices(), this._plugins.invalidate(), !1 !== this.notifyPlugins("beforeUpdate", {
        mode: t,
        cancelable: !0
      })) {
        var r = this.buildOrUpdateControllers();
        this.notifyPlugins("beforeElementsUpdate");
        var i = 0;

        for (var _t33 = 0, _e11 = this.data.datasets.length; _t33 < _e11; _t33++) {
          var o = this.getDatasetMeta(_t33)["controller"];
          var n = !s && -1 === r.indexOf(o);
          o.buildOrUpdateElements(n), i = Math.max(+o.getMaxOverflow(), i);
        }

        i = this._minPadding = a.layout.autoPadding ? i : 0, this._updateLayout(i), s || (0, _helpersSegment.F)(r, function (t) {
          t.reset();
        }), this._updateDatasets(t), this.notifyPlugins("afterUpdate", {
          mode: t
        }), this._layers.sort(compare2Level("z", "_idx"));
        var a = this._active,
            t = this._lastEvent;
        t ? this._eventHandler(t, !0) : a.length && this._updateHoverStyles(a, a, !0), this.render();
      }
    }
  }, {
    key: "_updateScales",
    value: function _updateScales() {
      var _this17 = this;

      (0, _helpersSegment.F)(this.scales, function (t) {
        layouts.removeBox(_this17, t);
      }), this.ensureScalesHaveIDs(), this.buildOrUpdateScales();
    }
  }, {
    key: "_checkEventBindings",
    value: function _checkEventBindings() {
      var t = this.options,
          e = new Set(Object.keys(this._listeners)),
          i = new Set(t.events);
      (0, _helpersSegment.ag)(e, i) && !!this._responsiveListeners === t.responsive || (this.unbindEvents(), this.bindEvents());
    }
  }, {
    key: "_updateHiddenIndices",
    value: function _updateHiddenIndices() {
      var t,
          e,
          i,
          a = this["_hiddenIndices"];

      var _iterator16 = _createForOfIteratorHelper(this._getUniformDataChanges() || []),
          _step16;

      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var _step16$value = _step16.value;
          t = _step16$value.method;
          e = _step16$value.start;
          i = _step16$value.count;
          var s = "_removeElements" === t ? -i : i;
          moveNumericKeys(a, e, s);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
    }
  }, {
    key: "_getUniformDataChanges",
    value: function _getUniformDataChanges() {
      var t = this._dataChanges;

      if (t && t.length) {
        this._dataChanges = [];

        var e = this.data.datasets.length,
            i = function i(e) {
          return new Set(t.filter(function (t) {
            return t[0] === e;
          }).map(function (t, e) {
            return e + "," + t.splice(1).join(",");
          }));
        },
            a = i(0);

        for (var _t34 = 1; _t34 < e; _t34++) {
          if (!(0, _helpersSegment.ag)(a, i(_t34))) return;
        }

        return Array.from(a).map(function (t) {
          return t.split(",");
        }).map(function (t) {
          return {
            method: t[1],
            start: +t[2],
            count: +t[3]
          };
        });
      }
    }
  }, {
    key: "_updateLayout",
    value: function _updateLayout(t) {
      var _this18 = this;

      if (!1 !== this.notifyPlugins("beforeLayout", {
        cancelable: !0
      })) {
        layouts.update(this, this.width, this.height, t);
        t = this.chartArea;
        var e = t.width <= 0 || t.height <= 0;
        this._layers = [], (0, _helpersSegment.F)(this.boxes, function (t) {
          var _this18$_layers;

          e && "chartArea" === t.position || (t.configure && t.configure(), (_this18$_layers = _this18._layers).push.apply(_this18$_layers, _toConsumableArray(t._layers())));
        }, this), this._layers.forEach(function (t, e) {
          t._idx = e;
        }), this.notifyPlugins("afterLayout");
      }
    }
  }, {
    key: "_updateDatasets",
    value: function _updateDatasets(i) {
      if (!1 !== this.notifyPlugins("beforeDatasetsUpdate", {
        mode: i,
        cancelable: !0
      })) {
        for (var t = 0, e = this.data.datasets.length; t < e; ++t) {
          this.getDatasetMeta(t).controller.configure();
        }

        for (var _t35 = 0, _e12 = this.data.datasets.length; _t35 < _e12; ++_t35) {
          this._updateDataset(_t35, (0, _helpersSegment.a7)(i) ? i({
            datasetIndex: _t35
          }) : i);
        }

        this.notifyPlugins("afterDatasetsUpdate", {
          mode: i
        });
      }
    }
  }, {
    key: "_updateDataset",
    value: function _updateDataset(t, e) {
      var i = this.getDatasetMeta(t),
          a = {
        meta: i,
        index: t,
        mode: e,
        cancelable: !0
      };
      !1 !== this.notifyPlugins("beforeDatasetUpdate", a) && (i.controller._update(e), a.cancelable = !1, this.notifyPlugins("afterDatasetUpdate", a));
    }
  }, {
    key: "render",
    value: function render() {
      !1 !== this.notifyPlugins("beforeRender", {
        cancelable: !0
      }) && (animator.has(this) ? this.attached && !animator.running(this) && animator.start(this) : (this.draw(), onAnimationsComplete({
        chart: this
      })));
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this$_resizeBeforeDr;

      var t;
      var e, i;

      if (this._resizeBeforeDraw && ((_this$_resizeBeforeDr = this._resizeBeforeDraw, e = _this$_resizeBeforeDr.width, i = _this$_resizeBeforeDr.height, _this$_resizeBeforeDr), this._resize(e, i), this._resizeBeforeDraw = null), this.clear(), !(this.width <= 0 || this.height <= 0) && !1 !== this.notifyPlugins("beforeDraw", {
        cancelable: !0
      })) {
        var a = this._layers;

        for (t = 0; t < a.length && a[t].z <= 0; ++t) {
          a[t].draw(this.chartArea);
        }

        for (this._drawDatasets(); t < a.length; ++t) {
          a[t].draw(this.chartArea);
        }

        this.notifyPlugins("afterDraw");
      }
    }
  }, {
    key: "_getSortedDatasetMetas",
    value: function _getSortedDatasetMetas(t) {
      var e = this._sortedMetasets;
      var i = [];
      var a, s;

      for (a = 0, s = e.length; a < s; ++a) {
        var n = e[a];
        t && !n.visible || i.push(n);
      }

      return i;
    }
  }, {
    key: "getSortedVisibleDatasetMetas",
    value: function getSortedVisibleDatasetMetas() {
      return this._getSortedDatasetMetas(!0);
    }
  }, {
    key: "_drawDatasets",
    value: function _drawDatasets() {
      if (!1 !== this.notifyPlugins("beforeDatasetsDraw", {
        cancelable: !0
      })) {
        var e = this.getSortedVisibleDatasetMetas();

        for (var t = e.length - 1; 0 <= t; --t) {
          this._drawDataset(e[t]);
        }

        this.notifyPlugins("afterDatasetsDraw");
      }
    }
  }, {
    key: "_drawDataset",
    value: function _drawDataset(t) {
      var e = this.ctx,
          i = t._clip,
          a = !i.disabled,
          s = getDatasetArea(t, this.chartArea);
      var n = {
        meta: t,
        index: t.index,
        cancelable: !0
      };
      !1 !== this.notifyPlugins("beforeDatasetDraw", n) && (a && (0, _helpersSegment.Y)(e, {
        left: !1 === i.left ? 0 : s.left - i.left,
        right: !1 === i.right ? this.width : s.right + i.right,
        top: !1 === i.top ? 0 : s.top - i.top,
        bottom: !1 === i.bottom ? this.height : s.bottom + i.bottom
      }), t.controller.draw(), a && (0, _helpersSegment.$)(e), n.cancelable = !1, this.notifyPlugins("afterDatasetDraw", n));
    }
  }, {
    key: "isPointInArea",
    value: function isPointInArea(t) {
      return (0, _helpersSegment.C)(t, this.chartArea, this._minPadding);
    }
  }, {
    key: "getElementsAtEventForMode",
    value: function getElementsAtEventForMode(t, e, i, a) {
      var s = Interaction.modes[e];
      return "function" == typeof s ? s(this, t, i, a) : [];
    }
  }, {
    key: "getDatasetMeta",
    value: function getDatasetMeta(t) {
      var e = this.data.datasets[t],
          i = this._metasets;
      var a = i.filter(function (t) {
        return t && t._dataset === e;
      }).pop();
      return a || (a = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: e && e.order || 0,
        index: t,
        _dataset: e,
        _parsed: [],
        _sorted: !1
      }, i.push(a)), a;
    }
  }, {
    key: "getContext",
    value: function getContext() {
      return this.$context || (this.$context = (0, _helpersSegment.j)(null, {
        chart: this,
        type: "chart"
      }));
    }
  }, {
    key: "getVisibleDatasetCount",
    value: function getVisibleDatasetCount() {
      return this.getSortedVisibleDatasetMetas().length;
    }
  }, {
    key: "isDatasetVisible",
    value: function isDatasetVisible(t) {
      var e = this.data.datasets[t];
      if (!e) return !1;
      t = this.getDatasetMeta(t);
      return "boolean" == typeof t.hidden ? !t.hidden : !e.hidden;
    }
  }, {
    key: "setDatasetVisibility",
    value: function setDatasetVisibility(t, e) {
      var i = this.getDatasetMeta(t);
      i.hidden = !e;
    }
  }, {
    key: "toggleDataVisibility",
    value: function toggleDataVisibility(t) {
      this._hiddenIndices[t] = !this._hiddenIndices[t];
    }
  }, {
    key: "getDataVisibility",
    value: function getDataVisibility(t) {
      return !this._hiddenIndices[t];
    }
  }, {
    key: "_updateVisibility",
    value: function _updateVisibility(e, t, i) {
      var a = i ? "show" : "hide",
          s = this.getDatasetMeta(e),
          n = s.controller._resolveAnimations(void 0, a);

      (0, _helpersSegment.h)(t) ? (s.data[t].hidden = !i, this.update()) : (this.setDatasetVisibility(e, i), n.update(s, {
        visible: i
      }), this.update(function (t) {
        return t.datasetIndex === e ? a : void 0;
      }));
    }
  }, {
    key: "hide",
    value: function hide(t, e) {
      this._updateVisibility(t, e, !1);
    }
  }, {
    key: "show",
    value: function show(t, e) {
      this._updateVisibility(t, e, !0);
    }
  }, {
    key: "_destroyDatasetMeta",
    value: function _destroyDatasetMeta(t) {
      var e = this._metasets[t];
      e && e.controller && e.controller._destroy(), delete this._metasets[t];
    }
  }, {
    key: "_stop",
    value: function _stop() {
      var t, e;

      for (this.stop(), animator.remove(this), t = 0, e = this.data.datasets.length; t < e; ++t) {
        this._destroyDatasetMeta(t);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.notifyPlugins("beforeDestroy");
      var t = this.canvas,
          e = this.ctx;
      this._stop(), this.config.clearCache(), t && (this.unbindEvents(), (0, _helpersSegment.af)(t, e), this.platform.releaseContext(e), this.canvas = null, this.ctx = null), delete instances[this.id], this.notifyPlugins("afterDestroy");
    }
  }, {
    key: "toBase64Image",
    value: function toBase64Image() {
      var _this$canvas;

      return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : this.attached = !0;
    }
  }, {
    key: "bindUserEvents",
    value: function bindUserEvents() {
      var _this19 = this;

      var i = this._listeners,
          a = this.platform,
          e = function e(t, _e13) {
        a.addEventListener(_this19, t, _e13), i[t] = _e13;
      },
          s = function s(t, e, i) {
        t.offsetX = e, t.offsetY = i, _this19._eventHandler(t);
      };

      (0, _helpersSegment.F)(this.options.events, function (t) {
        return e(t, s);
      });
    }
  }, {
    key: "bindResponsiveEvents",
    value: function bindResponsiveEvents() {
      var _this20 = this;

      this._responsiveListeners || (this._responsiveListeners = {});

      var i = this._responsiveListeners,
          a = this.platform,
          t = function t(_t36, e) {
        a.addEventListener(_this20, _t36, e), i[_t36] = e;
      },
          e = function e(t, _e14) {
        i[t] && (a.removeEventListener(_this20, t, _e14), delete i[t]);
      },
          s = function s(t, e) {
        _this20.canvas && _this20.resize(t, e);
      };

      var n;

      var r = function r() {
        e("attach", r), _this20.attached = !0, _this20.resize(), t("resize", s), t("detach", n);
      };

      n = function n() {
        _this20.attached = !1, e("resize", s), _this20._stop(), _this20._resize(0, 0), t("attach", r);
      }, (a.isAttached(this.canvas) ? r : n)();
    }
  }, {
    key: "unbindEvents",
    value: function unbindEvents() {
      var _this21 = this;

      (0, _helpersSegment.F)(this._listeners, function (t, e) {
        _this21.platform.removeEventListener(_this21, e, t);
      }), this._listeners = {}, (0, _helpersSegment.F)(this._responsiveListeners, function (t, e) {
        _this21.platform.removeEventListener(_this21, e, t);
      }), this._responsiveListeners = void 0;
    }
  }, {
    key: "updateHoverStyle",
    value: function updateHoverStyle(t, e, i) {
      var a = i ? "set" : "remove";
      var s, n, r, o;

      for ("dataset" === e && (s = this.getDatasetMeta(t[0].datasetIndex)).controller["_" + a + "DatasetHoverStyle"](), r = 0, o = t.length; r < o; ++r) {
        var l = (n = t[r]) && this.getDatasetMeta(n.datasetIndex).controller;
        l && l[a + "HoverStyle"](n.element, n.datasetIndex, n.index);
      }
    }
  }, {
    key: "getActiveElements",
    value: function getActiveElements() {
      return this._active || [];
    }
  }, {
    key: "setActiveElements",
    value: function setActiveElements(t) {
      var _this22 = this;

      var e = this._active || [],
          t = t.map(function (_ref4) {
        var t = _ref4.datasetIndex,
            e = _ref4.index;

        var i = _this22.getDatasetMeta(t);

        if (i) return {
          datasetIndex: t,
          element: i.data[e],
          index: e
        };
        throw new Error("No dataset found at index " + t);
      });
      (0, _helpersSegment.ah)(t, e) || (this._active = t, this._lastEvent = null, this._updateHoverStyles(t, e));
    }
  }, {
    key: "notifyPlugins",
    value: function notifyPlugins(t, e, i) {
      return this._plugins.notify(this, t, e, i);
    }
  }, {
    key: "isPluginEnabled",
    value: function isPluginEnabled(e) {
      return 1 === this._plugins._cache.filter(function (t) {
        return t.plugin.id === e;
      }).length;
    }
  }, {
    key: "_updateHoverStyles",
    value: function _updateHoverStyles(t, e, i) {
      var a = this.options.hover,
          s = function s(t, i) {
        return t.filter(function (e) {
          return !i.some(function (t) {
            return e.datasetIndex === t.datasetIndex && e.index === t.index;
          });
        });
      },
          n = s(e, t),
          i = i ? t : s(t, e);

      n.length && this.updateHoverStyle(n, a.mode, !1), i.length && a.mode && this.updateHoverStyle(i, a.mode, !0);
    }
  }, {
    key: "_eventHandler",
    value: function _eventHandler(e, t) {
      var _this23 = this;

      var i = {
        event: e,
        replay: t,
        cancelable: !0,
        inChartArea: this.isPointInArea(e)
      };

      var a = function a(t) {
        return (t.options.events || _this23.options.events).includes(e["native"].type);
      };

      if (!1 !== this.notifyPlugins("beforeEvent", i, a)) return t = this._handleEvent(e, t, i.inChartArea), i.cancelable = !1, this.notifyPlugins("afterEvent", i, a), (t || i.changed) && this.render(), this;
    }
  }, {
    key: "_handleEvent",
    value: function _handleEvent(t, e, i) {
      var _this$_active = this._active,
          a = _this$_active === void 0 ? [] : _this$_active,
          s = this.options,
          n = this._getActiveElements(t, a, i, e),
          r = (0, _helpersSegment.ai)(t),
          o = determineLastEvent(t, this._lastEvent, i, r),
          i = (i && (this._lastEvent = null, (0, _helpersSegment.Q)(s.onHover, [t, n, this], this), r && (0, _helpersSegment.Q)(s.onClick, [t, n, this], this)), !(0, _helpersSegment.ah)(n, a));

      return (i || e) && (this._active = n, this._updateHoverStyles(n, a, e)), this._lastEvent = o, i;
    }
  }, {
    key: "_getActiveElements",
    value: function _getActiveElements(t, e, i, a) {
      if ("mouseout" === t.type) return [];
      if (!i) return e;
      i = this.options.hover;
      return this.getElementsAtEventForMode(t, i.mode, i, a);
    }
  }], [{
    key: "register",
    value: function register() {
      registry.add.apply(registry, arguments), invalidatePlugins();
    }
  }, {
    key: "unregister",
    value: function unregister() {
      registry.remove.apply(registry, arguments), invalidatePlugins();
    }
  }]);

  return Chart;
}();

exports.Chart = Chart;

_defineProperty(Chart, "defaults", _helpersSegment.d);

_defineProperty(Chart, "instances", instances);

_defineProperty(Chart, "overrides", _helpersSegment.a3);

_defineProperty(Chart, "registry", registry);

_defineProperty(Chart, "version", version);

_defineProperty(Chart, "getChart", getChart);

function invalidatePlugins() {
  return (0, _helpersSegment.F)(Chart.instances, function (t) {
    return t._plugins.invalidate();
  });
}

function clipArc(t, e, i) {
  var _e15 = e,
      e = _e15.startAngle,
      a = _e15.pixelMargin,
      s = _e15.x,
      n = _e15.y,
      r = _e15.outerRadius,
      o = _e15.innerRadius,
      l = a / r;
  t.beginPath(), t.arc(s, n, r, e - l, i + l), a < o ? t.arc(s, n, o, i + (l = a / o), e - l, !0) : t.arc(s, n, a, i + _helpersSegment.H, e - _helpersSegment.H), t.closePath(), t.clip();
}

function toRadiusCorners(t) {
  return (0, _helpersSegment.ak)(t, ["outerStart", "outerEnd", "innerStart", "innerEnd"]);
}

function parseBorderRadius$1(t, e, i, a) {
  t = toRadiusCorners(t.options.borderRadius);
  var s = (i - e) / 2;

  var e = Math.min(s, a * e / 2),
      n = function n(t) {
    var e = (i - Math.min(s, t)) * a / 2;
    return (0, _helpersSegment.S)(t, 0, Math.min(s, e));
  };

  return {
    outerStart: n(t.outerStart),
    outerEnd: n(t.outerEnd),
    innerStart: (0, _helpersSegment.S)(t.innerStart, 0, e),
    innerEnd: (0, _helpersSegment.S)(t.innerEnd, 0, e)
  };
}

function rThetaToXY(t, e, i, a) {
  return {
    x: i + t * Math.cos(e),
    y: a + t * Math.sin(e)
  };
}

function pathArc(t, e, i, a, s, n) {
  var _e16 = e,
      r = _e16.x,
      o = _e16.y,
      l = _e16.startAngle,
      h = _e16.pixelMargin,
      d = _e16.innerRadius,
      c = Math.max(e.outerRadius + a + i - h, 0),
      h = 0 < d ? d + a + i + h : 0;
  var u = 0;

  var g = s - l,
      d = (a && (d = ((0 < d ? d - a : 0) + (0 < c ? c - a : 0)) / 2, u = (g - (0 != d ? g * d / (d + a) : g)) / 2), Math.max(.001, g * c - i / _helpersSegment.P) / c),
      a = (g - d) / 2,
      i = l + a + u,
      g = s - a - u,
      _parseBorderRadius$ = parseBorderRadius$1(e, h, c, g - i),
      d = _parseBorderRadius$.outerStart,
      l = _parseBorderRadius$.outerEnd,
      s = _parseBorderRadius$.innerStart,
      a = _parseBorderRadius$.innerEnd,
      e = c - d,
      p = c - l,
      f = i + d / e,
      m = g - l / p,
      v = h + s,
      x = h + a,
      b = i + s / v,
      _ = g - a / x;

  t.beginPath(), n ? (t.arc(r, o, c, f, n = (f + m) / 2), t.arc(r, o, c, n, m), 0 < l && (n = rThetaToXY(p, m, r, o), t.arc(n.x, n.y, l, m, g + _helpersSegment.H)), p = rThetaToXY(x, g, r, o), t.lineTo(p.x, p.y), 0 < a && (n = rThetaToXY(x, _, r, o), t.arc(n.x, n.y, a, g + _helpersSegment.H, _ + Math.PI)), t.arc(r, o, h, g - a / h, l = (g - a / h + (i + s / h)) / 2, !0), t.arc(r, o, h, l, i + s / h, !0), 0 < s && (p = rThetaToXY(v, b, r, o), t.arc(p.x, p.y, s, b + Math.PI, i - _helpersSegment.H)), x = rThetaToXY(e, i, r, o), t.lineTo(x.x, x.y), 0 < d && (n = rThetaToXY(e, f, r, o), t.arc(n.x, n.y, d, i - _helpersSegment.H, f))) : (t.moveTo(r, o), _ = Math.cos(f) * c + r, g = Math.sin(f) * c + o, t.lineTo(_, g), a = Math.cos(m) * c + r, l = Math.sin(m) * c + o, t.lineTo(a, l)), t.closePath();
}

function drawArc(e, t, i, a, s) {
  var n = t.fullCircles,
      r = t.startAngle,
      o = t.circumference;
  var l = t.endAngle;

  if (n) {
    pathArc(e, t, i, a, l, s);

    for (var _t37 = 0; _t37 < n; ++_t37) {
      e.fill();
    }

    isNaN(o) || (l = r + (o % _helpersSegment.T || _helpersSegment.T));
  }

  return pathArc(e, t, i, a, l, s), e.fill(), l;
}

function drawBorder(e, i, a, s, n) {
  var r = i.fullCircles,
      o = i.startAngle,
      l = i.circumference,
      h = i.options,
      _h = h,
      d = _h.borderWidth,
      c = _h.borderJoinStyle,
      u = _h.borderDash,
      g = _h.borderDashOffset,
      h = "inner" === h.borderAlign;

  if (d) {
    e.setLineDash(u || []), e.lineDashOffset = g, h ? (e.lineWidth = 2 * d, e.lineJoin = c || "round") : (e.lineWidth = d, e.lineJoin = c || "bevel");
    var t = i.endAngle;

    if (r) {
      pathArc(e, i, a, s, t, n);

      for (var _t38 = 0; _t38 < r; ++_t38) {
        e.stroke();
      }

      isNaN(l) || (t = o + (l % _helpersSegment.T || _helpersSegment.T));
    }

    h && clipArc(e, i, t), r || (pathArc(e, i, a, s, t, n), e.stroke());
  }
}

var ArcElement = /*#__PURE__*/function (_Element2) {
  _inherits(ArcElement, _Element2);

  var _super12 = _createSuper(ArcElement);

  function ArcElement(t) {
    var _this24;

    _classCallCheck(this, ArcElement);

    (_this24 = _super12.call(this), _defineProperty(_assertThisInitialized(_this24), "circumference", void 0), _defineProperty(_assertThisInitialized(_this24), "endAngle", void 0), _defineProperty(_assertThisInitialized(_this24), "fullCircles", void 0), _defineProperty(_assertThisInitialized(_this24), "innerRadius", void 0), _defineProperty(_assertThisInitialized(_this24), "outerRadius", void 0), _defineProperty(_assertThisInitialized(_this24), "pixelMargin", void 0), _defineProperty(_assertThisInitialized(_this24), "startAngle", void 0)), _this24.options = void 0, _this24.circumference = void 0, _this24.startAngle = void 0, _this24.endAngle = void 0, _this24.innerRadius = void 0, _this24.outerRadius = void 0, _this24.pixelMargin = 0, _this24.fullCircles = 0, t && Object.assign(_assertThisInitialized(_this24), t);
    return _this24;
  }

  _createClass(ArcElement, [{
    key: "inRange",
    value: function inRange(t, e, i) {
      var a = this.getProps(["x", "y"], i),
          _getAngleFromPoint = (0, _helpersSegment.D)(a, {
        x: t,
        y: e
      }),
          a = _getAngleFromPoint.angle,
          t = _getAngleFromPoint.distance,
          _this$getProps2 = this.getProps(["startAngle", "endAngle", "innerRadius", "outerRadius", "circumference"], i),
          e = _this$getProps2.startAngle,
          i = _this$getProps2.endAngle,
          s = _this$getProps2.innerRadius,
          n = _this$getProps2.outerRadius,
          r = _this$getProps2.circumference,
          o = (this.options.spacing + this.options.borderWidth) / 2,
          r = (0, _helpersSegment.v)(r, i - e),
          r = _helpersSegment.T <= r || (0, _helpersSegment.p)(a, e, i),
          a = (0, _helpersSegment.aj)(t, s + o, n + o);

      return r && a;
    }
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint(t) {
      var _this$getProps3 = this.getProps(["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius"], t),
          t = _this$getProps3.x,
          e = _this$getProps3.y,
          i = _this$getProps3.startAngle,
          a = _this$getProps3.endAngle,
          s = _this$getProps3.innerRadius,
          n = _this$getProps3.outerRadius,
          _this$options13 = this.options,
          r = _this$options13.offset,
          o = _this$options13.spacing,
          i = (i + a) / 2,
          a = (s + n + o + r) / 2;

      return {
        x: t + Math.cos(i) * a,
        y: e + Math.sin(i) * a
      };
    }
  }, {
    key: "tooltipPosition",
    value: function tooltipPosition(t) {
      return this.getCenterPoint(t);
    }
  }, {
    key: "draw",
    value: function draw(t) {
      var e,
          i = this.options,
          a = this.circumference,
          s = (i.offset || 0) / 4,
          n = (i.spacing || 0) / 2,
          r = i.circular;
      this.pixelMargin = "inner" === i.borderAlign ? .33 : 0, this.fullCircles = _helpersSegment.T < a ? Math.floor(a / _helpersSegment.T) : 0, 0 === a || this.innerRadius < 0 || this.outerRadius < 0 || (t.save(), e = (this.startAngle + this.endAngle) / 2, t.translate(Math.cos(e) * s, Math.sin(e) * s), e = s * (1 - Math.sin(Math.min(_helpersSegment.P, a || 0))), t.fillStyle = i.backgroundColor, t.strokeStyle = i.borderColor, drawArc(t, this, e, n, r), drawBorder(t, this, e, n, r), t.restore());
    }
  }]);

  return ArcElement;
}(Element);

exports.ArcElement = ArcElement;

_defineProperty(ArcElement, "id", "arc");

_defineProperty(ArcElement, "defaults", {
  borderAlign: "center",
  borderColor: "#fff",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: void 0,
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: void 0,
  circular: !0
});

_defineProperty(ArcElement, "defaultRoutes", {
  backgroundColor: "backgroundColor"
});

_defineProperty(ArcElement, "descriptors", {
  _scriptable: !0,
  _indexable: function _indexable(t) {
    return "borderDash" !== t;
  }
});

function setStyle(t, e) {
  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : e;
  t.lineCap = (0, _helpersSegment.v)(i.borderCapStyle, e.borderCapStyle), t.setLineDash((0, _helpersSegment.v)(i.borderDash, e.borderDash)), t.lineDashOffset = (0, _helpersSegment.v)(i.borderDashOffset, e.borderDashOffset), t.lineJoin = (0, _helpersSegment.v)(i.borderJoinStyle, e.borderJoinStyle), t.lineWidth = (0, _helpersSegment.v)(i.borderWidth, e.borderWidth), t.strokeStyle = (0, _helpersSegment.v)(i.borderColor, e.borderColor);
}

function lineTo(t, e, i) {
  t.lineTo(i.x, i.y);
}

function getLineMethod(t) {
  return t.stepped ? _helpersSegment.ar : t.tension || "monotone" === t.cubicInterpolationMode ? _helpersSegment.as : lineTo;
}

function pathVars(t, e) {
  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return function (t, i) {
    var t = t.length,
        _i8 = i,
        _i8$start = _i8.start,
        i = _i8$start === void 0 ? 0 : _i8$start,
        _i8$end = _i8.end,
        a = _i8$end === void 0 ? t - 1 : _i8$end,
        s = e.start,
        n = e.end,
        r = Math.max(i, s),
        o = Math.min(a, n);
    return {
      count: t,
      start: r,
      loop: e.loop,
      ilen: o < r && !(i < s && a < s || n < i && n < a) ? t + o - r : o - r
    };
  }(t, i);
}

function pathSegment(t, e, i, a) {
  var _e17 = e,
      s = _e17.points,
      n = _e17.options,
      _pathVars = pathVars(s, i, a),
      r = _pathVars.count,
      o = _pathVars.start,
      e = _pathVars.loop,
      l = _pathVars.ilen;

  var h = getLineMethod(n);

  var _ref5 = a || {},
      _ref5$move = _ref5.move,
      d = _ref5$move === void 0 ? !0 : _ref5$move,
      c = _ref5.reverse,
      u,
      g,
      p;

  for (u = 0; u <= l; ++u) {
    (g = s[(o + (c ? l - u : u)) % r]).skip || (d ? (t.moveTo(g.x, g.y), d = !1) : h(t, p, g, c, n.stepped), p = g);
  }

  return e && (g = s[(o + (c ? l : 0)) % r], h(t, p, g, c, n.stepped)), !!e;
}

function fastPathSegment(t, e, i, a) {
  var s = e.points;

  var _pathVars2 = pathVars(s, i, a),
      n = _pathVars2.count,
      r = _pathVars2.start,
      o = _pathVars2.ilen,
      _ref6 = a || {},
      _ref6$move = _ref6.move,
      l = _ref6$move === void 0 ? !0 : _ref6$move,
      h = _ref6.reverse;

  var d = 0,
      c = 0,
      u,
      g,
      p,
      f,
      m,
      v;

  var x,
      b,
      _,
      y = function y(t) {
    return (r + (h ? o - t : t)) % n;
  },
      k = function k() {
    f !== m && (t.lineTo(d, m), t.lineTo(d, f), t.lineTo(d, v));
  };

  for (l && (g = s[y(0)], t.moveTo(g.x, g.y)), u = 0; u <= o; ++u) {
    (g = s[y(u)]).skip || (x = g.x, b = g.y, (_ = 0 | x) === p ? (b < f ? f = b : b > m && (m = b), d = (c * d + x) / ++c) : (k(), t.lineTo(x, b), p = _, c = 0, f = m = b), v = b);
  }

  k();
}

function _getSegmentMethod(t) {
  var e = t.options,
      i = e.borderDash && e.borderDash.length;
  return !(t._decimated || t._loop || e.tension || "monotone" === e.cubicInterpolationMode || e.stepped || i) ? fastPathSegment : pathSegment;
}

function _getInterpolationMethod(t) {
  return t.stepped ? _helpersSegment.ao : t.tension || "monotone" === t.cubicInterpolationMode ? _helpersSegment.ap : _helpersSegment.aq;
}

function strokePathWithCache(t, e, i, a) {
  var s = e._path;
  s || (s = e._path = new Path2D(), e.path(s, i, a) && s.closePath()), setStyle(t, e.options), t.stroke(s);
}

function strokePathDirect(t, e, i, a) {
  var s = e.segments,
      n = e.options;

  var r = _getSegmentMethod(e);

  var _iterator17 = _createForOfIteratorHelper(s),
      _step17;

  try {
    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
      var o = _step17.value;
      setStyle(t, n, o.style), t.beginPath(), r(t, e, o, {
        start: i,
        end: i + a - 1
      }) && t.closePath(), t.stroke();
    }
  } catch (err) {
    _iterator17.e(err);
  } finally {
    _iterator17.f();
  }
}

var usePath2D = "function" == typeof Path2D;

function _draw(t, e, i, a) {
  (usePath2D && !e.options.segment ? strokePathWithCache : strokePathDirect)(t, e, i, a);
}

var LineElement = /*#__PURE__*/function (_Element3) {
  _inherits(LineElement, _Element3);

  var _super13 = _createSuper(LineElement);

  function LineElement(t) {
    var _this25;

    _classCallCheck(this, LineElement);

    _this25 = _super13.call(this), _this25.animated = !0, _this25.options = void 0, _this25._chart = void 0, _this25._loop = void 0, _this25._fullLoop = void 0, _this25._path = void 0, _this25._points = void 0, _this25._segments = void 0, _this25._decimated = !1, _this25._pointsUpdated = !1, _this25._datasetIndex = void 0, t && Object.assign(_assertThisInitialized(_this25), t);
    return _this25;
  }

  _createClass(LineElement, [{
    key: "updateControlPoints",
    value: function updateControlPoints(t, e) {
      var i,
          a = this.options;
      !a.tension && "monotone" !== a.cubicInterpolationMode || a.stepped || this._pointsUpdated || (i = a.spanGaps ? this._loop : this._fullLoop, (0, _helpersSegment.al)(this._points, a, t, i, e), this._pointsUpdated = !0);
    }
  }, {
    key: "points",
    get: function get() {
      return this._points;
    },
    set: function set(t) {
      this._points = t, delete this._segments, delete this._path, this._pointsUpdated = !1;
    }
  }, {
    key: "segments",
    get: function get() {
      return this._segments || (this._segments = (0, _helpersSegment.am)(this, this.options.segment));
    }
  }, {
    key: "first",
    value: function first() {
      var t = this.segments,
          e = this.points;
      return t.length && e[t[0].start];
    }
  }, {
    key: "last",
    value: function last() {
      var t = this.segments,
          e = this.points,
          i = t.length;
      return i && e[t[i - 1].end];
    }
  }, {
    key: "interpolate",
    value: function interpolate(i, a) {
      var s = this.options,
          n = i[a],
          r = this.points,
          o = (0, _helpersSegment.an)(this, {
        property: a,
        start: n,
        end: n
      });

      if (o.length) {
        var c = [],
            u = _getInterpolationMethod(s);

        var t, e;

        for (t = 0, e = o.length; t < e; ++t) {
          var _o$t = o[t],
              l = _o$t.start,
              h = _o$t.end,
              l = r[l],
              h = r[h];
          if (l === h) c.push(l);else {
            var d = Math.abs((n - l[a]) / (h[a] - l[a]));
            var g = u(l, h, d, s.stepped);
            g[a] = i[a], c.push(g);
          }
        }

        return 1 === c.length ? c[0] : c;
      }
    }
  }, {
    key: "pathSegment",
    value: function pathSegment(t, e, i) {
      var a = _getSegmentMethod(this);

      return a(t, this, e, i);
    }
  }, {
    key: "path",
    value: function path(t, e, i) {
      var a = this.segments;

      var s = _getSegmentMethod(this);

      var n = this._loop;
      e = e || 0, i = i || this.points.length - e;

      var _iterator18 = _createForOfIteratorHelper(a),
          _step18;

      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var r = _step18.value;
          n &= s(t, this, r, {
            start: e,
            end: e + i - 1
          });
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }

      return !!n;
    }
  }, {
    key: "draw",
    value: function draw(t, e, i, a) {
      var s = this.options || {};
      (this.points || []).length && s.borderWidth && (t.save(), _draw(t, this, i, a), t.restore()), this.animated && (this._pointsUpdated = !1, this._path = void 0);
    }
  }]);

  return LineElement;
}(Element);

exports.LineElement = LineElement;

_defineProperty(LineElement, "id", "line");

_defineProperty(LineElement, "defaults", {
  borderCapStyle: "butt",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: "miter",
  borderWidth: 3,
  capBezierPoints: !0,
  cubicInterpolationMode: "default",
  fill: !1,
  spanGaps: !1,
  stepped: !1,
  tension: 0
});

_defineProperty(LineElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});

_defineProperty(LineElement, "descriptors", {
  _scriptable: !0,
  _indexable: function _indexable(t) {
    return "borderDash" !== t && "fill" !== t;
  }
});

function inRange$1(t, e, i, a) {
  var s = t.options,
      _t$getProps2 = t.getProps([i], a),
      t = _t$getProps2[i];

  return Math.abs(e - t) < s.radius + s.hitRadius;
}

var PointElement = /*#__PURE__*/function (_Element4) {
  _inherits(PointElement, _Element4);

  var _super14 = _createSuper(PointElement);

  function PointElement(t) {
    var _this26;

    _classCallCheck(this, PointElement);

    (_this26 = _super14.call(this), _defineProperty(_assertThisInitialized(_this26), "parsed", void 0), _defineProperty(_assertThisInitialized(_this26), "skip", void 0), _defineProperty(_assertThisInitialized(_this26), "stop", void 0)), _this26.options = void 0, _this26.parsed = void 0, _this26.skip = void 0, _this26.stop = void 0, t && Object.assign(_assertThisInitialized(_this26), t);
    return _this26;
  }

  _createClass(PointElement, [{
    key: "inRange",
    value: function inRange(t, e, i) {
      var a = this.options,
          _this$getProps4 = this.getProps(["x", "y"], i),
          i = _this$getProps4.x,
          s = _this$getProps4.y;

      return Math.pow(t - i, 2) + Math.pow(e - s, 2) < Math.pow(a.hitRadius + a.radius, 2);
    }
  }, {
    key: "inXRange",
    value: function inXRange(t, e) {
      return inRange$1(this, t, "x", e);
    }
  }, {
    key: "inYRange",
    value: function inYRange(t, e) {
      return inRange$1(this, t, "y", e);
    }
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint(t) {
      var _this$getProps5 = this.getProps(["x", "y"], t),
          t = _this$getProps5.x,
          e = _this$getProps5.y;

      return {
        x: t,
        y: e
      };
    }
  }, {
    key: "size",
    value: function size(t) {
      var e = (t = t || this.options || {}).radius || 0;
      return 2 * ((e = Math.max(e, e && t.hoverRadius || 0)) + (e && t.borderWidth || 0));
    }
  }, {
    key: "draw",
    value: function draw(t, e) {
      var i = this.options;
      this.skip || i.radius < .1 || !(0, _helpersSegment.C)(this, e, this.size(i) / 2) || (t.strokeStyle = i.borderColor, t.lineWidth = i.borderWidth, t.fillStyle = i.backgroundColor, (0, _helpersSegment.at)(t, i, this.x, this.y));
    }
  }, {
    key: "getRange",
    value: function getRange() {
      var t = this.options || {};
      return t.radius + t.hitRadius;
    }
  }]);

  return PointElement;
}(Element);

exports.PointElement = PointElement;

_defineProperty(PointElement, "id", "point");

_defineProperty(PointElement, "defaults", {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: "circle",
  radius: 3,
  rotation: 0
});

_defineProperty(PointElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});

function getBarBounds(t, e) {
  var _t$getProps3 = t.getProps(["x", "y", "base", "width", "height"], e),
      e = _t$getProps3.x,
      i = _t$getProps3.y,
      a = _t$getProps3.base,
      s = _t$getProps3.width,
      n = _t$getProps3.height;

  var r, o, l, h, d;
  return h = t.horizontal ? (d = n / 2, r = Math.min(e, a), o = Math.max(e, a), l = i - d, i + d) : (d = s / 2, r = e - d, o = e + d, l = Math.min(i, a), Math.max(i, a)), {
    left: r,
    top: l,
    right: o,
    bottom: h
  };
}

function skipOrLimit(t, e, i, a) {
  return t ? 0 : (0, _helpersSegment.S)(e, i, a);
}

function parseBorderWidth(t, e, i) {
  var a = t.options.borderWidth,
      t = t.borderSkipped,
      a = (0, _helpersSegment.av)(a);
  return {
    t: skipOrLimit(t.top, a.top, 0, i),
    r: skipOrLimit(t.right, a.right, 0, e),
    b: skipOrLimit(t.bottom, a.bottom, 0, i),
    l: skipOrLimit(t.left, a.left, 0, e)
  };
}

function parseBorderRadius(t, e, i) {
  var a = t.getProps(["enableBorderRadius"])["enableBorderRadius"],
      s = t.options.borderRadius,
      n = (0, _helpersSegment.aw)(s),
      e = Math.min(e, i),
      i = t.borderSkipped,
      t = a || (0, _helpersSegment.i)(s);
  return {
    topLeft: skipOrLimit(!t || i.top || i.left, n.topLeft, 0, e),
    topRight: skipOrLimit(!t || i.top || i.right, n.topRight, 0, e),
    bottomLeft: skipOrLimit(!t || i.bottom || i.left, n.bottomLeft, 0, e),
    bottomRight: skipOrLimit(!t || i.bottom || i.right, n.bottomRight, 0, e)
  };
}

function boundingRects(t) {
  var e = getBarBounds(t),
      i = e.right - e.left,
      a = e.bottom - e.top,
      s = parseBorderWidth(t, i / 2, a / 2),
      t = parseBorderRadius(t, i / 2, a / 2);
  return {
    outer: {
      x: e.left,
      y: e.top,
      w: i,
      h: a,
      radius: t
    },
    inner: {
      x: e.left + s.l,
      y: e.top + s.t,
      w: i - s.l - s.r,
      h: a - s.t - s.b,
      radius: {
        topLeft: Math.max(0, t.topLeft - Math.max(s.t, s.l)),
        topRight: Math.max(0, t.topRight - Math.max(s.t, s.r)),
        bottomLeft: Math.max(0, t.bottomLeft - Math.max(s.b, s.l)),
        bottomRight: Math.max(0, t.bottomRight - Math.max(s.b, s.r))
      }
    }
  };
}

function _inRange(t, e, i, a) {
  var s = null === e,
      n = null === i,
      t = t && !(s && n) && getBarBounds(t, a);
  return t && (s || (0, _helpersSegment.aj)(e, t.left, t.right)) && (n || (0, _helpersSegment.aj)(i, t.top, t.bottom));
}

function hasRadius(t) {
  return t.topLeft || t.topRight || t.bottomLeft || t.bottomRight;
}

function addNormalRectPath(t, e) {
  t.rect(e.x, e.y, e.w, e.h);
}

function inflateRect(t, e) {
  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return function (i) {
    var a = t.x !== i.x ? -e : 0,
        s = t.y !== i.y ? -e : 0,
        n = (t.x + t.w !== i.x + i.w ? e : 0) - a,
        i = (t.y + t.h !== i.y + i.h ? e : 0) - s;
    return {
      x: t.x + a,
      y: t.y + s,
      w: t.w + n,
      h: t.h + i,
      radius: t.radius
    };
  }(i);
}

var BarElement = /*#__PURE__*/function (_Element5) {
  _inherits(BarElement, _Element5);

  var _super15 = _createSuper(BarElement);

  function BarElement(t) {
    var _this27;

    _classCallCheck(this, BarElement);

    _this27 = _super15.call(this), _this27.options = void 0, _this27.horizontal = void 0, _this27.base = void 0, _this27.width = void 0, _this27.height = void 0, _this27.inflateAmount = void 0, t && Object.assign(_assertThisInitialized(_this27), t);
    return _this27;
  }

  _createClass(BarElement, [{
    key: "draw",
    value: function draw(t) {
      var e = this.inflateAmount,
          _this$options14 = this.options,
          i = _this$options14.borderColor,
          a = _this$options14.backgroundColor,
          _boundingRects = boundingRects(this),
          s = _boundingRects.inner,
          n = _boundingRects.outer;

      var r = hasRadius(n.radius) ? _helpersSegment.au : addNormalRectPath;
      t.save(), n.w === s.w && n.h === s.h || (t.beginPath(), r(t, inflateRect(n, e, s)), t.clip(), r(t, inflateRect(s, -e, n)), t.fillStyle = i, t.fill("evenodd")), t.beginPath(), r(t, inflateRect(s, e)), t.fillStyle = a, t.fill(), t.restore();
    }
  }, {
    key: "inRange",
    value: function inRange(t, e, i) {
      return _inRange(this, t, e, i);
    }
  }, {
    key: "inXRange",
    value: function inXRange(t, e) {
      return _inRange(this, t, null, e);
    }
  }, {
    key: "inYRange",
    value: function inYRange(t, e) {
      return _inRange(this, null, t, e);
    }
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint(t) {
      var _this$getProps6 = this.getProps(["x", "y", "base", "horizontal"], t),
          t = _this$getProps6.x,
          e = _this$getProps6.y,
          i = _this$getProps6.base,
          a = _this$getProps6.horizontal;

      return {
        x: a ? (t + i) / 2 : t,
        y: a ? e : (e + i) / 2
      };
    }
  }, {
    key: "getRange",
    value: function getRange(t) {
      return "x" === t ? this.width / 2 : this.height / 2;
    }
  }]);

  return BarElement;
}(Element);

exports.BarElement = BarElement;

_defineProperty(BarElement, "id", "bar");

_defineProperty(BarElement, "defaults", {
  borderSkipped: "start",
  borderWidth: 0,
  borderRadius: 0,
  inflateAmount: "auto",
  pointStyle: void 0
});

_defineProperty(BarElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});

var elements = Object.freeze({
  __proto__: null,
  ArcElement: ArcElement,
  BarElement: BarElement,
  LineElement: LineElement,
  PointElement: PointElement
});
exports.elements = elements;
var BORDER_COLORS = ["rgb(54, 162, 235)", "rgb(255, 99, 132)", "rgb(255, 159, 64)", "rgb(255, 205, 86)", "rgb(75, 192, 192)", "rgb(153, 102, 255)", "rgb(201, 203, 207)"],
    BACKGROUND_COLORS = BORDER_COLORS.map(function (t) {
  return t.replace("rgb(", "rgba(").replace(")", ", 0.5)");
});

function getBorderColor(t) {
  return BORDER_COLORS[t % BORDER_COLORS.length];
}

function getBackgroundColor(t) {
  return BACKGROUND_COLORS[t % BACKGROUND_COLORS.length];
}

function colorizeDefaultDataset(t, e) {
  return t.borderColor = getBorderColor(e), t.backgroundColor = getBackgroundColor(e), ++e;
}

function colorizeDoughnutDataset(t, e) {
  return t.backgroundColor = t.data.map(function () {
    return getBorderColor(e++);
  }), e;
}

function colorizePolarAreaDataset(t, e) {
  return t.backgroundColor = t.data.map(function () {
    return getBackgroundColor(e++);
  }), e;
}

function getColorizer(i) {
  var a = 0;
  return function (t, e) {
    e = i.getDatasetMeta(e).controller;
    e instanceof DoughnutController ? a = colorizeDoughnutDataset(t, a) : e instanceof PolarAreaController ? a = colorizePolarAreaDataset(t, a) : e && (a = colorizeDefaultDataset(t, a));
  };
}

function containsColorsDefinitions(t) {
  var e;

  for (e in t) {
    if (t[e].borderColor || t[e].backgroundColor) return !0;
  }

  return !1;
}

function containsColorsDefinition(t) {
  return t && (t.borderColor || t.backgroundColor);
}

var plugin_colors = {
  id: "colors",
  defaults: {
    enabled: !0,
    forceOverride: !1
  },
  beforeLayout: function beforeLayout(t, e, i) {
    if (i.enabled) {
      var _t$config = t.config,
          s = _t$config.data.datasets,
          n = _t$config.options;
      var a = n["elements"];
      !i.forceOverride && (containsColorsDefinitions(s) || containsColorsDefinition(n) || a && containsColorsDefinitions(a)) || (i = getColorizer(t), s.forEach(i));
    }
  }
};
exports.Colors = plugin_colors;

function lttbDecimation(a, s, n, t, e) {
  var i = e.samples || t;
  if (n <= i) return a.slice(s, s + n);
  var r = [];
  var o = (n - 2) / (i - 2);
  var l = 0;
  e = s + n - 1;
  var h = s,
      d,
      c,
      u,
      g,
      p;

  for (r[l++] = a[h], d = 0; d < i - 2; d++) {
    var _t39 = 0,
        _e18 = 0,
        _i9 = void 0;

    var f = Math.floor((d + 1) * o) + 1 + s,
        m = Math.min(Math.floor((d + 2) * o) + 1, n) + s,
        v = m - f;

    for (_i9 = f; _i9 < m; _i9++) {
      _t39 += a[_i9].x, _e18 += a[_i9].y;
    }

    _t39 /= v, _e18 /= v;
    var f = Math.floor(d * o) + 1 + s,
        x = Math.min(Math.floor((d + 1) * o) + 1, n) + s,
        _a$h = a[h],
        b = _a$h.x,
        _ = _a$h.y;

    for (u = -1, _i9 = f; _i9 < x; _i9++) {
      (g = .5 * Math.abs((b - _t39) * (a[_i9].y - _) - (b - a[_i9].x) * (_e18 - _))) > u && (u = g, c = a[_i9], p = _i9);
    }

    r[l++] = c, h = p;
  }

  return r[l++] = a[e], r;
}

function minMaxDecimation(t, e, i, a) {
  var s = 0,
      n = 0,
      r,
      o,
      l,
      h,
      d,
      c,
      u,
      g,
      p,
      f;
  var m = [];
  var v = t[e].x,
      x = t[e + i - 1].x - v;

  for (r = e; r < e + i; ++r) {
    l = ((o = t[r]).x - v) / x * a, h = o.y;

    var b,
        _,
        y,
        k = 0 | l;

    k === d ? (h < p ? (p = h, c = r) : h > f && (f = h, u = r), s = (n * s + o.x) / ++n) : (b = r - 1, (0, _helpersSegment.k)(c) || (0, _helpersSegment.k)(u) || (_ = Math.min(c, u), y = Math.max(c, u), _ !== g && _ !== b && m.push(_objectSpread(_objectSpread({}, t[_]), {}, {
      x: s
    })), y !== g && y !== b && m.push(_objectSpread(_objectSpread({}, t[y]), {}, {
      x: s
    }))), 0 < r && b !== g && m.push(t[b]), m.push(o), d = k, n = 0, p = f = h, c = u = g = r);
  }

  return m;
}

function cleanDecimatedDataset(t) {
  var e;
  t._decimated && (e = t._data, delete t._decimated, delete t._data, Object.defineProperty(t, "data", {
    configurable: !0,
    enumerable: !0,
    writable: !0,
    value: e
  }));
}

function cleanDecimatedData(t) {
  t.data.datasets.forEach(function (t) {
    cleanDecimatedDataset(t);
  });
}

function getStartAndCountOfVisiblePointsSimplified(t, e) {
  var i = e.length;
  var a = 0,
      s;
  var n = t["iScale"];

  var _n$getUserBounds = n.getUserBounds(),
      t = _n$getUserBounds.min,
      r = _n$getUserBounds.max,
      o = _n$getUserBounds.minDefined,
      l = _n$getUserBounds.maxDefined;

  return o && (a = (0, _helpersSegment.S)((0, _helpersSegment.B)(e, n.axis, t).lo, 0, i - 1)), s = l ? (0, _helpersSegment.S)((0, _helpersSegment.B)(e, n.axis, r).hi + 1, a, i) - a : i - a, {
    start: a,
    count: s
  };
}

var plugin_decimation = {
  id: "decimation",
  defaults: {
    algorithm: "min-max",
    enabled: !1
  },
  beforeElementsUpdate: function beforeElementsUpdate(o, t, l) {
    if (l.enabled) {
      var h = o.width;
      o.data.datasets.forEach(function (e, t) {
        var i = e._data,
            a = e.indexAxis,
            t = o.getDatasetMeta(t),
            s = i || e.data;

        if ("y" !== (0, _helpersSegment.a)([a, o.options.indexAxis]) && t.controller.supportsDecimation) {
          a = o.scales[t.xAxisID];

          if (("linear" === a.type || "time" === a.type) && !o.options.parsing) {
            var _getStartAndCountOfVi3 = getStartAndCountOfVisiblePointsSimplified(t, s),
                n = _getStartAndCountOfVi3.start,
                r = _getStartAndCountOfVi3.count;

            if (r <= (l.threshold || 4 * h)) cleanDecimatedDataset(e);else {
              (0, _helpersSegment.k)(i) && (e._data = s, delete e.data, Object.defineProperty(e, "data", {
                configurable: !0,
                enumerable: !0,
                get: function get() {
                  return this._decimated;
                },
                set: function set(t) {
                  this._data = t;
                }
              }));

              var _t40;

              switch (l.algorithm) {
                case "lttb":
                  _t40 = lttbDecimation(s, n, r, h, l);
                  break;

                case "min-max":
                  _t40 = minMaxDecimation(s, n, r, h);
                  break;

                default:
                  throw new Error("Unsupported decimation algorithm '".concat(l.algorithm, "'"));
              }

              e._decimated = _t40;
            }
          }
        }
      });
    } else cleanDecimatedData(o);
  },
  destroy: function destroy(t) {
    cleanDecimatedData(t);
  }
};
exports.Decimation = plugin_decimation;

function _segments(t, e, i) {
  var a = t.segments,
      s = t.points,
      n = e.points;
  var r = [];

  var _iterator19 = _createForOfIteratorHelper(a),
      _step19;

  try {
    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
      var c = _step19.value;

      var o = c.start,
          l = c.end,
          l = _findSegmentEnd(o, l, s),
          h = _getBounds(i, s[o], s[l], c.loop);

      if (e.segments) {
        var _iterator20 = _createForOfIteratorHelper((0, _helpersSegment.an)(e, h)),
            _step20;

        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var u = _step20.value;

            var d = _getBounds(i, n[u.start], n[u.end], u.loop);

            var _iterator21 = _createForOfIteratorHelper((0, _helpersSegment.ax)(c, s, d)),
                _step21;

            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var g = _step21.value;
                r.push({
                  source: g,
                  target: u,
                  start: _defineProperty({}, i, _getEdge(h, d, "start", Math.max)),
                  end: _defineProperty({}, i, _getEdge(h, d, "end", Math.min))
                });
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
      } else r.push({
        source: c,
        target: h,
        start: s[o],
        end: s[l]
      });
    }
  } catch (err) {
    _iterator19.e(err);
  } finally {
    _iterator19.f();
  }

  return r;
}

function _getBounds(i, a, s, t) {
  if (!t) {
    var _t41 = a[i],
        e = s[i];
    return "angle" === i && (_t41 = (0, _helpersSegment.ay)(_t41), e = (0, _helpersSegment.ay)(e)), {
      property: i,
      start: _t41,
      end: e
    };
  }
}

function _pointsFromSegments(t, e) {
  var _ref7 = t || {},
      _ref7$x = _ref7.x,
      i = _ref7$x === void 0 ? null : _ref7$x,
      _ref7$y = _ref7.y,
      a = _ref7$y === void 0 ? null : _ref7$y,
      s = e.points,
      n = [];

  return e.segments.forEach(function (_ref8) {
    var t = _ref8.start,
        e = _ref8.end;
    e = _findSegmentEnd(t, e, s);
    t = s[t], e = s[e];
    null !== a ? (n.push({
      x: t.x,
      y: a
    }), n.push({
      x: e.x,
      y: a
    })) : null !== i && (n.push({
      x: i,
      y: t.y
    }), n.push({
      x: i,
      y: e.y
    }));
  }), n;
}

function _findSegmentEnd(t, e, i) {
  for (; t < e; e--) {
    var a = i[e];
    if (!isNaN(a.x) && !isNaN(a.y)) break;
  }

  return e;
}

function _getEdge(t, e, i, a) {
  return t && e ? a(t[i], e[i]) : t ? t[i] : e ? e[i] : 0;
}

function _createBoundaryLine(t, e) {
  var i = [],
      a = !1;
  return (i = (0, _helpersSegment.b)(t) ? (a = !0, t) : _pointsFromSegments(t, e)).length ? new LineElement({
    points: i,
    options: {
      tension: 0
    },
    _loop: a,
    _fullLoop: a
  }) : null;
}

function _shouldApplyFill(t) {
  return t && !1 !== t.fill;
}

function _resolveTarget(t, e, i) {
  var a;
  var s = t[e].fill;
  var n = [e];
  if (!i) return s;

  for (; !1 !== s && -1 === n.indexOf(s);) {
    if (!(0, _helpersSegment.g)(s)) return s;
    if (!(a = t[s])) return !1;
    if (a.visible) return s;
    n.push(s), s = a.fill;
  }

  return !1;
}

function _decodeFill(t, e, i) {
  t = parseFillOption(t);
  if ((0, _helpersSegment.i)(t)) return !isNaN(t.value) && t;
  var a = parseFloat(t);
  return (0, _helpersSegment.g)(a) && Math.floor(a) === a ? decodeTargetIndex(t[0], e, a, i) : 0 <= ["origin", "start", "end", "stack", "shape"].indexOf(t) && t;
}

function decodeTargetIndex(t, e, i, a) {
  return !((i = "-" !== t && "+" !== t ? i : e + i) === e || i < 0 || a <= i) && i;
}

function _getTargetPixel(t, e) {
  var i = null;
  return "start" === t ? i = e.bottom : "end" === t ? i = e.top : (0, _helpersSegment.i)(t) ? i = e.getPixelForValue(t.value) : e.getBasePixel && (i = e.getBasePixel()), i;
}

function _getTargetValue(t, e, i) {
  var a;
  return a = "start" === t ? i : "end" === t ? e.options.reverse ? e.min : e.max : (0, _helpersSegment.i)(t) ? t.value : e.getBaseValue();
}

function parseFillOption(t) {
  var t = t.options,
      e = t.fill;
  var i = (0, _helpersSegment.v)(e && e.target, e);
  return !1 !== (i = void 0 === i ? !!t.backgroundColor : i) && null !== i && (!0 === i ? "origin" : i);
}

function _buildStackLine(t) {
  var _t42 = t,
      t = _t42.scale,
      e = _t42.index,
      i = _t42.line,
      a = [],
      s = i.segments,
      n = i.points;
  var r = getLinesBelow(t, e);
  r.push(_createBoundaryLine({
    x: null,
    y: t.bottom
  }, i));

  for (var _t43 = 0; _t43 < s.length; _t43++) {
    var o = s[_t43];

    for (var _t44 = o.start; _t44 <= o.end; _t44++) {
      addPointsBelow(a, n[_t44], r);
    }
  }

  return new LineElement({
    points: a,
    options: {}
  });
}

function getLinesBelow(t, e) {
  var i = [];
  var a = t.getMatchingVisibleMetas("line");

  for (var _t45 = 0; _t45 < a.length; _t45++) {
    var s = a[_t45];
    if (s.index === e) break;
    s.hidden || i.unshift(s.dataset);
  }

  return i;
}

function addPointsBelow(e, i, a) {
  var s = [];

  for (var t = 0; t < a.length; t++) {
    var _findPoint = findPoint(a[t], i, "x"),
        n = _findPoint.first,
        r = _findPoint.last,
        o = _findPoint.point;

    if (!(!o || n && r)) if (n) s.unshift(o);else if (e.push(o), !r) break;
  }

  e.push.apply(e, s);
}

function findPoint(t, e, i) {
  e = t.interpolate(e, i);
  if (!e) return {};
  var a = e[i],
      s = t.segments,
      n = t.points;
  var r = !1,
      o = !1;

  for (var _t46 = 0; _t46 < s.length; _t46++) {
    var l = s[_t46],
        h = n[l.start][i],
        l = n[l.end][i];

    if ((0, _helpersSegment.aj)(a, h, l)) {
      r = a === h, o = a === l;
      break;
    }
  }

  return {
    first: r,
    last: o,
    point: e
  };
}

var simpleArc = /*#__PURE__*/function () {
  function simpleArc(t) {
    _classCallCheck(this, simpleArc);

    this.x = t.x, this.y = t.y, this.radius = t.radius;
  }

  _createClass(simpleArc, [{
    key: "pathSegment",
    value: function pathSegment(t, e, i) {
      var a = this.x,
          s = this.y,
          n = this.radius;
      return t.arc(a, s, n, (e = e || {
        start: 0,
        end: _helpersSegment.T
      }).end, e.start, !0), !i.bounds;
    }
  }, {
    key: "interpolate",
    value: function interpolate(t) {
      var e = this.x,
          i = this.y,
          a = this.radius,
          t = t.angle;
      return {
        x: e + Math.cos(t) * a,
        y: i + Math.sin(t) * a,
        angle: t
      };
    }
  }]);

  return simpleArc;
}();

function _getTarget(t) {
  var e = t.chart,
      i = t.fill,
      a = t.line;
  if ((0, _helpersSegment.g)(i)) return getLineByIndex(e, i);
  if ("stack" === i) return _buildStackLine(t);
  if ("shape" === i) return !0;
  e = computeBoundary(t);
  return e instanceof simpleArc ? e : _createBoundaryLine(e, a);
}

function getLineByIndex(t, e) {
  var i = t.getDatasetMeta(e);
  return i && t.isDatasetVisible(e) ? i.dataset : null;
}

function computeBoundary(t) {
  return ((t.scale || {}).getPointPositionForValue ? computeCircularBoundary : computeLinearBoundary)(t);
}

function computeLinearBoundary(t) {
  var _t47 = t,
      _t47$scale = _t47.scale,
      e = _t47$scale === void 0 ? {} : _t47$scale,
      i = _t47.fill;

  var a,
      t = _getTargetPixel(i, e);

  return (0, _helpersSegment.g)(t) ? {
    x: (a = e.isHorizontal()) ? t : null,
    y: a ? null : t
  } : null;
}

function computeCircularBoundary(t) {
  var _t48 = t,
      e = _t48.scale,
      i = _t48.fill;

  var t = e.options,
      a = e.getLabels().length,
      s = t.reverse ? e.max : e.min,
      n = _getTargetValue(i, e, s);

  var r = [];
  if (t.grid.circular) return t = e.getPointPositionForValue(0, s), new simpleArc({
    x: t.x,
    y: t.y,
    radius: e.getDistanceFromCenterForValue(n)
  });

  for (var _t49 = 0; _t49 < a; ++_t49) {
    r.push(e.getPointPositionForValue(_t49, n));
  }

  return r;
}

function _drawfill(t, e, i) {
  var a = _getTarget(e),
      _e19 = e,
      e = _e19.line,
      s = _e19.scale,
      n = _e19.axis,
      r = e.options,
      o = r.fill,
      r = r.backgroundColor,
      _ref9 = o || {},
      _ref9$above = _ref9.above,
      o = _ref9$above === void 0 ? r : _ref9$above,
      _ref9$below = _ref9.below,
      r = _ref9$below === void 0 ? r : _ref9$below;

  a && e.points.length && ((0, _helpersSegment.Y)(t, i), doFill(t, {
    line: e,
    target: a,
    above: o,
    below: r,
    area: i,
    scale: s,
    axis: n
  }), (0, _helpersSegment.$)(t));
}

function doFill(t, e) {
  var _e20 = e,
      i = _e20.line,
      a = _e20.target,
      s = _e20.above,
      n = _e20.below,
      r = _e20.area,
      o = _e20.scale,
      e = i._loop ? "angle" : e.axis;
  t.save(), "x" === e && n !== s && (clipVertical(t, a, r.top), fill(t, {
    line: i,
    target: a,
    color: s,
    scale: o,
    property: e
  }), t.restore(), t.save(), clipVertical(t, a, r.bottom)), fill(t, {
    line: i,
    target: a,
    color: n,
    scale: o,
    property: e
  }), t.restore();
}

function clipVertical(t, e, i) {
  var a = e.segments,
      s = e.points;
  var n = !0,
      r = !1;
  t.beginPath();

  var _iterator22 = _createForOfIteratorHelper(a),
      _step22;

  try {
    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
      var d = _step22.value;

      var o = d.start,
          l = d.end,
          h = s[o],
          o = s[_findSegmentEnd(o, l, s)];

      n ? (t.moveTo(h.x, h.y), n = !1) : (t.lineTo(h.x, i), t.lineTo(h.x, h.y)), (r = !!e.pathSegment(t, d, {
        move: r
      })) ? t.closePath() : t.lineTo(o.x, i);
    }
  } catch (err) {
    _iterator22.e(err);
  } finally {
    _iterator22.f();
  }

  t.lineTo(e.first().x, i), t.closePath(), t.clip();
}

function fill(e, t) {
  var i = t.line,
      a = t.target,
      s = t.property,
      n = t.color,
      r = t.scale;
  var o, l, h, d;

  var _iterator23 = _createForOfIteratorHelper(_segments(i, a, s)),
      _step23;

  try {
    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
      var _step23$value = _step23.value;
      o = _step23$value.source;
      l = _step23$value.target;
      h = _step23$value.start;
      d = _step23$value.end;
      var _o = o,
          _o$style = _o.style;
      _o$style = _o$style === void 0 ? {} : _o$style;
      var _o$style$backgroundCo = _o$style.backgroundColor,
          c = _o$style$backgroundCo === void 0 ? n : _o$style$backgroundCo,
          u = !0 !== a,
          c = (e.save(), e.fillStyle = c, clipBounds(e, r, u && _getBounds(s, h, d)), e.beginPath(), !!i.pathSegment(e, o));

      var _t50 = void 0;

      u && (c ? e.closePath() : interpolatedLineTo(e, a, d, s), u = !!a.pathSegment(e, l, {
        move: c,
        reverse: !0
      }), (_t50 = c && u) || interpolatedLineTo(e, a, h, s)), e.closePath(), e.fill(_t50 ? "evenodd" : "nonzero"), e.restore();
    }
  } catch (err) {
    _iterator23.e(err);
  } finally {
    _iterator23.f();
  }
}

function clipBounds(t, e, i) {
  var _e$chart$chartArea = e.chart.chartArea,
      e = _e$chart$chartArea.top,
      a = _e$chart$chartArea.bottom,
      _ref10 = i || {},
      i = _ref10.property,
      s = _ref10.start,
      n = _ref10.end;

  "x" === i && (t.beginPath(), t.rect(s, e, n - s, a - e), t.clip());
}

function interpolatedLineTo(t, e, i, a) {
  e = e.interpolate(i, a);
  e && t.lineTo(e.x, e.y);
}

var index = {
  id: "filler",
  afterDatasetsUpdate: function afterDatasetsUpdate(t, e, i) {
    var a = (t.data.datasets || []).length;
    var s = [];
    var n, r, o, l;

    for (r = 0; r < a; ++r) {
      o = (n = t.getDatasetMeta(r)).dataset, l = null, o && o.options && o instanceof LineElement && (l = {
        visible: t.isDatasetVisible(r),
        index: r,
        fill: _decodeFill(o, r, a),
        chart: t,
        axis: n.controller.options.indexAxis,
        scale: n.vScale,
        line: o
      }), n.$filler = l, s.push(l);
    }

    for (r = 0; r < a; ++r) {
      (l = s[r]) && !1 !== l.fill && (l.fill = _resolveTarget(s, r, i.propagate));
    }
  },
  beforeDraw: function beforeDraw(e, t, i) {
    var a = "beforeDraw" === i.drawTime,
        s = e.getSortedVisibleDatasetMetas(),
        n = e.chartArea;

    for (var _t51 = s.length - 1; 0 <= _t51; --_t51) {
      var r = s[_t51].$filler;
      r && (r.line.updateControlPoints(n, r.axis), a && r.fill && _drawfill(e.ctx, r, n));
    }
  },
  beforeDatasetsDraw: function beforeDatasetsDraw(e, t, i) {
    if ("beforeDatasetsDraw" === i.drawTime) {
      var a = e.getSortedVisibleDatasetMetas();

      for (var _t52 = a.length - 1; 0 <= _t52; --_t52) {
        var s = a[_t52].$filler;
        _shouldApplyFill(s) && _drawfill(e.ctx, s, e.chartArea);
      }
    }
  },
  beforeDatasetDraw: function beforeDatasetDraw(t, e, i) {
    e = e.meta.$filler;
    _shouldApplyFill(e) && "beforeDatasetDraw" === i.drawTime && _drawfill(t.ctx, e, t.chartArea);
  },
  defaults: {
    propagate: !0,
    drawTime: "beforeDatasetDraw"
  }
};
exports.Filler = index;

var getBoxSize = function getBoxSize(t, e) {
  var _t$boxHeight = t.boxHeight,
      i = _t$boxHeight === void 0 ? e : _t$boxHeight,
      _t$boxWidth = t.boxWidth,
      a = _t$boxWidth === void 0 ? e : _t$boxWidth;
  return t.usePointStyle && (i = Math.min(i, e), a = t.pointStyleWidth || Math.min(a, e)), {
    boxWidth: a,
    boxHeight: i,
    itemHeight: Math.max(e, i)
  };
},
    itemsEqual = function itemsEqual(t, e) {
  return null !== t && null !== e && t.datasetIndex === e.datasetIndex && t.index === e.index;
};

var Legend = /*#__PURE__*/function (_Element6) {
  _inherits(Legend, _Element6);

  var _super16 = _createSuper(Legend);

  function Legend(t) {
    var _this28;

    _classCallCheck(this, Legend);

    _this28 = _super16.call(this), _this28._added = !1, _this28.legendHitBoxes = [], _this28._hoveredItem = null, _this28.doughnutMode = !1, _this28.chart = t.chart, _this28.options = t.options, _this28.ctx = t.ctx, _this28.legendItems = void 0, _this28.columnSizes = void 0, _this28.lineWidths = void 0, _this28.maxHeight = void 0, _this28.maxWidth = void 0, _this28.top = void 0, _this28.bottom = void 0, _this28.left = void 0, _this28.right = void 0, _this28.height = void 0, _this28.width = void 0, _this28._margins = void 0, _this28.position = void 0, _this28.weight = void 0, _this28.fullSize = void 0;
    return _this28;
  }

  _createClass(Legend, [{
    key: "update",
    value: function update(t, e, i) {
      this.maxWidth = t, this.maxHeight = e, this._margins = i, this.setDimensions(), this.buildLabels(), this.fit();
    }
  }, {
    key: "setDimensions",
    value: function setDimensions() {
      this.isHorizontal() ? (this.width = this.maxWidth, this.left = this._margins.left, this.right = this.width) : (this.height = this.maxHeight, this.top = this._margins.top, this.bottom = this.height);
    }
  }, {
    key: "buildLabels",
    value: function buildLabels() {
      var _this29 = this;

      var i = this.options.labels || {};
      var t = (0, _helpersSegment.Q)(i.generateLabels, [this.chart], this) || [];
      i.filter && (t = t.filter(function (t) {
        return i.filter(t, _this29.chart.data);
      })), i.sort && (t = t.sort(function (t, e) {
        return i.sort(t, e, _this29.chart.data);
      })), this.options.reverse && t.reverse(), this.legendItems = t;
    }
  }, {
    key: "fit",
    value: function fit() {
      var i = this.options,
          a = this.ctx;

      if (i.display) {
        var s = i.labels,
            n = (0, _helpersSegment.a0)(s.font),
            r = n.size,
            o = this._computeTitleHeight(),
            _getBoxSize = getBoxSize(s, r),
            s = _getBoxSize.boxWidth,
            l = _getBoxSize.itemHeight;

        var t, e;
        a.font = n.string, this.isHorizontal() ? (t = this.maxWidth, e = this._fitRows(o, r, s, l) + 10) : (e = this.maxHeight, t = this._fitCols(o, n, s, l) + 10), this.width = Math.min(t, i.maxWidth || this.maxWidth), this.height = Math.min(e, i.maxHeight || this.maxHeight);
      } else this.width = this.height = 0;
    }
  }, {
    key: "_fitRows",
    value: function _fitRows(t, i, a, s) {
      var n = this.ctx,
          r = this.maxWidth,
          o = this.options.labels.padding,
          l = this.legendHitBoxes = [],
          h = this.lineWidths = [0],
          d = s + o;
      var c = t,
          u = (n.textAlign = "left", n.textBaseline = "middle", -1),
          g = -d;
      return this.legendItems.forEach(function (t, e) {
        t = a + i / 2 + n.measureText(t.text).width;
        (0 === e || h[h.length - 1] + t + 2 * o > r) && (c += d, h[h.length - (0 < e ? 0 : 1)] = 0, g += d, u++), l[e] = {
          left: 0,
          top: g,
          row: u,
          width: t,
          height: s
        }, h[h.length - 1] += t + o;
      }), c;
    }
  }, {
    key: "_fitCols",
    value: function _fitCols(t, a, s, n) {
      var r = this.ctx,
          e = this.maxHeight,
          o = this.options.labels.padding,
          l = this.legendHitBoxes = [],
          h = this.columnSizes = [],
          d = e - t;
      var c = o,
          u = 0,
          g = 0,
          p = 0,
          f = 0;
      return this.legendItems.forEach(function (t, e) {
        var _calculateItemSize = calculateItemSize(s, a, r, t, n),
            t = _calculateItemSize.itemWidth,
            i = _calculateItemSize.itemHeight;

        0 < e && g + i + 2 * o > d && (c += u + o, h.push({
          width: u,
          height: g
        }), p += u + o, f++, u = g = 0), l[e] = {
          left: p,
          top: g,
          col: f,
          width: t,
          height: i
        }, u = Math.max(u, t), g += i + o;
      }), c += u, h.push({
        width: u,
        height: g
      }), c;
    }
  }, {
    key: "adjustHitBoxes",
    value: function adjustHitBoxes() {
      if (this.options.display) {
        var i = this._computeTitleHeight(),
            a = this.legendHitBoxes,
            _this$options15 = this.options,
            s = _this$options15.align,
            n = _this$options15.labels.padding,
            t = _this$options15.rtl;

        var r = (0, _helpersSegment.az)(t, this.left, this.width);

        if (this.isHorizontal()) {
          var _t53 = 0,
              e = (0, _helpersSegment.a2)(s, this.left + n, this.right - this.lineWidths[_t53]);

          var _iterator24 = _createForOfIteratorHelper(a),
              _step24;

          try {
            for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
              var o = _step24.value;
              _t53 !== o.row && (_t53 = o.row, e = (0, _helpersSegment.a2)(s, this.left + n, this.right - this.lineWidths[_t53])), o.top += this.top + i + n, o.left = r.leftForLtr(r.x(e), o.width), e += o.width + n;
            }
          } catch (err) {
            _iterator24.e(err);
          } finally {
            _iterator24.f();
          }
        } else {
          var _t54 = 0,
              _e21 = (0, _helpersSegment.a2)(s, this.top + i + n, this.bottom - this.columnSizes[_t54].height);

          var _iterator25 = _createForOfIteratorHelper(a),
              _step25;

          try {
            for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
              var l = _step25.value;
              l.col !== _t54 && (_t54 = l.col, _e21 = (0, _helpersSegment.a2)(s, this.top + i + n, this.bottom - this.columnSizes[_t54].height)), l.top = _e21, l.left += this.left + n, l.left = r.leftForLtr(r.x(l.left), l.width), _e21 += l.height + n;
            }
          } catch (err) {
            _iterator25.e(err);
          } finally {
            _iterator25.f();
          }
        }
      }
    }
  }, {
    key: "isHorizontal",
    value: function isHorizontal() {
      return "top" === this.options.position || "bottom" === this.options.position;
    }
  }, {
    key: "draw",
    value: function draw() {
      var t;
      this.options.display && (t = this.ctx, (0, _helpersSegment.Y)(t, this), this._draw(), (0, _helpersSegment.$)(t));
    }
  }, {
    key: "_draw",
    value: function _draw() {
      var _this30 = this;

      var u = this.options,
          g = this.columnSizes,
          p = this.lineWidths,
          f = this.ctx,
          m = u.align,
          v = u.labels,
          x = _helpersSegment.d.color,
          b = (0, _helpersSegment.az)(u.rtl, this.left, this.width),
          _ = (0, _helpersSegment.a0)(v.font),
          y = v["padding"],
          k = _.size,
          S = k / 2;

      var D;
      this.drawTitle(), f.textAlign = b.textAlign("left"), f.textBaseline = "middle", f.lineWidth = .5, f.font = _.string;

      var _getBoxSize2 = getBoxSize(v, k),
          M = _getBoxSize2.boxWidth,
          P = _getBoxSize2.boxHeight,
          A = _getBoxSize2.itemHeight,
          w = this.isHorizontal(),
          C = this._computeTitleHeight(),
          O = (D = w ? {
        x: (0, _helpersSegment.a2)(m, this.left + y, this.right - p[0]),
        y: this.top + y + C,
        line: 0
      } : {
        x: this.left + y,
        y: (0, _helpersSegment.a2)(m, this.top + C + y, this.bottom - g[0].height),
        line: 0
      }, (0, _helpersSegment.aA)(this.ctx, u.textDirection), A + y);

      this.legendItems.forEach(function (t, e) {
        f.strokeStyle = t.fontColor, f.fillStyle = t.fontColor;
        var i = f.measureText(t.text).width,
            a = b.textAlign(t.textAlign || (t.textAlign = v.textAlign)),
            i = M + S + i;
        var s = D.x,
            n = D.y;
        b.setWidth(_this30.width), w ? 0 < e && s + i + y > _this30.right && (n = D.y += O, D.line++, s = D.x = (0, _helpersSegment.a2)(m, _this30.left + y, _this30.right - p[D.line])) : 0 < e && n + O > _this30.bottom && (s = D.x = s + g[D.line].width + y, D.line++, n = D.y = (0, _helpersSegment.a2)(m, _this30.top + C + y, _this30.bottom - g[D.line].height));
        var r,
            o,
            l,
            h,
            d,
            c,
            e = b.x(s);
        e = e, h = n, d = t, isNaN(M) || M <= 0 || isNaN(P) || P < 0 || (f.save(), r = (0, _helpersSegment.v)(d.lineWidth, 1), f.fillStyle = (0, _helpersSegment.v)(d.fillStyle, x), f.lineCap = (0, _helpersSegment.v)(d.lineCap, "butt"), f.lineDashOffset = (0, _helpersSegment.v)(d.lineDashOffset, 0), f.lineJoin = (0, _helpersSegment.v)(d.lineJoin, "miter"), f.lineWidth = r, f.strokeStyle = (0, _helpersSegment.v)(d.strokeStyle, x), f.setLineDash((0, _helpersSegment.v)(d.lineDash, [])), v.usePointStyle ? (o = {
          radius: P * Math.SQRT2 / 2,
          pointStyle: d.pointStyle,
          rotation: d.rotation,
          borderWidth: r
        }, l = b.xPlus(e, M / 2), c = h + S, (0, _helpersSegment.aD)(f, o, l, c, v.pointStyleWidth && M)) : (o = h + Math.max((k - P) / 2, 0), l = b.leftForLtr(e, M), c = (0, _helpersSegment.aw)(d.borderRadius), f.beginPath(), Object.values(c).some(function (t) {
          return 0 !== t;
        }) ? (0, _helpersSegment.au)(f, {
          x: l,
          y: o,
          w: M,
          h: P,
          radius: c
        }) : f.rect(l, o, M, P), f.fill(), 0 !== r && f.stroke()), f.restore()), s = (0, _helpersSegment.aB)(a, s + M + S, w ? s + i : _this30.right, u.rtl), h = b.x(s), e = n, d = t, (0, _helpersSegment.Z)(f, d.text, h, e + A / 2, _, {
          strikethrough: d.hidden,
          textAlign: b.textAlign(d.textAlign)
        }), w ? D.x += i + y : "string" != typeof t.text ? (c = _.lineHeight, D.y += calculateLegendItemHeight(t, c) + y) : D.y += O;
      }), (0, _helpersSegment.aC)(this.ctx, u.textDirection);
    }
  }, {
    key: "drawTitle",
    value: function drawTitle() {
      var a = this.options,
          s = a.title,
          n = (0, _helpersSegment.a0)(s.font),
          r = (0, _helpersSegment.E)(s.padding);

      if (s.display) {
        var h = (0, _helpersSegment.az)(a.rtl, this.left, this.width),
            d = this.ctx;
        var o = s.position,
            l = n.size / 2,
            r = r.top + l;
        var t,
            e = this.left,
            i = this.width;
        this.isHorizontal() ? (i = Math.max.apply(Math, _toConsumableArray(this.lineWidths)), t = this.top + r, e = (0, _helpersSegment.a2)(a.align, e, this.right - i)) : (l = this.columnSizes.reduce(function (t, e) {
          return Math.max(t, e.height);
        }, 0), t = r + (0, _helpersSegment.a2)(a.align, this.top, this.bottom - l - a.labels.padding - this._computeTitleHeight()));
        r = (0, _helpersSegment.a2)(o, e, e + i);
        d.textAlign = h.textAlign((0, _helpersSegment.a1)(o)), d.textBaseline = "middle", d.strokeStyle = s.color, d.fillStyle = s.color, d.font = n.string, (0, _helpersSegment.Z)(d, s.text, r, t, n);
      }
    }
  }, {
    key: "_computeTitleHeight",
    value: function _computeTitleHeight() {
      var t = this.options.title,
          e = (0, _helpersSegment.a0)(t.font),
          i = (0, _helpersSegment.E)(t.padding);
      return t.display ? e.lineHeight + i.height : 0;
    }
  }, {
    key: "_getLegendItemAt",
    value: function _getLegendItemAt(t, e) {
      var i, a, s;
      if ((0, _helpersSegment.aj)(t, this.left, this.right) && (0, _helpersSegment.aj)(e, this.top, this.bottom)) for (s = this.legendHitBoxes, i = 0; i < s.length; ++i) {
        if (a = s[i], (0, _helpersSegment.aj)(t, a.left, a.left + a.width) && (0, _helpersSegment.aj)(e, a.top, a.top + a.height)) return this.legendItems[i];
      }
      return null;
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(t) {
      var e,
          i,
          a,
          s = this.options;
      isListened(t.type, s) && (e = this._getLegendItemAt(t.x, t.y), "mousemove" === t.type || "mouseout" === t.type ? (i = this._hoveredItem, a = itemsEqual(i, e), i && !a && (0, _helpersSegment.Q)(s.onLeave, [t, i, this], this), (this._hoveredItem = e) && !a && (0, _helpersSegment.Q)(s.onHover, [t, e, this], this)) : e && (0, _helpersSegment.Q)(s.onClick, [t, e, this], this));
    }
  }]);

  return Legend;
}(Element);

function calculateItemSize(t, e, i, a, s) {
  return {
    itemWidth: calculateItemWidth(a, t, e, i),
    itemHeight: calculateItemHeight(s, a, e.lineHeight)
  };
}

function calculateItemWidth(t, e, i, a) {
  var s = t.text;
  return s && "string" != typeof s && (s = s.reduce(function (t, e) {
    return t.length > e.length ? t : e;
  })), e + i.size / 2 + a.measureText(s).width;
}

function calculateItemHeight(t, e, i) {
  var a = t;
  return a = "string" != typeof e.text ? calculateLegendItemHeight(e, i) : a;
}

function calculateLegendItemHeight(t, e) {
  return e * (t.text ? t.text.length : 0);
}

function isListened(t, e) {
  return !("mousemove" !== t && "mouseout" !== t || !e.onHover && !e.onLeave) || !(!e.onClick || "click" !== t && "mouseup" !== t);
}

var plugin_legend = {
  id: "legend",
  _element: Legend,
  start: function start(t, e, i) {
    var a = t.legend = new Legend({
      ctx: t.ctx,
      options: i,
      chart: t
    });
    layouts.configure(t, a, i), layouts.addBox(t, a);
  },
  stop: function stop(t) {
    layouts.removeBox(t, t.legend), delete t.legend;
  },
  beforeUpdate: function beforeUpdate(t, e, i) {
    var a = t.legend;
    layouts.configure(t, a, i), a.options = i;
  },
  afterUpdate: function afterUpdate(t) {
    var e = t.legend;
    e.buildLabels(), e.adjustHitBoxes();
  },
  afterEvent: function afterEvent(t, e) {
    e.replay || t.legend.handleEvent(e.event);
  },
  defaults: {
    display: !0,
    position: "top",
    align: "center",
    fullSize: !0,
    reverse: !1,
    weight: 1e3,
    onClick: function onClick(t, e, i) {
      var a = e.datasetIndex;
      var s = i.chart;
      s.isDatasetVisible(a) ? (s.hide(a), e.hidden = !0) : (s.show(a), e.hidden = !1);
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: function color(t) {
        return t.chart.options.color;
      },
      boxWidth: 40,
      padding: 10,
      generateLabels: function generateLabels(t) {
        var a = t.data.datasets,
            _t$legend$options$lab = t.legend.options["labels"],
            s = _t$legend$options$lab.usePointStyle,
            n = _t$legend$options$lab.pointStyle,
            r = _t$legend$options$lab.textAlign,
            o = _t$legend$options$lab.color,
            l = _t$legend$options$lab.useBorderRadius,
            h = _t$legend$options$lab.borderRadius;
        return t._getSortedDatasetMetas().map(function (t) {
          var e = t.controller.getStyle(s ? 0 : void 0),
              i = (0, _helpersSegment.E)(e.borderWidth);
          return {
            text: a[t.index].label,
            fillStyle: e.backgroundColor,
            fontColor: o,
            hidden: !t.visible,
            lineCap: e.borderCapStyle,
            lineDash: e.borderDash,
            lineDashOffset: e.borderDashOffset,
            lineJoin: e.borderJoinStyle,
            lineWidth: (i.width + i.height) / 4,
            strokeStyle: e.borderColor,
            pointStyle: n || e.pointStyle,
            rotation: e.rotation,
            textAlign: r || e.textAlign,
            borderRadius: l && (h || e.borderRadius),
            datasetIndex: t.index
          };
        }, this);
      }
    },
    title: {
      color: function color(t) {
        return t.chart.options.color;
      },
      display: !1,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: function _scriptable(t) {
      return !t.startsWith("on");
    },
    labels: {
      _scriptable: function _scriptable(t) {
        return !["generateLabels", "filter", "sort"].includes(t);
      }
    }
  }
};
exports.Legend = plugin_legend;

var Title = /*#__PURE__*/function (_Element7) {
  _inherits(Title, _Element7);

  var _super17 = _createSuper(Title);

  function Title(t) {
    var _this31;

    _classCallCheck(this, Title);

    _this31 = _super17.call(this), _this31.chart = t.chart, _this31.options = t.options, _this31.ctx = t.ctx, _this31._padding = void 0, _this31.top = void 0, _this31.bottom = void 0, _this31.left = void 0, _this31.right = void 0, _this31.width = void 0, _this31.height = void 0, _this31.position = void 0, _this31.weight = void 0, _this31.fullSize = void 0;
    return _this31;
  }

  _createClass(Title, [{
    key: "update",
    value: function update(t, e) {
      var i = this.options;
      this.left = 0, this.top = 0, i.display ? (this.width = this.right = t, this.height = this.bottom = e, t = (0, _helpersSegment.b)(i.text) ? i.text.length : 1, this._padding = (0, _helpersSegment.E)(i.padding), e = t * (0, _helpersSegment.a0)(i.font).lineHeight + this._padding.height, this.isHorizontal() ? this.height = e : this.width = e) : this.width = this.height = this.right = this.bottom = 0;
    }
  }, {
    key: "isHorizontal",
    value: function isHorizontal() {
      var t = this.options.position;
      return "top" === t || "bottom" === t;
    }
  }, {
    key: "_drawArgs",
    value: function _drawArgs(t) {
      var e = this.top,
          i = this.left,
          a = this.bottom,
          s = this.right,
          n = this.options,
          r = n.align;
      var o = 0,
          l,
          h,
          d;
      return l = this.isHorizontal() ? (h = (0, _helpersSegment.a2)(r, i, s), d = e + t, s - i) : (o = "left" === n.position ? (h = i + t, d = (0, _helpersSegment.a2)(r, a, e), -.5 * _helpersSegment.P) : (h = s - t, d = (0, _helpersSegment.a2)(r, e, a), .5 * _helpersSegment.P), a - e), {
        titleX: h,
        titleY: d,
        maxWidth: l,
        rotation: o
      };
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this$_drawArgs;

      var t,
          e,
          i,
          a,
          s,
          n = this.ctx,
          r = this.options;
      r.display && (e = (t = (0, _helpersSegment.a0)(r.font)).lineHeight / 2 + this._padding.top, (_this$_drawArgs = this._drawArgs(e), e = _this$_drawArgs.titleX, i = _this$_drawArgs.titleY, a = _this$_drawArgs.maxWidth, s = _this$_drawArgs.rotation, _this$_drawArgs), (0, _helpersSegment.Z)(n, r.text, 0, 0, t, {
        color: r.color,
        maxWidth: a,
        rotation: s,
        textAlign: (0, _helpersSegment.a1)(r.align),
        textBaseline: "middle",
        translation: [e, i]
      }));
    }
  }]);

  return Title;
}(Element);

function createTitle(t, e) {
  var i = new Title({
    ctx: t.ctx,
    options: e,
    chart: t
  });
  layouts.configure(t, i, e), layouts.addBox(t, i), t.titleBlock = i;
}

var plugin_title = {
  id: "title",
  _element: Title,
  start: function start(t, e, i) {
    createTitle(t, i);
  },
  stop: function stop(t) {
    var e = t.titleBlock;
    layouts.removeBox(t, e), delete t.titleBlock;
  },
  beforeUpdate: function beforeUpdate(t, e, i) {
    var a = t.titleBlock;
    layouts.configure(t, a, i), a.options = i;
  },
  defaults: {
    align: "center",
    display: !1,
    font: {
      weight: "bold"
    },
    fullSize: !0,
    padding: 10,
    position: "top",
    text: "",
    weight: 2e3
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: !0,
    _indexable: !1
  }
};
exports.Title = plugin_title;
var map = new WeakMap();
var plugin_subtitle = {
  id: "subtitle",
  start: function start(t, e, i) {
    var a = new Title({
      ctx: t.ctx,
      options: i,
      chart: t
    });
    layouts.configure(t, a, i), layouts.addBox(t, a), map.set(t, a);
  },
  stop: function stop(t) {
    layouts.removeBox(t, map.get(t)), map["delete"](t);
  },
  beforeUpdate: function beforeUpdate(t, e, i) {
    var a = map.get(t);
    layouts.configure(t, a, i), a.options = i;
  },
  defaults: {
    align: "center",
    display: !1,
    font: {
      weight: "normal"
    },
    fullSize: !0,
    padding: 0,
    position: "top",
    text: "",
    weight: 1500
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: !0,
    _indexable: !1
  }
};
exports.SubTitle = plugin_subtitle;
var positioners = {
  average: function average(t) {
    if (!t.length) return !1;
    var e,
        i,
        a = 0,
        s = 0,
        n = 0;

    for (e = 0, i = t.length; e < i; ++e) {
      var o = t[e].element;
      var r;
      o && o.hasValue() && (r = o.tooltipPosition(), a += r.x, s += r.y, ++n);
    }

    return {
      x: a / n,
      y: s / n
    };
  },
  nearest: function nearest(t, e) {
    if (!t.length) return !1;
    var i = e.x,
        a = e.y,
        s = Number.POSITIVE_INFINITY,
        n,
        r,
        o;

    for (n = 0, r = t.length; n < r; ++n) {
      var d = t[n].element;
      var l;
      d && d.hasValue() && (l = d.getCenterPoint(), (l = (0, _helpersSegment.aE)(e, l)) < s && (s = l, o = d));
    }

    var h;
    return o && (h = o.tooltipPosition(), i = h.x, a = h.y), {
      x: i,
      y: a
    };
  }
};

function pushOrConcat(t, e) {
  return e && ((0, _helpersSegment.b)(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;
}

function splitNewlines(t) {
  return ("string" == typeof t || t instanceof String) && -1 < t.indexOf("\n") ? t.split("\n") : t;
}

function createTooltipItem(t, e) {
  var _e22 = e,
      e = _e22.element,
      i = _e22.datasetIndex,
      a = _e22.index;
  var s = t.getDatasetMeta(i).controller;

  var _s$getLabelAndValue = s.getLabelAndValue(a),
      n = _s$getLabelAndValue.label,
      r = _s$getLabelAndValue.value;

  return {
    chart: t,
    label: n,
    parsed: s.getParsed(a),
    raw: t.data.datasets[i].data[a],
    formattedValue: r,
    dataset: s.getDataset(),
    dataIndex: a,
    datasetIndex: i,
    element: e
  };
}

function getTooltipSize(t, e) {
  var i = t.chart.ctx,
      a = t.body,
      s = t.footer,
      n = t.title;
  var r = e.boxWidth,
      o = e.boxHeight,
      l = (0, _helpersSegment.a0)(e.bodyFont),
      h = (0, _helpersSegment.a0)(e.titleFont),
      d = (0, _helpersSegment.a0)(e.footerFont),
      c = n.length,
      u = s.length,
      g = a.length,
      p = (0, _helpersSegment.E)(e.padding);
  var f = p.height,
      m = 0;
  var v = a.reduce(function (t, e) {
    return t + e.before.length + e.lines.length + e.after.length;
  }, 0);
  v += t.beforeBody.length + t.afterBody.length, c && (f += c * h.lineHeight + (c - 1) * e.titleSpacing + e.titleMarginBottom), v && (c = e.displayColors ? Math.max(o, l.lineHeight) : l.lineHeight, f += g * c + (v - g) * l.lineHeight + (v - 1) * e.bodySpacing), u && (f += e.footerMarginTop + u * d.lineHeight + (u - 1) * e.footerSpacing);
  var x = 0;

  function b(t) {
    m = Math.max(m, i.measureText(t).width + x);
  }

  return i.save(), i.font = h.string, (0, _helpersSegment.F)(t.title, b), i.font = l.string, (0, _helpersSegment.F)(t.beforeBody.concat(t.afterBody), b), x = e.displayColors ? r + 2 + e.boxPadding : 0, (0, _helpersSegment.F)(a, function (t) {
    (0, _helpersSegment.F)(t.before, b), (0, _helpersSegment.F)(t.lines, b), (0, _helpersSegment.F)(t.after, b);
  }), x = 0, i.font = d.string, (0, _helpersSegment.F)(t.footer, b), i.restore(), {
    width: m += p.width,
    height: f
  };
}

function determineYAlign(t, e) {
  var _e23 = e,
      e = _e23.y,
      i = _e23.height;
  return e < i / 2 ? "top" : e > t.height - i / 2 ? "bottom" : "center";
}

function doesNotFitWithAlign(t, e, i, a) {
  var _a2 = a,
      a = _a2.x,
      s = _a2.width,
      i = i.caretSize + i.caretPadding;
  return "left" === t && a + s + i > e.width || "right" === t && a - s - i < 0 || void 0;
}

function determineXAlign(t, e, i, a) {
  var s = i.x,
      n = i.width,
      r = t.width,
      _t$chartArea = t.chartArea,
      o = _t$chartArea.left,
      l = _t$chartArea.right;
  var h = "center";
  return "center" === a ? h = s <= (o + l) / 2 ? "left" : "right" : s <= n / 2 ? h = "left" : r - n / 2 <= s && (h = "right"), h = doesNotFitWithAlign(h, t, e, i) ? "center" : h;
}

function determineAlignment(t, e, i) {
  var a = i.yAlign || e.yAlign || determineYAlign(t, i);
  return {
    xAlign: i.xAlign || e.xAlign || determineXAlign(t, e, i, a),
    yAlign: a
  };
}

function alignX(t, e) {
  var i = t.x,
      a = t.width;
  return "right" === e ? i -= a : "center" === e && (i -= a / 2), i;
}

function alignY(t, e, i) {
  var a = t.y,
      s = t.height;
  return "top" === e ? a += i : a -= "bottom" === e ? s + i : s / 2, a;
}

function getBackgroundPoint(t, e, i, a) {
  var _t55 = t,
      t = _t55.caretSize,
      s = _t55.caretPadding,
      n = _t55.cornerRadius,
      _i10 = i,
      i = _i10.xAlign,
      r = _i10.yAlign,
      s = t + s,
      _toTRBLCorners = (0, _helpersSegment.aw)(n),
      n = _toTRBLCorners.topLeft,
      o = _toTRBLCorners.topRight,
      l = _toTRBLCorners.bottomLeft,
      h = _toTRBLCorners.bottomRight;

  var d = alignX(e, i);
  var c = alignY(e, r, s);
  return "center" === r ? "left" === i ? d += s : "right" === i && (d -= s) : "left" === i ? d -= Math.max(n, l) + t : "right" === i && (d += Math.max(o, h) + t), {
    x: (0, _helpersSegment.S)(d, 0, a.width - e.width),
    y: (0, _helpersSegment.S)(c, 0, a.height - e.height)
  };
}

function getAlignedX(t, e, i) {
  i = (0, _helpersSegment.E)(i.padding);
  return "center" === e ? t.x + t.width / 2 : "right" === e ? t.x + t.width - i.right : t.x + i.left;
}

function getBeforeAfterBodyLines(t) {
  return pushOrConcat([], splitNewlines(t));
}

function createTooltipContext(t, e, i) {
  return (0, _helpersSegment.j)(t, {
    tooltip: e,
    tooltipItems: i,
    type: "tooltip"
  });
}

function overrideCallbacks(t, e) {
  e = e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks;
  return e ? t.override(e) : t;
}

var defaultCallbacks = {
  beforeTitle: _helpersSegment.aF,
  title: function title(t) {
    if (0 < t.length) {
      var t = t[0],
          e = t.chart.data.labels,
          i = e ? e.length : 0;
      if (this && this.options && "dataset" === this.options.mode) return t.dataset.label || "";
      if (t.label) return t.label;
      if (0 < i && t.dataIndex < i) return e[t.dataIndex];
    }

    return "";
  },
  afterTitle: _helpersSegment.aF,
  beforeBody: _helpersSegment.aF,
  beforeLabel: _helpersSegment.aF,
  label: function label(t) {
    if (this && this.options && "dataset" === this.options.mode) return t.label + ": " + t.formattedValue || t.formattedValue;
    var e = t.dataset.label || "";
    e && (e += ": ");
    t = t.formattedValue;
    return (0, _helpersSegment.k)(t) || (e += t), e;
  },
  labelColor: function labelColor(t) {
    var e = t.chart.getDatasetMeta(t.datasetIndex);
    t = e.controller.getStyle(t.dataIndex);
    return {
      borderColor: t.borderColor,
      backgroundColor: t.backgroundColor,
      borderWidth: t.borderWidth,
      borderDash: t.borderDash,
      borderDashOffset: t.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor: function labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle: function labelPointStyle(t) {
    var e = t.chart.getDatasetMeta(t.datasetIndex);
    t = e.controller.getStyle(t.dataIndex);
    return {
      pointStyle: t.pointStyle,
      rotation: t.rotation
    };
  },
  afterLabel: _helpersSegment.aF,
  afterBody: _helpersSegment.aF,
  beforeFooter: _helpersSegment.aF,
  footer: _helpersSegment.aF,
  afterFooter: _helpersSegment.aF
};

function invokeCallbackWithFallback(t, e, i, a) {
  t = t[e].call(i, a);
  return void 0 === t ? defaultCallbacks[e].call(i, a) : t;
}

var Tooltip = /*#__PURE__*/function (_Element8) {
  _inherits(Tooltip, _Element8);

  var _super18 = _createSuper(Tooltip);

  function Tooltip(t) {
    var _this32;

    _classCallCheck(this, Tooltip);

    _this32 = _super18.call(this), _this32.opacity = 0, _this32._active = [], _this32._eventPosition = void 0, _this32._size = void 0, _this32._cachedAnimations = void 0, _this32._tooltipItems = [], _this32.$animations = void 0, _this32.$context = void 0, _this32.chart = t.chart, _this32.options = t.options, _this32.dataPoints = void 0, _this32.title = void 0, _this32.beforeBody = void 0, _this32.body = void 0, _this32.afterBody = void 0, _this32.footer = void 0, _this32.xAlign = void 0, _this32.yAlign = void 0, _this32.x = void 0, _this32.y = void 0, _this32.height = void 0, _this32.width = void 0, _this32.caretX = void 0, _this32.caretY = void 0, _this32.labelColors = void 0, _this32.labelPointStyles = void 0, _this32.labelTextColors = void 0;
    return _this32;
  }

  _createClass(Tooltip, [{
    key: "initialize",
    value: function initialize(t) {
      this.options = t, this._cachedAnimations = void 0, this.$context = void 0;
    }
  }, {
    key: "_resolveAnimations",
    value: function _resolveAnimations() {
      var t = this._cachedAnimations;
      if (t) return t;
      var t = this.chart,
          e = this.options.setContext(this.getContext()),
          t = e.enabled && t.options.animation && e.animations,
          e = new Animations(this.chart, t);
      return t._cacheable && (this._cachedAnimations = Object.freeze(e)), e;
    }
  }, {
    key: "getContext",
    value: function getContext() {
      return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
    }
  }, {
    key: "getTitle",
    value: function getTitle(t, e) {
      var e = e["callbacks"],
          i = invokeCallbackWithFallback(e, "beforeTitle", this, t),
          a = invokeCallbackWithFallback(e, "title", this, t),
          e = invokeCallbackWithFallback(e, "afterTitle", this, t),
          t = pushOrConcat([], splitNewlines(i));
      return t = pushOrConcat(t, splitNewlines(a)), pushOrConcat(t, splitNewlines(e));
    }
  }, {
    key: "getBeforeBody",
    value: function getBeforeBody(t, e) {
      return getBeforeAfterBodyLines(invokeCallbackWithFallback(e.callbacks, "beforeBody", this, t));
    }
  }, {
    key: "getBody",
    value: function getBody(t, e) {
      var _this33 = this;

      var a = e["callbacks"],
          s = [];
      return (0, _helpersSegment.F)(t, function (t) {
        var e = {
          before: [],
          lines: [],
          after: []
        },
            i = overrideCallbacks(a, t);
        pushOrConcat(e.before, splitNewlines(invokeCallbackWithFallback(i, "beforeLabel", _this33, t))), pushOrConcat(e.lines, invokeCallbackWithFallback(i, "label", _this33, t)), pushOrConcat(e.after, splitNewlines(invokeCallbackWithFallback(i, "afterLabel", _this33, t))), s.push(e);
      }), s;
    }
  }, {
    key: "getAfterBody",
    value: function getAfterBody(t, e) {
      return getBeforeAfterBodyLines(invokeCallbackWithFallback(e.callbacks, "afterBody", this, t));
    }
  }, {
    key: "getFooter",
    value: function getFooter(t, e) {
      var e = e["callbacks"],
          i = invokeCallbackWithFallback(e, "beforeFooter", this, t),
          a = invokeCallbackWithFallback(e, "footer", this, t),
          e = invokeCallbackWithFallback(e, "afterFooter", this, t),
          t = pushOrConcat([], splitNewlines(i));
      return t = pushOrConcat(t, splitNewlines(a)), pushOrConcat(t, splitNewlines(e));
    }
  }, {
    key: "_createItems",
    value: function _createItems(a) {
      var _this34 = this;

      var t = this._active;
      var s = this.chart.data,
          i = [],
          n = [],
          r = [];
      var e = [],
          o,
          l;

      for (o = 0, l = t.length; o < l; ++o) {
        e.push(createTooltipItem(this.chart, t[o]));
      }

      return a.filter && (e = e.filter(function (t, e, i) {
        return a.filter(t, e, i, s);
      })), a.itemSort && (e = e.sort(function (t, e) {
        return a.itemSort(t, e, s);
      })), (0, _helpersSegment.F)(e, function (t) {
        var e = overrideCallbacks(a.callbacks, t);
        i.push(invokeCallbackWithFallback(e, "labelColor", _this34, t)), n.push(invokeCallbackWithFallback(e, "labelPointStyle", _this34, t)), r.push(invokeCallbackWithFallback(e, "labelTextColor", _this34, t));
      }), this.labelColors = i, this.labelPointStyles = n, this.labelTextColors = r, this.dataPoints = e;
    }
  }, {
    key: "update",
    value: function update(t, e) {
      var i = this.options.setContext(this.getContext());
      var a,
          s,
          n,
          r = this._active;
      var o,
          l = [];
      r.length ? (r = positioners[i.position].call(this, r, this._eventPosition), l = this._createItems(i), this.title = this.getTitle(l, i), this.beforeBody = this.getBeforeBody(l, i), this.body = this.getBody(l, i), this.afterBody = this.getAfterBody(l, i), this.footer = this.getFooter(l, i), a = this._size = getTooltipSize(this, i), n = Object.assign({}, r, a), s = determineAlignment(this.chart, i, n), n = getBackgroundPoint(i, n, s, this.chart), this.xAlign = s.xAlign, this.yAlign = s.yAlign, o = {
        opacity: 1,
        x: n.x,
        y: n.y,
        width: a.width,
        height: a.height,
        caretX: r.x,
        caretY: r.y
      }) : 0 !== this.opacity && (o = {
        opacity: 0
      }), this._tooltipItems = l, this.$context = void 0, o && this._resolveAnimations().update(this, o), t && i.external && i.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay: e
      });
    }
  }, {
    key: "drawCaret",
    value: function drawCaret(t, e, i, a) {
      t = this.getCaretPosition(t, i, a);
      e.lineTo(t.x1, t.y1), e.lineTo(t.x2, t.y2), e.lineTo(t.x3, t.y3);
    }
  }, {
    key: "getCaretPosition",
    value: function getCaretPosition(t, e, i) {
      var a = this.xAlign,
          s = this.yAlign,
          _i11 = i,
          i = _i11.caretSize,
          n = _i11.cornerRadius,
          _toTRBLCorners2 = (0, _helpersSegment.aw)(n),
          n = _toTRBLCorners2.topLeft,
          r = _toTRBLCorners2.topRight,
          o = _toTRBLCorners2.bottomLeft,
          l = _toTRBLCorners2.bottomRight,
          _t56 = t,
          t = _t56.x,
          h = _t56.y,
          _e24 = e,
          e = _e24.width,
          d = _e24.height;

      var c, u, g, p, f, m;
      return "center" === s ? (f = h + d / 2, m = "left" === a ? (c = t, u = c - i, p = f + i, f - i) : (c = t + e, u = c + i, p = f - i, f + i), g = c) : (u = "left" === a ? t + Math.max(n, o) + i : "right" === a ? t + e - Math.max(r, l) - i : this.caretX, g = "top" === s ? (p = h, f = p - i, c = u - i, u + i) : (p = h + d, f = p + i, c = u + i, u - i), m = p), {
        x1: c,
        x2: u,
        x3: g,
        y1: p,
        y2: f,
        y3: m
      };
    }
  }, {
    key: "drawTitle",
    value: function drawTitle(t, e, i) {
      var a = this.title,
          s = a.length;
      var n, r, o;

      if (s) {
        var l = (0, _helpersSegment.az)(i.rtl, this.x, this.width);

        for (t.x = getAlignedX(this, i.titleAlign, i), e.textAlign = l.textAlign(i.titleAlign), e.textBaseline = "middle", n = (0, _helpersSegment.a0)(i.titleFont), r = i.titleSpacing, e.fillStyle = i.titleColor, e.font = n.string, o = 0; o < s; ++o) {
          e.fillText(a[o], l.x(t.x), t.y + n.lineHeight / 2), t.y += n.lineHeight + r, o + 1 === s && (t.y += i.titleMarginBottom - r);
        }
      }
    }
  }, {
    key: "_drawColorBox",
    value: function _drawColorBox(t, e, i, a, s) {
      var n,
          r = this.labelColors[i],
          o = this.labelPointStyles[i],
          l = s.boxHeight,
          h = s.boxWidth,
          d = (0, _helpersSegment.a0)(s.bodyFont),
          c = getAlignedX(this, "left", s),
          c = a.x(c),
          d = l < d.lineHeight ? (d.lineHeight - l) / 2 : 0,
          e = e.y + d;
      s.usePointStyle ? (d = {
        radius: Math.min(h, l) / 2,
        pointStyle: o.pointStyle,
        rotation: o.rotation,
        borderWidth: 1
      }, o = a.leftForLtr(c, h) + h / 2, n = e + l / 2, t.strokeStyle = s.multiKeyBackground, t.fillStyle = s.multiKeyBackground, (0, _helpersSegment.at)(t, d, o, n), t.strokeStyle = r.borderColor, t.fillStyle = r.backgroundColor, (0, _helpersSegment.at)(t, d, o, n)) : (t.lineWidth = (0, _helpersSegment.i)(r.borderWidth) ? Math.max.apply(Math, _toConsumableArray(Object.values(r.borderWidth))) : r.borderWidth || 1, t.strokeStyle = r.borderColor, t.setLineDash(r.borderDash || []), t.lineDashOffset = r.borderDashOffset || 0, d = a.leftForLtr(c, h), o = a.leftForLtr(a.xPlus(c, 1), h - 2), n = (0, _helpersSegment.aw)(r.borderRadius), Object.values(n).some(function (t) {
        return 0 !== t;
      }) ? (t.beginPath(), t.fillStyle = s.multiKeyBackground, (0, _helpersSegment.au)(t, {
        x: d,
        y: e,
        w: h,
        h: l,
        radius: n
      }), t.fill(), t.stroke(), t.fillStyle = r.backgroundColor, t.beginPath(), (0, _helpersSegment.au)(t, {
        x: o,
        y: e + 1,
        w: h - 2,
        h: l - 2,
        radius: n
      }), t.fill()) : (t.fillStyle = s.multiKeyBackground, t.fillRect(d, e, h, l), t.strokeRect(d, e, h, l), t.fillStyle = r.backgroundColor, t.fillRect(o, e + 1, h - 2, l - 2))), t.fillStyle = this.labelTextColors[i];
    }
  }, {
    key: "drawBody",
    value: function drawBody(e, i, t) {
      var a = this["body"];
      var s = t.bodySpacing,
          n = t.bodyAlign,
          r = t.displayColors,
          o = t.boxHeight,
          l = t.boxWidth,
          h = t.boxPadding;
      var d = (0, _helpersSegment.a0)(t.bodyFont);
      var c = d.lineHeight,
          u = 0;
      var g = (0, _helpersSegment.az)(t.rtl, this.x, this.width);

      function p(t) {
        i.fillText(t, g.x(e.x + u), e.y + c / 2), e.y += c + s;
      }

      var f = g.textAlign(n);

      var m, v, x, b, _, y, k;

      for (i.textAlign = n, i.textBaseline = "middle", i.font = d.string, e.x = getAlignedX(this, f, t), i.fillStyle = t.bodyColor, (0, _helpersSegment.F)(this.beforeBody, p), u = r && "right" !== f ? "center" === n ? l / 2 + h : l + 2 + h : 0, b = 0, y = a.length; b < y; ++b) {
        for (m = a[b], v = this.labelTextColors[b], i.fillStyle = v, (0, _helpersSegment.F)(m.before, p), x = m.lines, r && x.length && (this._drawColorBox(i, e, b, g, t), c = Math.max(d.lineHeight, o)), _ = 0, k = x.length; _ < k; ++_) {
          p(x[_]), c = d.lineHeight;
        }

        (0, _helpersSegment.F)(m.after, p);
      }

      u = 0, c = d.lineHeight, (0, _helpersSegment.F)(this.afterBody, p), e.y -= s;
    }
  }, {
    key: "drawFooter",
    value: function drawFooter(t, e, i) {
      var a = this.footer,
          s = a.length;
      var n, r;

      if (s) {
        var o = (0, _helpersSegment.az)(i.rtl, this.x, this.width);

        for (t.x = getAlignedX(this, i.footerAlign, i), t.y += i.footerMarginTop, e.textAlign = o.textAlign(i.footerAlign), e.textBaseline = "middle", n = (0, _helpersSegment.a0)(i.footerFont), e.fillStyle = i.footerColor, e.font = n.string, r = 0; r < s; ++r) {
          e.fillText(a[r], o.x(t.x), t.y + n.lineHeight / 2), t.y += n.lineHeight + i.footerSpacing;
        }
      }
    }
  }, {
    key: "drawBackground",
    value: function drawBackground(t, e, i, a) {
      var s = this.xAlign,
          n = this.yAlign,
          r = t.x,
          o = t.y,
          l = i.width,
          h = i.height,
          _toTRBLCorners3 = (0, _helpersSegment.aw)(a.cornerRadius),
          d = _toTRBLCorners3.topLeft,
          c = _toTRBLCorners3.topRight,
          u = _toTRBLCorners3.bottomLeft,
          g = _toTRBLCorners3.bottomRight;

      e.fillStyle = a.backgroundColor, e.strokeStyle = a.borderColor, e.lineWidth = a.borderWidth, e.beginPath(), e.moveTo(r + d, o), "top" === n && this.drawCaret(t, e, i, a), e.lineTo(r + l - c, o), e.quadraticCurveTo(r + l, o, r + l, o + c), "center" === n && "right" === s && this.drawCaret(t, e, i, a), e.lineTo(r + l, o + h - g), e.quadraticCurveTo(r + l, o + h, r + l - g, o + h), "bottom" === n && this.drawCaret(t, e, i, a), e.lineTo(r + u, o + h), e.quadraticCurveTo(r, o + h, r, o + h - u), "center" === n && "left" === s && this.drawCaret(t, e, i, a), e.lineTo(r, o + d), e.quadraticCurveTo(r, o, r + d, o), e.closePath(), e.fill(), 0 < a.borderWidth && e.stroke();
    }
  }, {
    key: "_updateAnimationTarget",
    value: function _updateAnimationTarget(t) {
      var e,
          i,
          a,
          s = this.chart,
          n = this.$animations,
          r = n && n.x,
          n = n && n.y;
      (r || n) && (e = positioners[t.position].call(this, this._active, this._eventPosition)) && (i = this._size = getTooltipSize(this, t), a = getBackgroundPoint(t, a = Object.assign({}, e, this._size), t = determineAlignment(s, t, a), s), r._to === a.x && n._to === a.y || (this.xAlign = t.xAlign, this.yAlign = t.yAlign, this.width = i.width, this.height = i.height, this.caretX = e.x, this.caretY = e.y, this._resolveAnimations().update(this, a)));
    }
  }, {
    key: "_willRender",
    value: function _willRender() {
      return !!this.opacity;
    }
  }, {
    key: "draw",
    value: function draw(t) {
      var e = this.options.setContext(this.getContext());
      var i = this.opacity;

      if (i) {
        this._updateAnimationTarget(e);

        var a = {
          width: this.width,
          height: this.height
        };
        var r = {
          x: this.x,
          y: this.y
        };
        i = Math.abs(i) < .001 ? 0 : i;
        var s = (0, _helpersSegment.E)(e.padding),
            n = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        e.enabled && n && (t.save(), t.globalAlpha = i, this.drawBackground(r, t, a, e), (0, _helpersSegment.aA)(t, e.textDirection), r.y += s.top, this.drawTitle(r, t, e), this.drawBody(r, t, e), this.drawFooter(r, t, e), (0, _helpersSegment.aC)(t, e.textDirection), t.restore());
      }
    }
  }, {
    key: "getActiveElements",
    value: function getActiveElements() {
      return this._active || [];
    }
  }, {
    key: "setActiveElements",
    value: function setActiveElements(t, e) {
      var _this35 = this;

      var i = this._active,
          t = t.map(function (_ref11) {
        var t = _ref11.datasetIndex,
            e = _ref11.index;

        var i = _this35.chart.getDatasetMeta(t);

        if (i) return {
          datasetIndex: t,
          element: i.data[e],
          index: e
        };
        throw new Error("Cannot find a dataset at index " + t);
      }),
          i = !(0, _helpersSegment.ah)(i, t),
          a = this._positionChanged(t, e);

      (i || a) && (this._active = t, this._eventPosition = e, this._ignoreReplayEvents = !0, this.update(!0));
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(t, e) {
      var _this36 = this;

      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;
      return function (i) {
        if (e && _this36._ignoreReplayEvents) return !1;
        _this36._ignoreReplayEvents = !1;

        var a = _this36.options,
            s = _this36._active || [],
            i = _this36._getActiveElements(t, s, e, i),
            n = _this36._positionChanged(i, t),
            s = e || !(0, _helpersSegment.ah)(i, s) || n;

        return s && (_this36._active = i, (a.enabled || a.external) && (_this36._eventPosition = {
          x: t.x,
          y: t.y
        }, _this36.update(!0, e))), s;
      }(i);
    }
  }, {
    key: "_getActiveElements",
    value: function _getActiveElements(t, e, i, a) {
      var s = this.options;
      if ("mouseout" === t.type) return [];
      if (!a) return e;
      var n = this.chart.getElementsAtEventForMode(t, s.mode, s, i);
      return s.reverse && n.reverse(), n;
    }
  }, {
    key: "_positionChanged",
    value: function _positionChanged(t, e) {
      var i = this.caretX,
          a = this.caretY,
          s = this.options,
          s = positioners[s.position].call(this, t, e);
      return !1 !== s && (i !== s.x || a !== s.y);
    }
  }]);

  return Tooltip;
}(Element);

_defineProperty(Tooltip, "positioners", positioners);

var plugin_tooltip = {
  id: "tooltip",
  _element: Tooltip,
  positioners: positioners,
  afterInit: function afterInit(t, e, i) {
    i && (t.tooltip = new Tooltip({
      chart: t,
      options: i
    }));
  },
  beforeUpdate: function beforeUpdate(t, e, i) {
    t.tooltip && t.tooltip.initialize(i);
  },
  reset: function reset(t, e, i) {
    t.tooltip && t.tooltip.initialize(i);
  },
  afterDraw: function afterDraw(t) {
    var e = t.tooltip;
    var i;
    e && e._willRender() && !(i = {
      tooltip: e
    }) !== t.notifyPlugins("beforeTooltipDraw", _objectSpread(_objectSpread({}, i), {}, {
      cancelable: !0
    })) && (e.draw(t.ctx), t.notifyPlugins("afterTooltipDraw", i));
  },
  afterEvent: function afterEvent(t, e) {
    var i;
    t.tooltip && (i = e.replay, t.tooltip.handleEvent(e.event, i, e.inChartArea) && (e.changed = !0));
  },
  defaults: {
    enabled: !0,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: function boxHeight(t, e) {
      return e.bodyFont.size;
    },
    boxWidth: function boxWidth(t, e) {
      return e.bodyFont.size;
    },
    multiKeyBackground: "#fff",
    displayColors: !0,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: ["x", "y", "width", "height", "caretX", "caretY"]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: defaultCallbacks
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: function _scriptable(t) {
      return "filter" !== t && "itemSort" !== t && "external" !== t;
    },
    _indexable: !1,
    callbacks: {
      _scriptable: !1,
      _indexable: !1
    },
    animation: {
      _fallback: !1
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: ["interaction"]
},
    plugins = Object.freeze({
  __proto__: null,
  Colors: plugin_colors,
  Decimation: plugin_decimation,
  Filler: index,
  Legend: plugin_legend,
  SubTitle: plugin_subtitle,
  Title: plugin_title,
  Tooltip: plugin_tooltip
});
exports.plugins = plugins;
exports.Tooltip = plugin_tooltip;

var addIfString = function addIfString(t, e, i, a) {
  return "string" == typeof e ? (i = t.push(e) - 1, a.unshift({
    index: i,
    label: e
  })) : isNaN(e) && (i = null), i;
};

function findOrAddLabel(t, e, i, a) {
  var s = t.indexOf(e);
  return -1 === s ? addIfString(t, e, i, a) : s !== t.lastIndexOf(e) ? i : s;
}

var validIndex = function validIndex(t, e) {
  return null === t ? null : (0, _helpersSegment.S)(Math.round(t), 0, e);
};

function _getLabelForValue(t) {
  var e = this.getLabels();
  return 0 <= t && t < e.length ? e[t] : t;
}

var CategoryScale = /*#__PURE__*/function (_Scale) {
  _inherits(CategoryScale, _Scale);

  var _super19 = _createSuper(CategoryScale);

  function CategoryScale(t) {
    var _this37;

    _classCallCheck(this, CategoryScale);

    _this37 = _super19.call(this, t), _this37._startValue = void 0, _this37._valueRange = 0, _this37._addedLabels = [];
    return _this37;
  }

  _createClass(CategoryScale, [{
    key: "init",
    value: function init(t) {
      var e = this._addedLabels;

      if (e.length) {
        var s = this.getLabels();

        var _iterator26 = _createForOfIteratorHelper(e),
            _step26;

        try {
          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
            var _step26$value = _step26.value,
                i = _step26$value.index,
                a = _step26$value.label;
            s[i] === a && s.splice(i, 1);
          }
        } catch (err) {
          _iterator26.e(err);
        } finally {
          _iterator26.f();
        }

        this._addedLabels = [];
      }

      _get(_getPrototypeOf(CategoryScale.prototype), "init", this).call(this, t);
    }
  }, {
    key: "parse",
    value: function parse(t, e) {
      if ((0, _helpersSegment.k)(t)) return null;
      var i = this.getLabels();
      return e = isFinite(e) && i[e] === t ? e : findOrAddLabel(i, t, (0, _helpersSegment.v)(e, t), this._addedLabels), validIndex(e, i.length - 1);
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var _this$getUserBounds2 = this.getUserBounds(),
          t = _this$getUserBounds2.minDefined,
          e = _this$getUserBounds2.maxDefined;

      var _this$getMinMax = this.getMinMax(!0),
          i = _this$getMinMax.min,
          a = _this$getMinMax.max;

      "ticks" === this.options.bounds && (t || (i = 0), e || (a = this.getLabels().length - 1)), this.min = i, this.max = a;
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      var e = this.min,
          i = this.max,
          t = this.options.offset;
      var a = [];
      var s = this.getLabels();
      s = 0 === e && i === s.length - 1 ? s : s.slice(e, i + 1), this._valueRange = Math.max(s.length - (t ? 0 : 1), 1), this._startValue = this.min - (t ? .5 : 0);

      for (var _t57 = e; _t57 <= i; _t57++) {
        a.push({
          value: _t57
        });
      }

      return a;
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(t) {
      return _getLabelForValue.call(this, t);
    }
  }, {
    key: "configure",
    value: function configure() {
      _get(_getPrototypeOf(CategoryScale.prototype), "configure", this).call(this), this.isHorizontal() || (this._reversePixels = !this._reversePixels);
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(t) {
      return null === (t = "number" != typeof t ? this.parse(t) : t) ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);
    }
  }, {
    key: "getPixelForTick",
    value: function getPixelForTick(t) {
      var e = this.ticks;
      return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(t) {
      return Math.round(this._startValue + this.getDecimalForPixel(t) * this._valueRange);
    }
  }, {
    key: "getBasePixel",
    value: function getBasePixel() {
      return this.bottom;
    }
  }]);

  return CategoryScale;
}(Scale);

exports.CategoryScale = CategoryScale;

_defineProperty(CategoryScale, "id", "category");

_defineProperty(CategoryScale, "defaults", {
  ticks: {
    callback: _getLabelForValue
  }
});

function generateTicks$1(t, e) {
  var i = [];
  var a = t.bounds,
      s = t.step,
      n = t.min,
      r = t.max,
      o = t.precision,
      l = t.count,
      h = t.maxTicks,
      d = t.maxDigits,
      c = t.includeBounds,
      u = s || 1,
      g = h - 1,
      _e25 = e,
      e = _e25.min,
      p = _e25.max,
      f = !(0, _helpersSegment.k)(n),
      m = !(0, _helpersSegment.k)(r),
      v = !(0, _helpersSegment.k)(l),
      d = (p - e) / (d + 1);

  var x = (0, _helpersSegment.aH)((p - e) / g / u) * u,
      b,
      _,
      y,
      k;

  if (x < 1e-14 && !f && !m) return [{
    value: e
  }, {
    value: p
  }];
  (k = Math.ceil(p / x) - Math.floor(e / x)) > g && (x = (0, _helpersSegment.aH)(k * x / g / u) * u), (0, _helpersSegment.k)(o) || (b = Math.pow(10, o), x = Math.ceil(x * b) / b), y = "ticks" === a ? (_ = Math.floor(e / x) * x, Math.ceil(p / x) * x) : (_ = e, p), f && m && s && (0, _helpersSegment.aI)((r - n) / s, x / 1e3) ? (k = Math.round(Math.min((r - n) / x, h)), x = (r - n) / k, _ = n, y = r) : v ? (_ = f ? n : _, y = m ? r : y, k = l - 1, x = (y - _) / k) : (k = (y - _) / x, k = (0, _helpersSegment.aJ)(k, Math.round(k), x / 1e3) ? Math.round(k) : Math.ceil(k));
  g = Math.max((0, _helpersSegment.aK)(x), (0, _helpersSegment.aK)(_));
  b = Math.pow(10, (0, _helpersSegment.k)(o) ? g : o), _ = Math.round(_ * b) / b, y = Math.round(y * b) / b;
  var S = 0;

  for (f && (c && _ !== n ? (i.push({
    value: n
  }), _ < n && S++, (0, _helpersSegment.aJ)(Math.round((_ + S * x) * b) / b, n, relativeLabelSize(n, d, t)) && S++) : _ < n && S++); S < k; ++S) {
    var D = Math.round((_ + S * x) * b) / b;
    if (m && r < D) break;
    i.push({
      value: D
    });
  }

  return m && c && y !== r ? i.length && (0, _helpersSegment.aJ)(i[i.length - 1].value, r, relativeLabelSize(r, d, t)) ? i[i.length - 1].value = r : i.push({
    value: r
  }) : m && y !== r || i.push({
    value: y
  }), i;
}

function relativeLabelSize(t, e, _ref12) {
  var i = _ref12.horizontal,
      a = _ref12.minRotation;
  a = (0, _helpersSegment.t)(a), i = (i ? Math.sin(a) : Math.cos(a)) || .001;
  return Math.min(e / i, .75 * e * ("" + t).length);
}

var LinearScaleBase = /*#__PURE__*/function (_Scale2) {
  _inherits(LinearScaleBase, _Scale2);

  var _super20 = _createSuper(LinearScaleBase);

  function LinearScaleBase(t) {
    var _this38;

    _classCallCheck(this, LinearScaleBase);

    _this38 = _super20.call(this, t), _this38.start = void 0, _this38.end = void 0, _this38._startValue = void 0, _this38._endValue = void 0, _this38._valueRange = 0;
    return _this38;
  }

  _createClass(LinearScaleBase, [{
    key: "parse",
    value: function parse(t, e) {
      return (0, _helpersSegment.k)(t) || ("number" == typeof t || t instanceof Number) && !isFinite(+t) ? null : +t;
    }
  }, {
    key: "handleTickRangeOptions",
    value: function handleTickRangeOptions() {
      var t = this.options["beginAtZero"];

      var _this$getUserBounds3 = this.getUserBounds(),
          e = _this$getUserBounds3.minDefined,
          i = _this$getUserBounds3.maxDefined;

      var a = this.min,
          s = this.max;

      var n,
          r,
          o = function o(t) {
        return a = e ? a : t;
      },
          l = function l(t) {
        return s = i ? s : t;
      };

      t && (r = (0, _helpersSegment.s)(a), n = (0, _helpersSegment.s)(s), r < 0 && n < 0 ? l(0) : 0 < r && 0 < n && o(0)), a === s && (r = 0 === s ? 1 : Math.abs(.05 * s), l(s + r), t || o(a - r)), this.min = a, this.max = s;
    }
  }, {
    key: "getTickLimit",
    value: function getTickLimit() {
      var _this$options$ticks = this.options.ticks,
          t = _this$options$ticks.maxTicksLimit,
          e = _this$options$ticks.stepSize,
          i;
      return e ? 1e3 < (i = Math.ceil(this.max / e) - Math.floor(this.min / e) + 1) && (console.warn("scales.".concat(this.id, ".ticks.stepSize: ").concat(e, " would result generating up to ").concat(i, " ticks. Limiting to 1000.")), i = 1e3) : (i = this.computeTickLimit(), t = t || 11), i = t ? Math.min(t, i) : i;
    }
  }, {
    key: "computeTickLimit",
    value: function computeTickLimit() {
      return Number.POSITIVE_INFINITY;
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      var t = this.options,
          e = t.ticks,
          i = this.getTickLimit();
      var a = generateTicks$1({
        maxTicks: Math.max(2, i),
        bounds: t.bounds,
        min: t.min,
        max: t.max,
        precision: e.precision,
        step: e.stepSize,
        count: e.count,
        maxDigits: this._maxDigits(),
        horizontal: this.isHorizontal(),
        minRotation: e.minRotation || 0,
        includeBounds: !1 !== e.includeBounds
      }, this._range || this);
      return "ticks" === t.bounds && (0, _helpersSegment.aG)(a, this, "value"), t.reverse ? (a.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), a;
    }
  }, {
    key: "configure",
    value: function configure() {
      var t = this.ticks;
      var e = this.min,
          i = this.max;
      _get(_getPrototypeOf(LinearScaleBase.prototype), "configure", this).call(this), this.options.offset && t.length && (t = (i - e) / Math.max(t.length - 1, 1) / 2, e -= t, i += t), this._startValue = e, this._endValue = i, this._valueRange = i - e;
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(t) {
      return (0, _helpersSegment.o)(t, this.chart.options.locale, this.options.ticks.format);
    }
  }]);

  return LinearScaleBase;
}(Scale);

var LinearScale = /*#__PURE__*/function (_LinearScaleBase) {
  _inherits(LinearScale, _LinearScaleBase);

  var _super21 = _createSuper(LinearScale);

  function LinearScale() {
    _classCallCheck(this, LinearScale);

    return _super21.apply(this, arguments);
  }

  _createClass(LinearScale, [{
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var _this$getMinMax2 = this.getMinMax(!0),
          t = _this$getMinMax2.min,
          e = _this$getMinMax2.max;

      this.min = (0, _helpersSegment.g)(t) ? t : 0, this.max = (0, _helpersSegment.g)(e) ? e : 1, this.handleTickRangeOptions();
    }
  }, {
    key: "computeTickLimit",
    value: function computeTickLimit() {
      var t = this.isHorizontal(),
          e = t ? this.width : this.height,
          i = (0, _helpersSegment.t)(this.options.ticks.minRotation),
          t = (t ? Math.sin(i) : Math.cos(i)) || .001,
          i = this._resolveTickFontOptions(0);

      return Math.ceil(e / Math.min(40, i.lineHeight / t));
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(t) {
      return null === t ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(t) {
      return this._startValue + this.getDecimalForPixel(t) * this._valueRange;
    }
  }]);

  return LinearScale;
}(LinearScaleBase);

exports.LinearScale = LinearScale;

_defineProperty(LinearScale, "id", "linear");

_defineProperty(LinearScale, "defaults", {
  ticks: {
    callback: _helpersSegment.aL.formatters.numeric
  }
});

var log10Floor = function log10Floor(t) {
  return Math.floor((0, _helpersSegment.aM)(t));
},
    changeExponent = function changeExponent(t, e) {
  return Math.pow(10, log10Floor(t) + e);
};

function isMajor(t) {
  return 1 == t / Math.pow(10, log10Floor(t));
}

function steps(t, e, i) {
  i = Math.pow(10, i), t = Math.floor(t / i);
  return Math.ceil(e / i) - t;
}

function startExp(t, e) {
  var i = e - t;
  var a = log10Floor(i);

  for (; 10 < steps(t, e, a);) {
    a++;
  }

  for (; steps(t, e, a) < 10;) {
    a--;
  }

  return Math.min(a, log10Floor(t));
}

function generateTicks(t, _ref13) {
  var e = _ref13.min,
      i = _ref13.max;
  e = (0, _helpersSegment.O)(t.min, e);
  var a = [];
  var s = log10Floor(e);
  var n = startExp(e, i),
      r = n < 0 ? Math.pow(10, Math.abs(n)) : 1;
  var o = Math.pow(10, n),
      l = s > n ? Math.pow(10, s) : 0,
      s = Math.round((e - l) * r) / r,
      h = Math.floor((e - l) / o / 10) * o * 10;
  var d = Math.floor((s - h) / Math.pow(10, n)),
      c = (0, _helpersSegment.O)(t.min, Math.round((l + h + d * Math.pow(10, n)) * r) / r);

  for (; c < i;) {
    a.push({
      value: c,
      major: isMajor(c),
      significand: d
    }), 10 <= d ? d = d < 15 ? 15 : 20 : d++, 20 <= d && (n++, d = 2, r = 0 <= n ? 1 : r), c = Math.round((l + h + d * Math.pow(10, n)) * r) / r;
  }

  e = (0, _helpersSegment.O)(t.max, c);
  return a.push({
    value: e,
    major: isMajor(e),
    significand: d
  }), a;
}

var LogarithmicScale = /*#__PURE__*/function (_Scale3) {
  _inherits(LogarithmicScale, _Scale3);

  var _super22 = _createSuper(LogarithmicScale);

  function LogarithmicScale(t) {
    var _this39;

    _classCallCheck(this, LogarithmicScale);

    _this39 = _super22.call(this, t), _this39.start = void 0, _this39.end = void 0, _this39._startValue = void 0, _this39._valueRange = 0;
    return _this39;
  }

  _createClass(LogarithmicScale, [{
    key: "parse",
    value: function parse(t, e) {
      t = LinearScaleBase.prototype.parse.apply(this, [t, e]);
      if (0 !== t) return (0, _helpersSegment.g)(t) && 0 < t ? t : null;
      this._zero = !0;
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var _this$getMinMax3 = this.getMinMax(!0),
          t = _this$getMinMax3.min,
          e = _this$getMinMax3.max;

      this.min = (0, _helpersSegment.g)(t) ? Math.max(0, t) : null, this.max = (0, _helpersSegment.g)(e) ? Math.max(0, e) : null, this.options.beginAtZero && (this._zero = !0), this._zero && this.min !== this._suggestedMin && !(0, _helpersSegment.g)(this._userMin) && (this.min = t === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0)), this.handleTickRangeOptions();
    }
  }, {
    key: "handleTickRangeOptions",
    value: function handleTickRangeOptions() {
      var _this$getUserBounds4 = this.getUserBounds(),
          e = _this$getUserBounds4.minDefined,
          i = _this$getUserBounds4.maxDefined;

      var a = this.min,
          s = this.max;

      var t = function t(_t58) {
        return a = e ? a : _t58;
      },
          n = function n(t) {
        return s = i ? s : t;
      };

      a === s && (a <= 0 ? (t(1), n(10)) : (t(changeExponent(a, -1)), n(changeExponent(s, 1)))), a <= 0 && t(changeExponent(s, -1)), s <= 0 && n(changeExponent(a, 1)), this.min = a, this.max = s;
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      var t = this.options;
      var e = generateTicks({
        min: this._userMin,
        max: this._userMax
      }, this);
      return "ticks" === t.bounds && (0, _helpersSegment.aG)(e, this, "value"), t.reverse ? (e.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), e;
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(t) {
      return void 0 === t ? "0" : (0, _helpersSegment.o)(t, this.chart.options.locale, this.options.ticks.format);
    }
  }, {
    key: "configure",
    value: function configure() {
      var t = this.min;
      _get(_getPrototypeOf(LogarithmicScale.prototype), "configure", this).call(this), this._startValue = (0, _helpersSegment.aM)(t), this._valueRange = (0, _helpersSegment.aM)(this.max) - (0, _helpersSegment.aM)(t);
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(t) {
      return null === (t = void 0 !== t && 0 !== t ? t : this.min) || isNaN(t) ? NaN : this.getPixelForDecimal(t === this.min ? 0 : ((0, _helpersSegment.aM)(t) - this._startValue) / this._valueRange);
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(t) {
      t = this.getDecimalForPixel(t);
      return Math.pow(10, this._startValue + t * this._valueRange);
    }
  }]);

  return LogarithmicScale;
}(Scale);

exports.LogarithmicScale = LogarithmicScale;

_defineProperty(LogarithmicScale, "id", "logarithmic");

_defineProperty(LogarithmicScale, "defaults", {
  ticks: {
    callback: _helpersSegment.aL.formatters.logarithmic,
    major: {
      enabled: !0
    }
  }
});

function getTickBackdropHeight(t) {
  var e = t.ticks;
  return e.display && t.display ? (t = (0, _helpersSegment.E)(e.backdropPadding), (0, _helpersSegment.v)(e.font && e.font.size, _helpersSegment.d.font.size) + t.height) : 0;
}

function measureLabelSize(t, e, i) {
  return i = (0, _helpersSegment.b)(i) ? i : [i], {
    w: (0, _helpersSegment.aN)(t, e.string, i),
    h: i.length * e.lineHeight
  };
}

function determineLimits(t, e, i, a, s) {
  return t === a || t === s ? {
    start: e - i / 2,
    end: e + i / 2
  } : t < a || s < t ? {
    start: e - i,
    end: e
  } : {
    start: e,
    end: e + i
  };
}

function fitWithPointLabels(e) {
  var i = {
    l: e.left + e._padding.left,
    r: e.right - e._padding.right,
    t: e.top + e._padding.top,
    b: e.bottom - e._padding.bottom
  },
      a = Object.assign({}, i);
  var s = [],
      n = [];
  var r = e._pointLabels.length;
  var o = e.options.pointLabels;
  var l = o.centerPointLabels ? _helpersSegment.P / r : 0;

  for (var t = 0; t < r; t++) {
    var h = o.setContext(e.getPointLabelContext(t)),
        d = (n[t] = h.padding, e.getPointPosition(t, e.drawingArea + n[t], l)),
        h = (0, _helpersSegment.a0)(h.font),
        h = measureLabelSize(e.ctx, h, e._pointLabels[t]),
        c = (s[t] = h, (0, _helpersSegment.ay)(e.getIndexAngle(t) + l)),
        u = Math.round((0, _helpersSegment.U)(c));
    updateLimits(a, i, c, determineLimits(u, d.x, h.w, 0, 180), determineLimits(u, d.y, h.h, 90, 270));
  }

  e.setCenterPoint(i.l - a.l, a.r - i.r, i.t - a.t, a.b - i.b), e._pointLabelItems = buildPointLabelItems(e, s, n);
}

function updateLimits(t, e, i, a, s) {
  var n = Math.abs(Math.sin(i)),
      i = Math.abs(Math.cos(i));
  var r = 0,
      o = 0;
  a.start < e.l ? (r = (e.l - a.start) / n, t.l = Math.min(t.l, e.l - r)) : a.end > e.r && (r = (a.end - e.r) / n, t.r = Math.max(t.r, e.r + r)), s.start < e.t ? (o = (e.t - s.start) / i, t.t = Math.min(t.t, e.t - o)) : s.end > e.b && (o = (s.end - e.b) / i, t.b = Math.max(t.b, e.b + o));
}

function createPointLabelItem(t, e, i) {
  var a = t.drawingArea,
      _i12 = i,
      i = _i12.extra,
      s = _i12.additionalAngle,
      n = _i12.padding,
      r = _i12.size,
      t = t.getPointPosition(e, a + i + n, s),
      e = Math.round((0, _helpersSegment.U)((0, _helpersSegment.ay)(t.angle + _helpersSegment.H))),
      a = yForAngle(t.y, r.h, e),
      i = getTextAlignForAngle(e),
      n = leftForTextAlign(t.x, r.w, i);
  return {
    visible: !0,
    x: t.x,
    y: a,
    textAlign: i,
    left: n,
    top: a,
    right: n + r.w,
    bottom: a + r.h
  };
}

function isNotOverlapped(t, e) {
  if (!e) return !0;
  var _t59 = t,
      t = _t59.left,
      i = _t59.top,
      a = _t59.right,
      s = _t59.bottom;
  return !((0, _helpersSegment.C)({
    x: t,
    y: i
  }, e) || (0, _helpersSegment.C)({
    x: t,
    y: s
  }, e) || (0, _helpersSegment.C)({
    x: a,
    y: i
  }, e) || (0, _helpersSegment.C)({
    x: a,
    y: s
  }, e));
}

function buildPointLabelItems(e, i, a) {
  var s = [];
  var n = e._pointLabels.length,
      t = e.options,
      _t$pointLabels = t.pointLabels,
      r = _t$pointLabels.centerPointLabels,
      o = _t$pointLabels.display;
  var l = {
    extra: getTickBackdropHeight(t) / 2,
    additionalAngle: r ? _helpersSegment.P / n : 0
  };
  var h;

  for (var _t60 = 0; _t60 < n; _t60++) {
    l.padding = a[_t60], l.size = i[_t60];
    var d = createPointLabelItem(e, _t60, l);
    s.push(d), "auto" === o && (d.visible = isNotOverlapped(d, h), d.visible && (h = d));
  }

  return s;
}

function getTextAlignForAngle(t) {
  return 0 === t || 180 === t ? "center" : t < 180 ? "left" : "right";
}

function leftForTextAlign(t, e, i) {
  return "right" === i ? t -= e : "center" === i && (t -= e / 2), t;
}

function yForAngle(t, e, i) {
  return 90 === i || 270 === i ? t -= e / 2 : (270 < i || i < 90) && (t -= e), t;
}

function drawPointLabelBox(t, e, i) {
  var a,
      s,
      _i13 = i,
      i = _i13.left,
      n = _i13.top,
      r = _i13.right,
      o = _i13.bottom,
      l = e["backdropColor"];
  (0, _helpersSegment.k)(l) || (a = (0, _helpersSegment.aw)(e.borderRadius), e = (0, _helpersSegment.E)(e.backdropPadding), t.fillStyle = l, l = i - e.left, s = n - e.top, r = r - i + e.width, i = o - n + e.height, Object.values(a).some(function (t) {
    return 0 !== t;
  }) ? (t.beginPath(), (0, _helpersSegment.au)(t, {
    x: l,
    y: s,
    w: r,
    h: i,
    radius: a
  }), t.fill()) : t.fillRect(l, s, r, i));
}

function drawPointLabels(e, i) {
  var a = e.ctx,
      s = e.options.pointLabels;

  for (var t = i - 1; 0 <= t; t--) {
    var _h2;

    var n,
        r,
        o,
        l,
        h = e._pointLabelItems[t];
    h.visible && (drawPointLabelBox(a, n = s.setContext(e.getPointLabelContext(t)), h), r = (0, _helpersSegment.a0)(n.font), (_h2 = h, h = _h2.x, o = _h2.y, l = _h2.textAlign, _h2), (0, _helpersSegment.Z)(a, e._pointLabels[t], h, o + r.lineHeight / 2, r, {
      color: n.color,
      textAlign: l,
      textBaseline: "middle"
    }));
  }
}

function pathRadiusLine(e, i, t, a) {
  var s = e["ctx"];
  if (t) s.arc(e.xCenter, e.yCenter, i, 0, _helpersSegment.T);else {
    var n = e.getPointPosition(0, i);
    s.moveTo(n.x, n.y);

    for (var _t61 = 1; _t61 < a; _t61++) {
      n = e.getPointPosition(_t61, i), s.lineTo(n.x, n.y);
    }
  }
}

function drawRadiusLine(t, e, i, a, s) {
  var n = t.ctx;
  var r = e.circular,
      _e26 = e,
      e = _e26.color,
      o = _e26.lineWidth;
  !r && !a || !e || !o || i < 0 || (n.save(), n.strokeStyle = e, n.lineWidth = o, n.setLineDash(s.dash), n.lineDashOffset = s.dashOffset, n.beginPath(), pathRadiusLine(t, i, r, a), n.closePath(), n.stroke(), n.restore());
}

function createPointLabelContext(t, e, i) {
  return (0, _helpersSegment.j)(t, {
    label: i,
    index: e,
    type: "pointLabel"
  });
}

var RadialLinearScale = /*#__PURE__*/function (_LinearScaleBase2) {
  _inherits(RadialLinearScale, _LinearScaleBase2);

  var _super23 = _createSuper(RadialLinearScale);

  function RadialLinearScale(t) {
    var _this40;

    _classCallCheck(this, RadialLinearScale);

    _this40 = _super23.call(this, t), _this40.xCenter = void 0, _this40.yCenter = void 0, _this40.drawingArea = void 0, _this40._pointLabels = [], _this40._pointLabelItems = [];
    return _this40;
  }

  _createClass(RadialLinearScale, [{
    key: "setDimensions",
    value: function setDimensions() {
      var t = this._padding = (0, _helpersSegment.E)(getTickBackdropHeight(this.options) / 2),
          e = this.width = this.maxWidth - t.width,
          i = this.height = this.maxHeight - t.height;
      this.xCenter = Math.floor(this.left + e / 2 + t.left), this.yCenter = Math.floor(this.top + i / 2 + t.top), this.drawingArea = Math.floor(Math.min(e, i) / 2);
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var _this$getMinMax4 = this.getMinMax(!1),
          t = _this$getMinMax4.min,
          e = _this$getMinMax4.max;

      this.min = (0, _helpersSegment.g)(t) && !isNaN(t) ? t : 0, this.max = (0, _helpersSegment.g)(e) && !isNaN(e) ? e : 0, this.handleTickRangeOptions();
    }
  }, {
    key: "computeTickLimit",
    value: function computeTickLimit() {
      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    }
  }, {
    key: "generateTickLabels",
    value: function generateTickLabels(t) {
      var _this41 = this;

      LinearScaleBase.prototype.generateTickLabels.call(this, t), this._pointLabels = this.getLabels().map(function (t, e) {
        t = (0, _helpersSegment.Q)(_this41.options.pointLabels.callback, [t, e], _this41);
        return t || 0 === t ? t : "";
      }).filter(function (t, e) {
        return _this41.chart.getDataVisibility(e);
      });
    }
  }, {
    key: "fit",
    value: function fit() {
      var t = this.options;
      t.display && t.pointLabels.display ? fitWithPointLabels(this) : this.setCenterPoint(0, 0, 0, 0);
    }
  }, {
    key: "setCenterPoint",
    value: function setCenterPoint(t, e, i, a) {
      this.xCenter += Math.floor((t - e) / 2), this.yCenter += Math.floor((i - a) / 2), this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(t, e, i, a));
    }
  }, {
    key: "getIndexAngle",
    value: function getIndexAngle(t) {
      var e = _helpersSegment.T / (this._pointLabels.length || 1),
          i = this.options.startAngle || 0;
      return (0, _helpersSegment.ay)(t * e + (0, _helpersSegment.t)(i));
    }
  }, {
    key: "getDistanceFromCenterForValue",
    value: function getDistanceFromCenterForValue(t) {
      if ((0, _helpersSegment.k)(t)) return NaN;
      var e = this.drawingArea / (this.max - this.min);
      return this.options.reverse ? (this.max - t) * e : (t - this.min) * e;
    }
  }, {
    key: "getValueForDistanceFromCenter",
    value: function getValueForDistanceFromCenter(t) {
      if ((0, _helpersSegment.k)(t)) return NaN;
      t /= this.drawingArea / (this.max - this.min);
      return this.options.reverse ? this.max - t : this.min + t;
    }
  }, {
    key: "getPointLabelContext",
    value: function getPointLabelContext(t) {
      var e = this._pointLabels || [];
      if (0 <= t && t < e.length) return e = e[t], createPointLabelContext(this.getContext(), t, e);
    }
  }, {
    key: "getPointPosition",
    value: function getPointPosition(t, e) {
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      t = this.getIndexAngle(t) - _helpersSegment.H + i;
      return {
        x: Math.cos(t) * e + this.xCenter,
        y: Math.sin(t) * e + this.yCenter,
        angle: t
      };
    }
  }, {
    key: "getPointPositionForValue",
    value: function getPointPositionForValue(t, e) {
      return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));
    }
  }, {
    key: "getBasePosition",
    value: function getBasePosition(t) {
      return this.getPointPositionForValue(t || 0, this.getBaseValue());
    }
  }, {
    key: "getPointLabelPosition",
    value: function getPointLabelPosition(t) {
      var _this$_pointLabelItem = this._pointLabelItems[t],
          t = _this$_pointLabelItem.left,
          e = _this$_pointLabelItem.top,
          i = _this$_pointLabelItem.right,
          a = _this$_pointLabelItem.bottom;
      return {
        left: t,
        top: e,
        right: i,
        bottom: a
      };
    }
  }, {
    key: "drawBackground",
    value: function drawBackground() {
      var _this$options16 = this.options,
          t = _this$options16.backgroundColor,
          e = _this$options16.grid.circular;

      if (t) {
        var i = this.ctx;
        i.save(), i.beginPath(), pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), e, this._pointLabels.length), i.closePath(), i.fillStyle = t, i.fill(), i.restore();
      }
    }
  }, {
    key: "drawGrid",
    value: function drawGrid() {
      var _this42 = this;

      var t = this.ctx;
      var e = this.options;
      var i = e.angleLines,
          a = e.grid,
          s = e.border,
          n = this._pointLabels.length;
      var r, o, l;

      if (e.pointLabels.display && drawPointLabels(this, n), a.display && this.ticks.forEach(function (t, e) {
        0 !== e && (o = _this42.getDistanceFromCenterForValue(t.value), t = _this42.getContext(e), e = a.setContext(t), t = s.setContext(t), drawRadiusLine(_this42, e, o, n, t));
      }), i.display) {
        for (t.save(), r = n - 1; 0 <= r; r--) {
          var h = i.setContext(this.getPointLabelContext(r)),
              d = h.color,
              c = h.lineWidth;
          c && d && (t.lineWidth = c, t.strokeStyle = d, t.setLineDash(h.borderDash), t.lineDashOffset = h.borderDashOffset, o = this.getDistanceFromCenterForValue(e.ticks.reverse ? this.min : this.max), l = this.getPointPosition(r, o), t.beginPath(), t.moveTo(this.xCenter, this.yCenter), t.lineTo(l.x, l.y), t.stroke());
        }

        t.restore();
      }
    }
  }, {
    key: "drawBorder",
    value: function drawBorder() {}
  }, {
    key: "drawLabels",
    value: function drawLabels() {
      var _this43 = this;

      var r = this.ctx,
          o = this.options,
          l = o.ticks;

      if (l.display) {
        var t = this.getIndexAngle(0);
        var s, n;
        r.save(), r.translate(this.xCenter, this.yCenter), r.rotate(t), r.textAlign = "center", r.textBaseline = "middle", this.ticks.forEach(function (t, e) {
          var i, a;
          0 === e && !o.reverse || (i = l.setContext(_this43.getContext(e)), a = (0, _helpersSegment.a0)(i.font), s = _this43.getDistanceFromCenterForValue(_this43.ticks[e].value), i.showLabelBackdrop && (r.font = a.string, n = r.measureText(t.label).width, r.fillStyle = i.backdropColor, e = (0, _helpersSegment.E)(i.backdropPadding), r.fillRect(-n / 2 - e.left, -s - a.size / 2 - e.top, n + e.width, a.size + e.height)), (0, _helpersSegment.Z)(r, t.label, 0, -s, a, {
            color: i.color,
            strokeColor: i.textStrokeColor,
            strokeWidth: i.textStrokeWidth
          }));
        }), r.restore();
      }
    }
  }, {
    key: "drawTitle",
    value: function drawTitle() {}
  }]);

  return RadialLinearScale;
}(LinearScaleBase);

exports.RadialLinearScale = RadialLinearScale;

_defineProperty(RadialLinearScale, "id", "radialLinear");

_defineProperty(RadialLinearScale, "defaults", {
  display: !0,
  animate: !0,
  position: "chartArea",
  angleLines: {
    display: !0,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0
  },
  grid: {
    circular: !1
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: !0,
    callback: _helpersSegment.aL.formatters.numeric
  },
  pointLabels: {
    backdropColor: void 0,
    backdropPadding: 2,
    display: !0,
    font: {
      size: 10
    },
    callback: function callback(t) {
      return t;
    },
    padding: 5,
    centerPointLabels: !1
  }
});

_defineProperty(RadialLinearScale, "defaultRoutes", {
  "angleLines.color": "borderColor",
  "pointLabels.color": "color",
  "ticks.color": "color"
});

_defineProperty(RadialLinearScale, "descriptors", {
  angleLines: {
    _fallback: "grid"
  }
});

var INTERVALS = {
  millisecond: {
    common: !0,
    size: 1,
    steps: 1e3
  },
  second: {
    common: !0,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: !0,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: !0,
    size: 36e5,
    steps: 24
  },
  day: {
    common: !0,
    size: 864e5,
    steps: 30
  },
  week: {
    common: !1,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: !0,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: !1,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: !0,
    size: 3154e7
  }
},
    UNITS = Object.keys(INTERVALS);

function sorter(t, e) {
  return t - e;
}

function _parse(t, e) {
  if ((0, _helpersSegment.k)(e)) return null;
  var i = t._adapter,
      _t$_parseOpts = t._parseOpts,
      a = _t$_parseOpts.parser,
      s = _t$_parseOpts.round,
      n = _t$_parseOpts.isoWeekday;
  var r = e;
  return "function" == typeof a && (r = a(r)), null === (r = (0, _helpersSegment.g)(r) ? r : "string" == typeof a ? i.parse(r, a) : i.parse(r)) ? null : +(r = s ? "week" !== s || !(0, _helpersSegment.x)(n) && !0 !== n ? i.startOf(r, s) : i.startOf(r, "isoWeek", n) : r);
}

function determineUnitForAutoTicks(e, i, a, s) {
  var n = UNITS.length;

  for (var t = UNITS.indexOf(e); t < n - 1; ++t) {
    var r = INTERVALS[UNITS[t]],
        o = r.steps || Number.MAX_SAFE_INTEGER;
    if (r.common && Math.ceil((a - i) / (o * r.size)) <= s) return UNITS[t];
  }

  return UNITS[n - 1];
}

function determineUnitForFormatting(e, i, a, s, n) {
  for (var t = UNITS.length - 1; t >= UNITS.indexOf(a); t--) {
    var r = UNITS[t];
    if (INTERVALS[r].common && e._adapter.diff(n, s, r) >= i - 1) return r;
  }

  return UNITS[a ? UNITS.indexOf(a) : 0];
}

function determineMajorUnit(i) {
  for (var t = UNITS.indexOf(i) + 1, e = UNITS.length; t < e; ++t) {
    if (INTERVALS[UNITS[t]].common) return UNITS[t];
  }
}

function addTick(t, e, i) {
  var _lookup2;

  var a, s;
  i ? i.length && ((_lookup2 = (0, _helpersSegment.aP)(i, e), a = _lookup2.lo, s = _lookup2.hi, _lookup2), t[i[a] >= e ? i[a] : i[s]] = !0) : t[e] = !0;
}

function setMajorTicks(t, e, i, a) {
  var s = t._adapter;
  var t = +s.startOf(e[0].value, a),
      n = e[e.length - 1].value;
  var r, o;

  for (r = t; r <= n; r = +s.add(r, 1, a)) {
    0 <= (o = i[r]) && (e[o].major = !0);
  }

  return e;
}

function ticksFromTimestamps(t, e, i) {
  var a = [],
      s = {};
  var n = e.length;
  var r, o;

  for (r = 0; r < n; ++r) {
    o = e[r], s[o] = r, a.push({
      value: o,
      major: !1
    });
  }

  return 0 !== n && i ? setMajorTicks(t, a, s, i) : a;
}

var TimeScale = /*#__PURE__*/function (_Scale4) {
  _inherits(TimeScale, _Scale4);

  var _super24 = _createSuper(TimeScale);

  function TimeScale(t) {
    var _this44;

    _classCallCheck(this, TimeScale);

    _this44 = _super24.call(this, t), _this44._cache = {
      data: [],
      labels: [],
      all: []
    }, _this44._unit = "day", _this44._majorUnit = void 0, _this44._offsets = {}, _this44._normalized = !1, _this44._parseOpts = void 0;
    return _this44;
  }

  _createClass(TimeScale, [{
    key: "init",
    value: function init(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var i = t.time || (t.time = {});
      var a = this._adapter = new adapters._date(t.adapters.date);
      a.init(e), (0, _helpersSegment.ab)(i.displayFormats, a.formats()), this._parseOpts = {
        parser: i.parser,
        round: i.round,
        isoWeekday: i.isoWeekday
      }, _get(_getPrototypeOf(TimeScale.prototype), "init", this).call(this, t), this._normalized = e.normalized;
    }
  }, {
    key: "parse",
    value: function parse(t, e) {
      return void 0 === t ? null : _parse(this, t);
    }
  }, {
    key: "beforeLayout",
    value: function beforeLayout() {
      _get(_getPrototypeOf(TimeScale.prototype), "beforeLayout", this).call(this), this._cache = {
        data: [],
        labels: [],
        all: []
      };
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var t = this.options;
      var e = this._adapter;
      var i = t.time.unit || "day";

      var _this$getUserBounds5 = this.getUserBounds(),
          a = _this$getUserBounds5.min,
          s = _this$getUserBounds5.max,
          n = _this$getUserBounds5.minDefined,
          r = _this$getUserBounds5.maxDefined;

      function o(t) {
        n || isNaN(t.min) || (a = Math.min(a, t.min)), r || isNaN(t.max) || (s = Math.max(s, t.max));
      }

      n && r || (o(this._getLabelBounds()), "ticks" === t.bounds && "labels" === t.ticks.source || o(this.getMinMax(!1))), a = (0, _helpersSegment.g)(a) && !isNaN(a) ? a : +e.startOf(Date.now(), i), s = (0, _helpersSegment.g)(s) && !isNaN(s) ? s : +e.endOf(Date.now(), i) + 1, this.min = Math.min(a, s - 1), this.max = Math.max(a + 1, s);
    }
  }, {
    key: "_getLabelBounds",
    value: function _getLabelBounds() {
      var t = this.getLabelTimestamps();
      var e = Number.POSITIVE_INFINITY,
          i = Number.NEGATIVE_INFINITY;
      return t.length && (e = t[0], i = t[t.length - 1]), {
        min: e,
        max: i
      };
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      var t = this.options,
          e = t.time,
          i = t.ticks,
          a = "labels" === i.source ? this.getLabelTimestamps() : this._generate(),
          s = ("ticks" === t.bounds && a.length && (this.min = this._userMin || a[0], this.max = this._userMax || a[a.length - 1]), this.min),
          n = this.max;
      var r = (0, _helpersSegment.aO)(a, s, n);
      return this._unit = e.unit || (i.autoSkip ? determineUnitForAutoTicks(e.minUnit, this.min, this.max, this._getLabelCapacity(s)) : determineUnitForFormatting(this, r.length, e.minUnit, this.min, this.max)), this._majorUnit = i.major.enabled && "year" !== this._unit ? determineMajorUnit(this._unit) : void 0, this.initOffsets(a), t.reverse && r.reverse(), ticksFromTimestamps(this, r, this._majorUnit);
    }
  }, {
    key: "afterAutoSkip",
    value: function afterAutoSkip() {
      this.options.offsetAfterAutoskip && this.initOffsets(this.ticks.map(function (t) {
        return +t.value;
      }));
    }
  }, {
    key: "initOffsets",
    value: function initOffsets() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var e = 0,
          i = 0;
      this.options.offset && t.length && (a = this.getDecimalForValue(t[0]), e = 1 === t.length ? 1 - a : (this.getDecimalForValue(t[1]) - a) / 2, a = this.getDecimalForValue(t[t.length - 1]), i = 1 === t.length ? a : (a - this.getDecimalForValue(t[t.length - 2])) / 2);
      var a = t.length < 3 ? .5 : .25;
      e = (0, _helpersSegment.S)(e, 0, a), i = (0, _helpersSegment.S)(i, 0, a), this._offsets = {
        start: e,
        end: i,
        factor: 1 / (e + 1 + i)
      };
    }
  }, {
    key: "_generate",
    value: function _generate() {
      var t = this._adapter;
      var e = this.min,
          i = this.max,
          a = this.options,
          s = a.time,
          n = s.unit || determineUnitForAutoTicks(s.minUnit, e, i, this._getLabelCapacity(e)),
          r = (0, _helpersSegment.v)(a.ticks.stepSize, 1),
          s = "week" === n && s.isoWeekday,
          o = (0, _helpersSegment.x)(s) || !0 === s,
          l = {};
      var h = e,
          d,
          c;
      if (o && (h = +t.startOf(h, "isoWeek", s)), h = +t.startOf(h, o ? "day" : n), t.diff(i, e, n) > 1e5 * r) throw new Error(e + " and " + i + " are too far apart with stepSize of " + r + " " + n);
      var u = "data" === a.ticks.source && this.getDataTimestamps();

      for (d = h, c = 0; d < i; d = +t.add(d, r, n), c++) {
        addTick(l, d, u);
      }

      return d !== i && "ticks" !== a.bounds && 1 !== c || addTick(l, d, u), Object.keys(l).sort(sorter).map(function (t) {
        return +t;
      });
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(t) {
      var e = this._adapter;
      var i = this.options.time;
      return i.tooltipFormat ? e.format(t, i.tooltipFormat) : e.format(t, i.displayFormats.datetime);
    }
  }, {
    key: "format",
    value: function format(t, e) {
      var i = this.options.time.displayFormats,
          a = this._unit,
          e = e || i[a];
      return this._adapter.format(t, e);
    }
  }, {
    key: "_tickFormatFunction",
    value: function _tickFormatFunction(t, e, i, a) {
      var s = this.options,
          n = s.ticks.callback;
      if (n) return (0, _helpersSegment.Q)(n, [t, e, i], this);
      var n = s.time.displayFormats,
          s = this._unit,
          r = this._majorUnit,
          s = s && n[s],
          n = r && n[r],
          i = i[e],
          e = r && n && i && i.major;
      return this._adapter.format(t, a || (e ? n : s));
    }
  }, {
    key: "generateTickLabels",
    value: function generateTickLabels(t) {
      var e, i, a;

      for (e = 0, i = t.length; e < i; ++e) {
        (a = t[e]).label = this._tickFormatFunction(a.value, e, t);
      }
    }
  }, {
    key: "getDecimalForValue",
    value: function getDecimalForValue(t) {
      return null === t ? NaN : (t - this.min) / (this.max - this.min);
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(t) {
      var e = this._offsets,
          t = this.getDecimalForValue(t);
      return this.getPixelForDecimal((e.start + t) * e.factor);
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(t) {
      var e = this._offsets,
          t = this.getDecimalForPixel(t) / e.factor - e.end;
      return this.min + t * (this.max - this.min);
    }
  }, {
    key: "_getLabelSize",
    value: function _getLabelSize(t) {
      var e = this.options.ticks,
          t = this.ctx.measureText(t).width,
          e = (0, _helpersSegment.t)(this.isHorizontal() ? e.maxRotation : e.minRotation),
          i = Math.cos(e),
          e = Math.sin(e),
          a = this._resolveTickFontOptions(0).size;

      return {
        w: t * i + a * e,
        h: t * e + a * i
      };
    }
  }, {
    key: "_getLabelCapacity",
    value: function _getLabelCapacity(t) {
      var e = this.options.time,
          i = e.displayFormats,
          e = i[e.unit] || i.millisecond,
          i = this._tickFormatFunction(t, 0, ticksFromTimestamps(this, [t], this._majorUnit), e),
          t = this._getLabelSize(i),
          e = Math.floor(this.isHorizontal() ? this.width / t.w : this.height / t.h) - 1;

      return 0 < e ? e : 1;
    }
  }, {
    key: "getDataTimestamps",
    value: function getDataTimestamps() {
      var t = this._cache.data || [],
          e,
          i;
      if (t.length) return t;
      var a = this.getMatchingVisibleMetas();
      if (this._normalized && a.length) return this._cache.data = a[0].controller.getAllParsedValues(this);

      for (e = 0, i = a.length; e < i; ++e) {
        t = t.concat(a[e].controller.getAllParsedValues(this));
      }

      return this._cache.data = this.normalize(t);
    }
  }, {
    key: "getLabelTimestamps",
    value: function getLabelTimestamps() {
      var t = this._cache.labels || [];
      var e, i;
      if (t.length) return t;
      var a = this.getLabels();

      for (e = 0, i = a.length; e < i; ++e) {
        t.push(_parse(this, a[e]));
      }

      return this._cache.labels = this._normalized ? t : this.normalize(t);
    }
  }, {
    key: "normalize",
    value: function normalize(t) {
      return (0, _helpersSegment._)(t.sort(sorter));
    }
  }]);

  return TimeScale;
}(Scale);

exports.TimeScale = TimeScale;

_defineProperty(TimeScale, "id", "time");

_defineProperty(TimeScale, "defaults", {
  bounds: "data",
  adapters: {},
  time: {
    parser: !1,
    unit: !1,
    round: !1,
    isoWeekday: !1,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: !1,
    major: {
      enabled: !1
    }
  }
});

function interpolate(t, e, i) {
  var _lookupByKey2, _t$a, _t$s, _lookupByKey3, _t$a2, _t$s2;

  var a = 0,
      s = t.length - 1,
      n,
      r,
      o,
      l;
  i ? (e >= t[a].pos && e <= t[s].pos && (_lookupByKey2 = (0, _helpersSegment.B)(t, "pos", e), a = _lookupByKey2.lo, s = _lookupByKey2.hi, _lookupByKey2), (_t$a = t[a], n = _t$a.pos, o = _t$a.time, _t$a), (_t$s = t[s], r = _t$s.pos, l = _t$s.time, _t$s)) : (e >= t[a].time && e <= t[s].time && (_lookupByKey3 = (0, _helpersSegment.B)(t, "time", e), a = _lookupByKey3.lo, s = _lookupByKey3.hi, _lookupByKey3), (_t$a2 = t[a], n = _t$a2.time, o = _t$a2.pos, _t$a2), (_t$s2 = t[s], r = _t$s2.time, l = _t$s2.pos, _t$s2));
  i = r - n;
  return i ? o + (l - o) * (e - n) / i : o;
}

var TimeSeriesScale = /*#__PURE__*/function (_TimeScale) {
  _inherits(TimeSeriesScale, _TimeScale);

  var _super25 = _createSuper(TimeSeriesScale);

  function TimeSeriesScale(t) {
    var _this45;

    _classCallCheck(this, TimeSeriesScale);

    _this45 = _super25.call(this, t), _this45._table = [], _this45._minPos = void 0, _this45._tableRange = void 0;
    return _this45;
  }

  _createClass(TimeSeriesScale, [{
    key: "initOffsets",
    value: function initOffsets() {
      var t = this._getTimestampsForTable(),
          e = this._table = this.buildLookupTable(t);

      this._minPos = interpolate(e, this.min), this._tableRange = interpolate(e, this.max) - this._minPos, _get(_getPrototypeOf(TimeSeriesScale.prototype), "initOffsets", this).call(this, t);
    }
  }, {
    key: "buildLookupTable",
    value: function buildLookupTable(t) {
      var e = this.min,
          i = this.max;
      var a = [],
          s = [];
      var n, r, o, l, h;

      for (n = 0, r = t.length; n < r; ++n) {
        (l = t[n]) >= e && l <= i && a.push(l);
      }

      if (a.length < 2) return [{
        time: e,
        pos: 0
      }, {
        time: i,
        pos: 1
      }];

      for (n = 0, r = a.length; n < r; ++n) {
        h = a[n + 1], o = a[n - 1], l = a[n], Math.round((h + o) / 2) !== l && s.push({
          time: l,
          pos: n / (r - 1)
        });
      }

      return s;
    }
  }, {
    key: "_generate",
    value: function _generate() {
      var t = this.min,
          e = this.max;

      var i = _get(_getPrototypeOf(TimeSeriesScale.prototype), "getDataTimestamps", this).call(this);

      return i.includes(t) && i.length || i.splice(0, 0, t), i.includes(e) && 1 !== i.length || i.push(e), i.sort(function (t, e) {
        return t - e;
      });
    }
  }, {
    key: "_getTimestampsForTable",
    value: function _getTimestampsForTable() {
      var t = this._cache.all || [];
      if (t.length) return t;
      var e = this.getDataTimestamps();
      var i = this.getLabelTimestamps();
      return t = e.length && i.length ? this.normalize(e.concat(i)) : e.length ? e : i, t = this._cache.all = t;
    }
  }, {
    key: "getDecimalForValue",
    value: function getDecimalForValue(t) {
      return (interpolate(this._table, t) - this._minPos) / this._tableRange;
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(t) {
      var e = this._offsets,
          t = this.getDecimalForPixel(t) / e.factor - e.end;
      return interpolate(this._table, t * this._tableRange + this._minPos, !0);
    }
  }]);

  return TimeSeriesScale;
}(TimeScale);

exports.TimeSeriesScale = TimeSeriesScale;

_defineProperty(TimeSeriesScale, "id", "timeseries");

_defineProperty(TimeSeriesScale, "defaults", TimeScale.defaults);

var scales = Object.freeze({
  __proto__: null,
  CategoryScale: CategoryScale,
  LinearScale: LinearScale,
  LogarithmicScale: LogarithmicScale,
  RadialLinearScale: RadialLinearScale,
  TimeScale: TimeScale,
  TimeSeriesScale: TimeSeriesScale
});
exports.scales = scales;
var registerables = [controllers, elements, plugins, scales];
exports.registerables = registerables;